=====================
Question: What is the ratio of customers who pay in EUR against customers who pay in CZK?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "Currency",
    "Segment",
    "CustomerID"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": "drop_all",
  "transactions_1k": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  CAST(SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END)
FROM customers;
=====================
Question: In 2012, who had the least consumption in LAM?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "CustomerID",
    "Segment",
    "Currency"
  ],
  "gasstations": [
    "GasStationID",
    "ChainID",
    "Country",
    "Segment"
  ],
  "products": [
    "ProductID",
    "Description"
  ],
  "yearmonth": [
    "Consumption",
    "Date",
    "CustomerID"
  ],
  "transactions_1k": [
    "Date",
    "CustomerID",
    "TransactionID",
    "Time",
    "CardID",
    "GasStationID"
  ]
}
```
Final SQL (attempt 1): SELECT T1.CustomerID FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'LAM' AND T1.Date LIKE '2012%' GROUP BY T1.CustomerID ORDER BY SUM(T1.Consumption) ASC LIMIT 1
=====================
Question: What was the average monthly consumption of customers in SME for the year 2013?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "Segment",
    "CustomerID",
    "Currency"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": [
    "Consumption",
    "Date",
    "CustomerID"
  ],
  "transactions_1k": "drop_all"
}
```
Final SQL (attempt 1): SELECT AVG(Consumption) / 12 FROM yearmonth WHERE substr(Date, 1, 4) = "2013" AND CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = "SME")
=====================
Question: What was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "Currency",
    "CustomerID",
    "Segment"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": [
    "Consumption",
    "Date",
    "CustomerID"
  ],
  "transactions_1k": [
    "CustomerID",
    "Date",
    "TransactionID",
    "Time",
    "CardID",
    "GasStationID"
  ]
}
```
Final SQL (attempt 1): SELECT
  SUM(CASE WHEN T2.Currency = 'CZK' THEN T1.Consumption ELSE 0 END) - SUM(CASE WHEN T2.Currency = 'EUR' THEN T1.Consumption ELSE 0 END)
FROM YearMonth AS T1
INNER JOIN Customers AS T2
  ON T1.CustomerID = T2.CustomerID
WHERE
  SUBSTR(T1.Date, 1, 4) = '2012';
=====================
Question: Which year recorded the most consumption of gas paid in CZK?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "Currency",
    "CustomerID",
    "Segment"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": [
    "Date",
    "Consumption",
    "CustomerID"
  ],
  "transactions_1k": [
    "Date",
    "CustomerID",
    "Amount",
    "Price",
    "TransactionID",
    "Time"
  ]
}
```
Final SQL (attempt 1): SELECT
  SUBSTR(Date, 1, 4) AS Year
FROM yearmonth
WHERE
  CustomerID IN (
    SELECT
      CustomerID
    FROM customers
    WHERE
      Currency = 'CZK'
  )
GROUP BY
  Year
ORDER BY
  SUM(Consumption) DESC
LIMIT 1;
=====================
Question: What was the gas consumption peak month for SME customers in 2013?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "CustomerID",
    "Segment",
    "Currency"
  ],
  "gasstations": [
    "GasStationID",
    "ChainID",
    "Country",
    "Segment"
  ],
  "products": [
    "ProductID",
    "Description"
  ],
  "yearmonth": [
    "Consumption",
    "Date",
    "CustomerID"
  ],
  "transactions_1k": "drop_all"
}
```
Final SQL (attempt 1): SELECT SUBSTR(T1.Date, 5, 2) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'SME' AND SUBSTR(T1.Date, 1, 4) = '2013' GROUP BY SUBSTR(T1.Date, 5, 2) ORDER BY SUM(T1.Consumption) DESC LIMIT 1;
=====================
Question: What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "CustomerID",
    "Segment",
    "Currency"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": [
    "Consumption",
    "Date",
    "CustomerID"
  ],
  "transactions_1k": [
    "Amount",
    "CustomerID",
    "Date",
    "Price",
    "TransactionID",
    "GasStationID"
  ]
}
```
Final SQL (attempt 3): SELECT
  (
    (
      SUM(CASE WHEN T2.Segment = 'SME' THEN T1.Consumption ELSE 0 END) * 1.0 / COUNT(DISTINCT CASE WHEN T2.Segment = 'SME' THEN T1.CustomerID ELSE NULL END)
    ) - (
      SUM(CASE WHEN T2.Segment = 'LAM' THEN T1.Consumption ELSE 0 END) * 1.0 / COUNT(DISTINCT CASE WHEN T2.Segment = 'LAM' THEN T1.CustomerID ELSE NULL END)
    ),
    (
      SUM(CASE WHEN T2.Segment = 'LAM' THEN T1.Consumption ELSE 0 END) * 1.0 / COUNT(DISTINCT CASE WHEN T2.Segment = 'LAM' THEN T1.CustomerID ELSE NULL END)
    ) - (
      SUM(CASE WHEN T2.Segment = 'KAM' THEN T1.Consumption ELSE 0 END) * 1.0 / COUNT(DISTINCT CASE WHEN T2.Segment = 'KAM' THEN T1.CustomerID ELSE NULL END)
    ),
    (
      SUM(CASE WHEN T2.Segment = 'KAM' THEN T1.Consumption ELSE 0 END) * 1.0 / COUNT(DISTINCT CASE WHEN T2.Segment = 'KAM' THEN T1.CustomerID ELSE NULL END)
    ) - (
      SUM(CASE WHEN T2.Segment = 'SME' THEN T1.Consumption ELSE 0 END) * 1.0 / COUNT(DISTINCT CASE WHEN T2.Segment = 'SME' THEN T1.CustomerID ELSE NULL END)
    )
  )
FROM yearmonth AS T1
INNER JOIN customers AS T2
  ON T1.CustomerID = T2.CustomerID
WHERE
  T2.Currency = 'CZK' AND substr(T1.Date, 1, 4) = '2013';
Final Error: row value misused
=====================
Question: What is the ratio of customers who pay in EUR against customers who pay in CZK?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "Currency",
    "CustomerID",
    "Segment"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": "drop_all",
  "transactions_1k": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) FROM customers
=====================
Question: What is the ratio of customers who pay in EUR against customers who pay in CZK?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "Currency",
    "Segment",
    "CustomerID"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": "drop_all",
  "transactions_1k": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  CAST(SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END)
FROM customers;
=====================
Question: In 2012, who had the least consumption in LAM?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "CustomerID",
    "Segment",
    "Currency"
  ],
  "gasstations": [
    "GasStationID",
    "ChainID",
    "Country",
    "Segment"
  ],
  "products": [
    "ProductID",
    "Description"
  ],
  "yearmonth": [
    "Consumption",
    "Date",
    "CustomerID"
  ],
  "transactions_1k": [
    "CustomerID",
    "TransactionID",
    "Date",
    "Time",
    "CardID",
    "GasStationID"
  ]
}
```
Final SQL (attempt 1): SELECT T1.CustomerID FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'LAM' AND T1.Date LIKE '2012%' GROUP BY T1.CustomerID ORDER BY sum(T1.Consumption) ASC LIMIT 1
=====================
Question: What was the average monthly consumption of customers in SME for the year 2013?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "CustomerID",
    "Segment",
    "Currency"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": [
    "Consumption",
    "Date",
    "CustomerID"
  ],
  "transactions_1k": "drop_all"
}
```
Final SQL (attempt 1): SELECT AVG(T1.Consumption) / 12
FROM YearMonth AS T1
INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID
WHERE T2.Segment = 'SME' AND T1.Date BETWEEN '201301' AND '201312';
=====================
Question: What was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "Currency",
    "CustomerID",
    "Segment"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": [
    "Consumption",
    "Date",
    "CustomerID"
  ],
  "transactions_1k": [
    "CustomerID",
    "Date",
    "TransactionID",
    "Time",
    "CardID",
    "GasStationID"
  ]
}
```
Final SQL (attempt 1): SELECT
  (
    SELECT
      SUM(T1.Consumption)
    FROM yearmonth AS T1
    JOIN customers AS T2
      ON T1.CustomerID = T2.CustomerID
    WHERE
      T2.Currency = 'CZK' AND T1.Date BETWEEN '201201' AND '201212'
  ) - (
    SELECT
      SUM(T1.Consumption)
    FROM yearmonth AS T1
    JOIN customers AS T2
      ON T1.CustomerID = T2.CustomerID
    WHERE
      T2.Currency = 'EUR' AND T1.Date BETWEEN '201201' AND '201212'
  );
=====================
Question: Which year recorded the most consumption of gas paid in CZK?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "Currency",
    "CustomerID",
    "Segment"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": [
    "Consumption",
    "Date",
    "CustomerID"
  ],
  "transactions_1k": [
    "Amount",
    "Date",
    "CustomerID",
    "TransactionID",
    "CardID",
    "GasStationID"
  ]
}
```
Final SQL (attempt 1): SELECT STRFTIME('%Y', Date) AS Year FROM YearMonth WHERE CustomerID IN (SELECT CustomerID FROM Customers WHERE Currency = 'CZK') GROUP BY Year ORDER BY SUM(Consumption) DESC LIMIT 1;
=====================
Question: What was the gas consumption peak month for SME customers in 2013?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "CustomerID",
    "Segment",
    "Currency"
  ],
  "gasstations": [
    "GasStationID",
    "ChainID",
    "Country",
    "Segment"
  ],
  "products": [
    "ProductID",
    "Description"
  ],
  "yearmonth": [
    "Consumption",
    "Date",
    "CustomerID"
  ],
  "transactions_1k": [
    "Date",
    "CustomerID",
    "TransactionID",
    "Time",
    "CardID",
    "GasStationID"
  ]
}
```
Final SQL (attempt 1): SELECT
  SUBSTR(Date, 5, 2)
FROM YearMonth
WHERE
  CustomerID IN (
    SELECT
      CustomerID
    FROM Customers
    WHERE
      Segment = 'SME'
  )
  AND SUBSTR(Date, 1, 4) = '2013'
GROUP BY
  SUBSTR(Date, 5, 2)
ORDER BY
  SUM(Consumption) DESC
LIMIT 1;
=====================
Question: What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "Segment",
    "Currency",
    "CustomerID"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": [
    "Consumption",
    "Date",
    "CustomerID"
  ],
  "transactions_1k": [
    "Amount",
    "CustomerID",
    "Date",
    "Price",
    "TransactionID",
    "CardID"
  ]
}
```
Final SQL (attempt 1): SELECT
  (
    SELECT
      AVG(T1.Consumption)
    FROM YearMonth AS T1
    INNER JOIN Customers AS T2
      ON T1.CustomerID = T2.CustomerID
    WHERE
      SUBSTR(T1.Date, 1, 4) = '2013'
      AND T2.Currency = 'CZK'
    GROUP BY
      T2.Segment
    HAVING
      T2.Segment = 'SME'
  ) - (
    SELECT
      AVG(T1.Consumption)
    FROM YearMonth AS T1
    INNER JOIN Customers AS T2
      ON T1.CustomerID = T2.CustomerID
    WHERE
      SUBSTR(T1.Date, 1, 4) = '2013'
      AND T2.Currency = 'CZK'
    GROUP BY
      T2.Segment
    HAVING
      T2.Segment = 'LAM'
  ) AS SME_LAM_Difference,
  (
    SELECT
      AVG(T1.Consumption)
    FROM YearMonth AS T1
    INNER JOIN Customers AS T2
      ON T1.CustomerID = T2.CustomerID
    WHERE
      SUBSTR(T1.Date, 1, 4) = '2013'
      AND T2.Currency = 'CZK'
    GROUP BY
      T2.Segment
    HAVING
      T2.Segment = 'LAM'
  ) - (
    SELECT
      AVG(T1.Consumption)
    FROM YearMonth AS T1
    INNER JOIN Customers AS T2
      ON T1.CustomerID = T2.CustomerID
    WHERE
      SUBSTR(T1.Date, 1, 4) = '2013'
      AND T2.Currency = 'CZK'
    GROUP BY
      T2.Segment
    HAVING
      T2.Segment = 'KAM'
  ) AS LAM_KAM_Difference,
  (
    SELECT
      AVG(T1.Consumption)
    FROM YearMonth AS T1
    INNER JOIN Customers AS T2
      ON T1.CustomerID = T2.CustomerID
    WHERE
      SUBSTR(T1.Date, 1, 4) = '2013'
      AND T2.Currency = 'CZK'
    GROUP BY
      T2.Segment
    HAVING
      T2.Segment = 'KAM'
  ) - (
    SELECT
      AVG(T1.Consumption)
    FROM YearMonth AS T1
    INNER JOIN Customers AS T2
      ON T1.CustomerID = T2.CustomerID
    WHERE
      SUBSTR(T1.Date, 1, 4) = '2013'
      AND T2.Currency = 'CZK'
    GROUP BY
      T2.Segment
    HAVING
      T2.Segment = 'SME'
  ) AS KAM_SME_Difference;
=====================
Question: Which of the three segments—SME, LAM and KAM—has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "Segment",
    "Currency",
    "CustomerID"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": [
    "Consumption",
    "Date",
    "CustomerID"
  ],
  "transactions_1k": [
    "CustomerID",
    "Amount",
    "Date",
    "TransactionID",
    "GasStationID",
    "ProductID"
  ]
}
```
Final SQL (attempt 2): SELECT
  Segment,
  PercentageIncrease
FROM (
  SELECT
    c.Segment,
    (
      (
        SUM(CASE WHEN SUBSTR(ym.Date, 1, 4) = '2013' THEN ym.Consumption ELSE 0 END) - SUM(CASE WHEN SUBSTR(ym.Date, 1, 4) = '2012' THEN ym.Consumption ELSE 0 END)
      ) * 100.0 / SUM(CASE WHEN SUBSTR(ym.Date, 1, 4) = '2012' THEN ym.Consumption ELSE 0 END)
    ) AS PercentageIncrease,
    RANK() OVER (ORDER BY (
      (
        SUM(CASE WHEN SUBSTR(ym.Date, 1, 4) = '2013' THEN ym.Consumption ELSE 0 END) - SUM(CASE WHEN SUBSTR(ym.Date, 1, 4) = '2012' THEN ym.Consumption ELSE 0 END)
      ) * 100.0 / SUM(CASE WHEN SUBSTR(ym.Date, 1, 4) = '2012' THEN ym.Consumption ELSE 0 END)
    ) DESC) AS RankAsc,
    RANK() OVER (ORDER BY (
      (
        SUM(CASE WHEN SUBSTR(ym.Date, 1, 4) = '2013' THEN ym.Consumption ELSE 0 END) - SUM(CASE WHEN SUBSTR(ym.Date, 1, 4) = '2012' THEN ym.Consumption ELSE 0 END)
      ) * 100.0 / SUM(CASE WHEN SUBSTR(ym.Date, 1, 4) = '2012' THEN ym.Consumption ELSE 0 END)
    ) ASC) AS RankDesc
  FROM yearmonth AS ym
  JOIN customers AS c
    ON ym.CustomerID = c.CustomerID
  WHERE
    c.Currency = 'EUR' AND SUBSTR(ym.Date, 1, 4) IN ('2012', '2013')
  GROUP BY
    c.Segment
)
WHERE
  RankAsc = 1 OR RankDesc = 1;
=====================
Question: How much did customer 6 consume in total between August and November 2013?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "CustomerID",
    "Segment",
    "Currency"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": [
    "Consumption",
    "Date",
    "CustomerID"
  ],
  "transactions_1k": [
    "Date",
    "CustomerID",
    "TransactionID",
    "Time",
    "CardID",
    "GasStationID"
  ]
}
```
Final SQL (attempt 1): SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND substr(Date, 1, 6) BETWEEN '201308' AND '201311'
=====================
Question: How many more "discount" gas stations does the Czech Republic have compared to Slovakia?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": "drop_all",
  "gasstations": [
    "Country",
    "Segment",
    "GasStationID",
    "ChainID"
  ],
  "products": "drop_all",
  "yearmonth": "drop_all",
  "transactions_1k": "drop_all"
}
```
Final SQL (attempt 1): SELECT (SELECT count(*) FROM gasstations WHERE Country = "CZE" AND Segment = "Discount") - (SELECT count(*) FROM gasstations WHERE Country = "SVK" AND Segment = "Discount");
=====================
Question: Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "CustomerID",
    "Segment",
    "Currency"
  ],
  "gasstations": [
    "GasStationID",
    "ChainID",
    "Country",
    "Segment"
  ],
  "products": [
    "ProductID",
    "Description"
  ],
  "yearmonth": "drop_all",
  "transactions_1k": [
    "Amount",
    "CustomerID",
    "Date",
    "Time",
    "TransactionID",
    "CardID"
  ]
}
```
Final SQL (attempt 1): SELECT
  CASE
    WHEN (
      SELECT
        COUNT(*)
      FROM customers
      WHERE
        Segment = 'SME' AND Currency = 'CZK'
    ) > (
      SELECT
        COUNT(*)
      FROM customers
      WHERE
        Segment = 'SME' AND Currency = 'EUR'
    )
    THEN 'Yes, ' || (
      (
        SELECT
          COUNT(*)
        FROM customers
        WHERE
          Segment = 'SME' AND Currency = 'CZK'
      ) - (
        SELECT
          COUNT(*)
        FROM customers
        WHERE
          Segment = 'SME' AND Currency = 'EUR'
      )
    )
    ELSE 'No'
  END;
=====================
Question: How many percent of LAM customer consumed more than 46.73?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "Segment",
    "CustomerID",
    "Currency"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": [
    "Consumption",
    "CustomerID",
    "Date"
  ],
  "transactions_1k": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T2.Consumption > 46.73 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM'
=====================
Question: In February 2012, what percentage of customers consumed more than 528.3?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "CustomerID",
    "Segment",
    "Currency"
  ],
  "gasstations": [
    "GasStationID",
    "ChainID",
    "Country",
    "Segment"
  ],
  "products": [
    "ProductID",
    "Description"
  ],
  "yearmonth": [
    "Consumption",
    "Date",
    "CustomerID"
  ],
  "transactions_1k": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN Consumption > 528.3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT CustomerID) FROM yearmonth WHERE substr(Date, 1, 6) = '201202'
=====================
Question: What is the highest monthly consumption in the year 2012?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": "drop_all",
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": [
    "Consumption",
    "Date",
    "CustomerID"
  ],
  "transactions_1k": "drop_all"
}
```
Final SQL (attempt 1): SELECT MAX(Consumption) FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012'
=====================
Question: Please list the product description of the products consumed in September, 2013.
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": "drop_all",
  "gasstations": "drop_all",
  "products": [
    "ProductID",
    "Description"
  ],
  "yearmonth": [
    "Date",
    "CustomerID"
  ],
  "transactions_1k": [
    "Date",
    "ProductID"
  ]
}
```
Final SQL (attempt 1): SELECT DISTINCT
  p.Description
FROM transactions_1k AS t
JOIN products AS p
  ON t.ProductID = p.ProductID
WHERE
  SUBSTR(t.Date, 1, 4) = '2013' AND SUBSTR(t.Date, 6, 2) = '09';
=====================
Question: Please list the countries of the gas stations with transactions taken place in June, 2013.
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": "drop_all",
  "gasstations": [
    "Country",
    "GasStationID",
    "ChainID",
    "Segment"
  ],
  "products": "drop_all",
  "yearmonth": [
    "Date",
    "CustomerID",
    "Consumption"
  ],
  "transactions_1k": [
    "Date",
    "GasStationID",
    "CustomerID",
    "TransactionID",
    "CardID",
    "ProductID"
  ]
}
```
Final SQL (attempt 1): SELECT DISTINCT T1.Country FROM GasStations AS T1 INNER JOIN Transactions_1k AS T2 ON T1.GasStationID = T2.GasStationID WHERE strftime('%Y', T2.Date) = '2013' AND strftime('%m', T2.Date) = '06'
=====================
Question: Among the customers who paid in euro, how many of them have a monthly consumption of over 1000?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "CustomerID",
    "Currency",
    "Segment"
  ],
  "yearmonth": [
    "CustomerID",
    "Consumption",
    "Date"
  ],
  "transactions_1k": [
    "CustomerID",
    "Date",
    "TransactionID",
    "Time",
    "CardID",
    "GasStationID"
  ],
  "gasstations": "drop_all",
  "products": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.CustomerID)
FROM customers AS T1
INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID
WHERE T1.Currency = 'EUR' AND T2.Consumption > 1000;
=====================
Question: Please list the product descriptions of the transactions taken place in the gas stations in the Czech Republic.
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": "drop_all",
  "gasstations": [
    "Country",
    "GasStationID",
    "ChainID",
    "Segment"
  ],
  "products": [
    "Description",
    "ProductID"
  ],
  "yearmonth": "drop_all",
  "transactions_1k": [
    "ProductID",
    "GasStationID",
    "Date",
    "Time",
    "TransactionID",
    "CustomerID"
  ]
}
```
Final SQL (attempt 1): SELECT T1.Description FROM products AS T1 INNER JOIN transactions_1k AS T2 ON T1.ProductID = T2.ProductID INNER JOIN gasstations AS T3 ON T2.GasStationID = T3.GasStationID WHERE T3.Country = 'CZE'
=====================
Question: Please list the disparate time of the transactions taken place in the gas stations from chain no. 11.
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": "drop_all",
  "gasstations": [
    "ChainID",
    "GasStationID",
    "Segment",
    "Country"
  ],
  "products": "drop_all",
  "yearmonth": "drop_all",
  "transactions_1k": [
    "Time",
    "GasStationID",
    "CustomerID",
    "Date",
    "TransactionID",
    "CardID"
  ]
}
```
Final SQL (attempt 1): SELECT DISTINCT T1.Time FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11
=====================
Question: Among the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": "drop_all",
  "gasstations": [
    "Country",
    "GasStationID",
    "ChainID",
    "Segment"
  ],
  "products": "drop_all",
  "yearmonth": "drop_all",
  "transactions_1k": [
    "Date",
    "GasStationID",
    "CustomerID",
    "CardID",
    "ProductID",
    "Amount"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(T.TransactionID)
FROM transactions_1k AS T
JOIN gasstations AS G ON T.GasStationID = G.GasStationID
WHERE G.Country = 'CZE' AND T.Date > '2012-01-01'
=====================
Question: What kind of currency did the customer paid at 16:25:00 in 2012/8/24?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "CustomerID",
    "Currency",
    "Segment"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": "drop_all",
  "transactions_1k": [
    "Date",
    "Time",
    "CustomerID",
    "TransactionID",
    "CardID",
    "GasStationID"
  ]
}
```
Final SQL (attempt 1): SELECT
  T2.Currency
FROM transactions_1k AS T1
INNER JOIN customers AS T2
  ON T1.CustomerID = T2.CustomerID
WHERE
  T1.Date = '2012-08-24' AND T1.Time = '16:25:00';
=====================
Question: What segment did the customer have at 2012/8/23 21:20:00?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "CustomerID",
    "Segment",
    "Currency"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": [
    "CustomerID",
    "Date",
    "Consumption"
  ],
  "transactions_1k": [
    "Date",
    "Time",
    "CustomerID",
    "TransactionID",
    "CardID",
    "GasStationID"
  ]
}
```
Final SQL (attempt 1): SELECT T1.Segment FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-23' AND T2.Time = '21:20:00'
=====================
Question: For all the transactions happened during 8:00-9:00 in 2012/8/26, how many happened in CZE?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": "drop_all",
  "gasstations": [
    "Country",
    "GasStationID",
    "ChainID",
    "Segment"
  ],
  "products": "drop_all",
  "yearmonth": "drop_all",
  "transactions_1k": [
    "Date",
    "Time",
    "GasStationID",
    "TransactionID",
    "CustomerID",
    "CardID"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T.GasStationID)
FROM transactions_1k AS T
JOIN gasstations AS G ON T.GasStationID = G.GasStationID
WHERE T.Date = '2012-08-26'
  AND T.Time BETWEEN '08:00:00' AND '09:00:00'
  AND G.Country = 'CZE';
=====================
Question: What's the nationality of the customer who spent 548.4 in 2012/8/24?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "CustomerID",
    "Segment",
    "Currency"
  ],
  "gasstations": [
    "GasStationID",
    "ChainID",
    "Country",
    "Segment"
  ],
  "products": "drop_all",
  "yearmonth": [
    "CustomerID",
    "Date",
    "Consumption"
  ],
  "transactions_1k": [
    "Date",
    "CustomerID",
    "Amount",
    "TransactionID",
    "Time",
    "GasStationID"
  ]
}
```
Final SQL (attempt 1): SELECT
  T1.Country
FROM gasstations AS T1
INNER JOIN transactions_1k AS T2
  ON T1.GasStationID = T2.GasStationID
WHERE
  T2.Date = '2012-08-24' AND T2.Price = 548.4;
=====================
Question: What is the percentage of the customers who used EUR in 2012/8/25?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "CustomerID",
    "Currency",
    "Segment"
  ],
  "gasstations": [
    "GasStationID",
    "ChainID",
    "Country",
    "Segment"
  ],
  "products": [
    "ProductID",
    "Description"
  ],
  "yearmonth": [
    "CustomerID",
    "Date",
    "Consumption"
  ],
  "transactions_1k": [
    "Date",
    "CustomerID",
    "TransactionID",
    "Time",
    "CardID",
    "GasStationID"
  ]
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T1.Date = '2012-08-25' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.CustomerID) FROM Transactions_1K AS T1 JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR'
=====================
Question: For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": "drop_all",
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": [
    "Consumption",
    "Date",
    "CustomerID"
  ],
  "transactions_1k": [
    "Price",
    "Date",
    "CustomerID",
    "Amount",
    "TransactionID",
    "Time"
  ]
}
```
Final SQL (attempt 1): SELECT
  CAST(SUM(CASE WHEN STRFTIME('%Y', Date) = '2012' THEN Consumption ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', Date) = '2013' THEN Consumption ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', Date) = '2012' THEN Consumption ELSE 0 END)
FROM YearMonth
WHERE
  CustomerID = (
    SELECT
      CustomerID
    FROM transactions_1k
    WHERE
      Price = 634.8 AND Date = '2012-08-25'
  );
=====================
Question: What is the percentage of "premium" against the overall segment in Country = "SVK"?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "Segment",
    "CustomerID",
    "Currency"
  ],
  "gasstations": [
    "Country",
    "Segment",
    "GasStationID",
    "ChainID"
  ],
  "products": [
    "ProductID",
    "Description"
  ],
  "yearmonth": "drop_all",
  "transactions_1k": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN Segment = 'premium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM gasstations WHERE Country = 'SVK';
=====================
Question: What is the amount spent by customer "38508" at the gas stations? How much had the customer spent in January 2012?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "CustomerID",
    "Segment",
    "Currency"
  ],
  "gasstations": [
    "GasStationID",
    "ChainID",
    "Country",
    "Segment"
  ],
  "products": [
    "ProductID",
    "Description"
  ],
  "yearmonth": [
    "CustomerID",
    "Date",
    "Consumption"
  ],
  "transactions_1k": [
    "Amount",
    "CustomerID",
    "Date",
    "GasStationID",
    "TransactionID",
    "Time"
  ]
}
```
Final SQL (attempt 2): SELECT SUM(CASE WHEN T1.Date LIKE '201201%' THEN T1.Amount ELSE 0 END) AS January_2012_Spent, SUM(T1.Amount) AS Total_Spent FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.CustomerID = 38508
=====================
Question: Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "CustomerID",
    "Currency",
    "Segment"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": "drop_all",
  "transactions_1k": [
    "CustomerID",
    "Amount",
    "Price",
    "Date",
    "TransactionID",
    "Time"
  ]
}
```
Final SQL (attempt 1): SELECT
  T1.Currency,
  SUM(T2.Price) / SUM(T2.Amount)
FROM customers AS T1
INNER JOIN transactions_1k AS T2
  ON T1.CustomerID = T2.CustomerID
WHERE
  T1.CustomerID = (
    SELECT
      CustomerID
    FROM transactions_1k
    ORDER BY
      Price * Amount DESC
    LIMIT 1
  );
=====================
Question: For all the people who paid more than 29.00 per unit of product id No.5. Give their consumption status in the August of 2012.
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "CustomerID",
    "Segment",
    "Currency"
  ],
  "gasstations": "drop_all",
  "products": [
    "ProductID",
    "Description"
  ],
  "yearmonth": [
    "CustomerID",
    "Date",
    "Consumption"
  ],
  "transactions_1k": [
    "Price",
    "Amount",
    "ProductID",
    "CustomerID",
    "Date",
    "TransactionID"
  ]
}
```
Final SQL (attempt 1): SELECT
  T2.Consumption
FROM Transactions_1K AS T1
JOIN YearMonth AS T2
  ON T1.CustomerID = T2.CustomerID
WHERE
  T1.ProductID = 5 AND T1.Price / T1.Amount > 29 AND T2.Date = '201208';
=====================
Question: What's Angela Sanders's major?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": [
    "first_name",
    "last_name",
    "member_id",
    "email",
    "position",
    "link_to_major"
  ],
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": [
    "major_name",
    "major_id",
    "department",
    "college"
  ]
}
```
Final SQL (attempt 1): SELECT T1.major_name FROM Major AS T1 INNER JOIN Member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = "Angela" AND T2.last_name = "Sanders"
=====================
Question: Among the students from the Student_Club who attended the event "Women's Soccer", how many of them want a T-shirt that's in medium size?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": [
    "t_shirt_size",
    "member_id",
    "first_name",
    "last_name",
    "email",
    "position"
  ],
  "Attendance": [
    "link_to_member",
    "link_to_event"
  ],
  "Event": [
    "event_name",
    "event_id",
    "event_date",
    "type",
    "notes",
    "location"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(T1.member_id) FROM Member AS T1 INNER JOIN Attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN Event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = "Women's Soccer" AND T1.t_shirt_size = "Medium"
=====================
Question: Among the events attended by more than 10 members of the Student_Club, how many of them are meetings?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": [
    "member_id",
    "first_name",
    "last_name",
    "email",
    "position",
    "t_shirt_size"
  ],
  "Attendance": [
    "link_to_event",
    "link_to_member"
  ],
  "Event": [
    "event_id",
    "event_name",
    "event_date",
    "type",
    "notes",
    "location"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.link_to_event)
FROM Attendance AS T1
JOIN Event AS T2 ON T1.link_to_event = T2.event_id
WHERE T2.type = 'Meeting'
GROUP BY T1.link_to_event
HAVING COUNT(*) > 10;
=====================
Question: List all the names of events that had an attendance of over 20 students but were not fundraisers.
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": "keep_all",
  "Attendance": [
    "link_to_event",
    "link_to_member"
  ],
  "Event": [
    "event_name",
    "event_id",
    "event_date",
    "type",
    "notes",
    "location"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.event_name FROM Event AS T1 INNER JOIN Attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.type != 'fundraiser' GROUP BY T1.event_id HAVING count(T2.link_to_member) > 20
=====================
Question: What is the amount of the funds that the Vice President received?
 db_id: student_club
Selector: ```json
{
  "Income": [
    "amount",
    "income_id",
    "date_received",
    "source",
    "notes",
    "link_to_member"
  ],
  "Budget": [
    "drop_all"
  ],
  "Zip_Code": [
    "drop_all"
  ],
  "Expense": [
    "drop_all"
  ],
  "Member": [
    "position",
    "member_id",
    "first_name",
    "last_name",
    "email",
    "phone"
  ],
  "Attendance": [
    "drop_all"
  ],
  "Event": [
    "drop_all"
  ],
  "Major": [
    "drop_all"
  ]
}
```
Final SQL (attempt 1): SELECT T1.amount FROM Income AS T1 INNER JOIN Member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.position = "Vice President"
=====================
Question: List the full name of the Student_Club members that grew up in Illinois state.
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": [
    "zip_code",
    "state",
    "city",
    "county",
    "type",
    "short_state"
  ],
  "Expense": "drop_all",
  "Member": [
    "first_name",
    "last_name",
    "zip",
    "member_id",
    "email",
    "position"
  ],
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.first_name, T1.last_name
FROM Member AS T1
JOIN Zip_Code AS T2 ON T1.zip = T2.zip_code
WHERE T2.state = "Illinois";
=====================
Question: Was each expense in October Meeting on October 8, 2019 approved?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "budget_id",
    "link_to_event",
    "category",
    "spent",
    "remaining",
    "amount"
  ],
  "Zip_Code": "drop_all",
  "Expense": [
    "approved",
    "expense_description",
    "expense_date",
    "cost",
    "link_to_budget",
    "expense_id"
  ],
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": [
    "event_name",
    "event_date",
    "event_id",
    "type",
    "notes",
    "location"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  CASE
    WHEN COUNT(CASE WHEN T1.approved = 'TRUE' THEN 1 ELSE NULL END) = COUNT(T1.approved)
    THEN 'Yes'
    ELSE 'No'
  END
FROM Expense AS T1
INNER JOIN Budget AS T2
  ON T1.link_to_budget = T2.budget_id
INNER JOIN Event AS T3
  ON T2.link_to_event = T3.event_id
WHERE
  T3.event_name = 'October Meeting' AND T3.event_date = '2019-10-08';
=====================
Question: Calculate the total average cost that Elijah Allen spent in the events on September and October.
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "budget_id",
    "link_to_event",
    "category",
    "spent",
    "remaining",
    "amount"
  ],
  "Zip_Code": "drop_all",
  "Expense": [
    "expense_date",
    "cost",
    "link_to_member",
    "expense_id",
    "expense_description",
    "approved"
  ],
  "Member": [
    "first_name",
    "last_name",
    "member_id",
    "email",
    "position",
    "t_shirt_size"
  ],
  "Attendance": "keep_all",
  "Event": [
    "event_name",
    "event_id",
    "event_date",
    "type",
    "notes",
    "location"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT AVG(T1.cost) FROM Expense AS T1 INNER JOIN Member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Elijah' AND T2.last_name = 'Allen' AND CAST(strftime('%m', T1.expense_date) AS INTEGER) IN (9, 10);
=====================
Question: Calculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020.
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "spent",
    "amount",
    "remaining",
    "category",
    "event_status",
    "budget_id"
  ],
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": [
    "event_date",
    "event_id",
    "event_name",
    "type",
    "notes",
    "location"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  (
    SELECT
      SUM(T1.spent)
    FROM Budget AS T1
    INNER JOIN Event AS T2
      ON T1.link_to_event = T2.event_id
    WHERE
      STRFTIME('%Y', T2.event_date) = '2019'
  ) - (
    SELECT
      SUM(T1.spent)
    FROM Budget AS T1
    INNER JOIN Event AS T2
      ON T1.link_to_event = T2.event_id
    WHERE
      STRFTIME('%Y', T2.event_date) = '2020'
  );
=====================
Question: What was the notes of the fundraising on 2019/9/14?
 db_id: student_club
Selector: ```json
{
  "Income": [
    "notes",
    "source",
    "date_received",
    "amount",
    "income_id",
    "link_to_member"
  ],
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT notes FROM Income WHERE source = 'Fundraising' AND date_received = '2019-09-14'
=====================
Question: Tell the phone number of "Carlo Jacobs".
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": [
    "phone",
    "first_name",
    "last_name",
    "member_id",
    "email",
    "position"
  ],
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT phone FROM Member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'
=====================
Question: What is the status of the event which bought "Post Cards, Posters" on 2019/8/20?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "budget_id",
    "link_to_event",
    "category",
    "spent",
    "remaining",
    "amount"
  ],
  "Zip_Code": "drop_all",
  "Expense": [
    "expense_id",
    "expense_description",
    "expense_date",
    "cost",
    "link_to_budget",
    "approved"
  ],
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": [
    "event_id",
    "status",
    "event_name",
    "event_date",
    "type",
    "notes"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.event_status FROM Budget AS T1 JOIN Expense AS T2 ON T1.link_to_event = T2.link_to_budget WHERE T2.expense_description = "Post Cards, Posters" AND T2.expense_date = "2019-08-20"
=====================
Question: What was Brent Thomason's major?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": [
    "member_id",
    "first_name",
    "last_name",
    "link_to_major",
    "email",
    "position"
  ],
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": [
    "major_id",
    "major_name",
    "department",
    "college"
  ]
}
```
Final SQL (attempt 1): SELECT T1.major_name FROM Major AS T1 JOIN Member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = "Brent" AND T2.last_name = "Thomason"
=====================
Question: For all the club members from "Business" major, how many of them wear medium size t-shirt?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": [
    "t_shirt_size",
    "member_id",
    "first_name",
    "last_name",
    "link_to_major",
    "position"
  ],
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": [
    "major_name",
    "major_id",
    "department",
    "college"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(T1.member_id) FROM Member AS T1 INNER JOIN Major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T1.t_shirt_size = 'Medium'
=====================
Question: Which department was the President of the club in?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": [
    "position",
    "link_to_major",
    "member_id",
    "first_name",
    "last_name",
    "email"
  ],
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": [
    "department",
    "major_id",
    "major_name",
    "college"
  ]
}
```
Final SQL (attempt 1): SELECT T1.department FROM Major AS T1 JOIN Member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'President'
=====================
Question: State the date Connor Hilton paid his/her dues.
 db_id: student_club
Selector: ```json
{
  "Income": [
    "date_received",
    "source",
    "amount",
    "income_id",
    "notes",
    "link_to_member"
  ],
  "Member": [
    "first_name",
    "last_name",
    "member_id",
    "email",
    "position",
    "t_shirt_size"
  ],
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.date_received
FROM Income AS T1
INNER JOIN Member AS T2
  ON T1.link_to_member = T2.member_id
WHERE
  T2.first_name = 'Connor' AND T2.last_name = 'Hilton' AND T1.source = 'Dues';
=====================
Question: How many times was the budget in Advertisement for "Yearly Kickoff" meeting more than "October Meeting"?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "category",
    "amount",
    "link_to_event",
    "budget_id",
    "spent",
    "remaining"
  ],
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": [
    "event_name",
    "event_id",
    "event_date",
    "type",
    "notes",
    "location"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  COUNT(CASE WHEN T1.event_name = 'Yearly Kickoff' THEN T2.amount ELSE NULL END)
FROM Event AS T1
INNER JOIN Budget AS T2
  ON T1.event_id = T2.link_to_event
WHERE
  T2.category = 'Advertisement' AND T2.amount > (
    SELECT
      T2_0.amount
    FROM Event AS T1_0
    INNER JOIN Budget AS T2_0
      ON T1_0.event_id = T2_0.link_to_event
    WHERE
      T1_0.event_name = 'October Meeting' AND T2_0.category = 'Advertisement'
  );
=====================
Question: What is the total cost of the pizzas for all the events?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "budget_id",
    "category",
    "spent",
    "remaining",
    "amount",
    "event_status"
  ],
  "Zip_Code": "drop_all",
  "Expense": [
    "cost",
    "expense_description",
    "expense_id",
    "expense_date",
    "approved",
    "link_to_budget"
  ],
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": [
    "event_name",
    "event_id",
    "event_date",
    "type",
    "notes",
    "location"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT SUM(cost) FROM Expense WHERE expense_description = 'Pizza'
=====================
Question: How many cities are there in Orange County, Virginia?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": [
    "county",
    "state",
    "city",
    "zip_code",
    "type",
    "short_state"
  ],
  "Expense": "drop_all",
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT city) FROM Zip_Code WHERE county = "Orange County" AND state = "Virginia"
=====================
Question: What does the person with the phone number "809-555-3360" major in?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": [
    "phone",
    "member_id",
    "first_name",
    "last_name",
    "email",
    "position"
  ],
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": [
    "major_name",
    "major_id",
    "department",
    "college"
  ]
}
```
Final SQL (attempt 1): SELECT T1.major_name FROM Major AS T1 INNER JOIN Member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.phone = "809-555-3360"
=====================
Question: How many members attended the "Women's Soccer" event?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "budget_id",
    "category",
    "amount",
    "spent",
    "remaining",
    "event_status"
  ],
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": [
    "member_id",
    "first_name",
    "last_name",
    "email",
    "position",
    "t_shirt_size"
  ],
  "Attendance": [
    "link_to_event",
    "link_to_member"
  ],
  "Event": [
    "event_id",
    "event_name",
    "event_date",
    "type",
    "notes",
    "location"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(T1.link_to_member) FROM Attendance AS T1 INNER JOIN Event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = "Women's Soccer"
=====================
Question: List all the members of the "School of Applied Sciences, Technology and Education" department.
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": [
    "first_name",
    "last_name",
    "member_id",
    "email",
    "position",
    "t_shirt_size"
  ],
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": [
    "department",
    "major_id",
    "major_name",
    "college"
  ]
}
```
Final SQL (attempt 1): SELECT T1.first_name, T1.last_name FROM Member AS T1 JOIN Major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = "School of Applied Sciences, Technology and Education"
=====================
Question: Among all the closed events, which event has the highest spend-to-budget ratio?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "spent",
    "amount",
    "budget_id",
    "category",
    "remaining",
    "event_status"
  ],
  "Zip_Code": "drop_all",
  "Expense": [
    "link_to_budget",
    "expense_id",
    "expense_description",
    "expense_date",
    "cost",
    "approved"
  ],
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": [
    "status",
    "event_id",
    "event_name",
    "event_date",
    "type",
    "notes"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.event_name
FROM Event AS T1
JOIN Budget AS T2 ON T1.event_id = T2.link_to_event
WHERE T1.status = "Closed"
ORDER BY CAST(T2.spent AS REAL) / T2.amount DESC
LIMIT 1;
=====================
Question: What is the highest amount of budget spend for an event?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "spent",
    "amount",
    "budget_id",
    "category",
    "remaining",
    "event_status"
  ],
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": [
    "event_id",
    "event_name",
    "event_date",
    "type",
    "notes",
    "location"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT MAX(spent) FROM Budget
=====================
Question: What is the total amount of money spent for food?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "spent",
    "category",
    "budget_id",
    "amount",
    "remaining",
    "link_to_event"
  ],
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT SUM(Spent) FROM Budget WHERE Category = 'Food';
=====================
Question: List the name of students that have attended more than 7 events.
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": [
    "member_id",
    "first_name",
    "last_name",
    "email",
    "position",
    "link_to_major"
  ],
  "Attendance": [
    "link_to_member",
    "link_to_event"
  ],
  "Event": [
    "event_id",
    "event_name",
    "event_date",
    "type",
    "status",
    "location"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT T2.first_name, T2.last_name
FROM Attendance AS T1
JOIN Member AS T2 ON T1.link_to_member = T2.member_id
GROUP BY T1.link_to_member
HAVING COUNT(T1.link_to_event) > 7;
=====================
Question: Which student has been entrusted to manage the budget for the Yearly Kickoff?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "link_to_event",
    "budget_id",
    "category",
    "spent",
    "remaining",
    "amount"
  ],
  "Zip_Code": "drop_all",
  "Expense": [
    "link_to_budget",
    "expense_id",
    "expense_description",
    "expense_date",
    "cost",
    "approved"
  ],
  "Member": [
    "member_id",
    "first_name",
    "last_name",
    "position",
    "email",
    "t_shirt_size"
  ],
  "Attendance": "drop_all",
  "Event": [
    "event_name",
    "event_id",
    "event_date",
    "type",
    "notes",
    "location"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.first_name, T1.last_name
FROM Member AS T1
INNER JOIN Expense AS T2 ON T1.member_id = T2.link_to_member
INNER JOIN Budget AS T3 ON T2.link_to_budget = T3.budget_id
INNER JOIN Event AS T4 ON T3.link_to_event = T4.event_id
WHERE T4.event_name = 'Yearly Kickoff';
=====================
Question: Which event has the lowest cost?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "budget_id",
    "link_to_event",
    "category",
    "spent",
    "remaining",
    "amount"
  ],
  "Zip_Code": "drop_all",
  "Expense": [
    "cost",
    "expense_id",
    "link_to_budget",
    "expense_description",
    "expense_date",
    "approved"
  ],
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": [
    "event_name",
    "event_id",
    "event_date",
    "type",
    "notes",
    "location"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT T2.event_name FROM Expense AS T1 INNER JOIN Budget AS T3 ON T1.link_to_budget = T3.budget_id INNER JOIN Event AS T2 ON T3.link_to_event = T2.event_id WHERE T1.cost = ( SELECT min(T1.cost) FROM Expense AS T1 INNER JOIN Budget AS T2 ON T1.link_to_budget = T2.budget_id )
=====================
Question: Based on the total cost for all event, what is the percentage of cost for Yearly Kickoff event?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "amount",
    "spent",
    "remaining",
    "category",
    "budget_id",
    "link_to_event"
  ],
  "Zip_Code": "drop_all",
  "Expense": [
    "cost",
    "expense_date",
    "expense_description",
    "expense_id",
    "link_to_budget",
    "approved"
  ],
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": [
    "event_name",
    "event_id",
    "event_date",
    "type",
    "location",
    "notes"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T3.event_name = 'Yearly Kickoff' THEN T1.cost ELSE 0 END) AS REAL) * 100 / SUM(T1.cost) FROM Expense AS T1 INNER JOIN Budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN Event AS T3 ON T2.link_to_event = T3.event_id
=====================
Question: Indicate the top source of funds received in September 2019 based on their amount.
 db_id: student_club
Selector: ```json
{
  "Income": [
    "amount",
    "source",
    "date_received",
    "income_id",
    "notes",
    "link_to_member"
  ],
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT source FROM Income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' ORDER BY amount DESC LIMIT 1
=====================
Question: How many members of the Student_Club have major in 'Physics Teaching'?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": [
    "link_to_major",
    "member_id",
    "first_name",
    "last_name",
    "email",
    "position"
  ],
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": [
    "major_name",
    "major_id",
    "department",
    "college"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(T1.member_id) FROM Member AS T1 INNER JOIN Major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Physics Teaching'
=====================
Question: Name the event with the highest amount spent on advertisement.
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "category",
    "spent",
    "link_to_event",
    "budget_id",
    "amount",
    "remaining"
  ],
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": [
    "event_name",
    "event_id",
    "event_date",
    "type",
    "notes",
    "location"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.event_name FROM Event AS T1 INNER JOIN Budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Advertisement' ORDER BY T2.spent DESC LIMIT 1
=====================
Question: Did Maya Mclean attend the 'Women's Soccer' event?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": [
    "member_id",
    "first_name",
    "last_name",
    "position",
    "email",
    "t_shirt_size"
  ],
  "Attendance": [
    "link_to_member",
    "link_to_event"
  ],
  "Event": [
    "event_id",
    "event_name",
    "event_date",
    "type",
    "notes",
    "location"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  CASE WHEN COUNT(T1.member_id) > 0 THEN 'Yes' ELSE 'No' END
FROM Member AS T1
INNER JOIN Attendance AS T2
  ON T1.member_id = T2.link_to_member
INNER JOIN Event AS T3
  ON T2.link_to_event = T3.event_id
WHERE
  T1.first_name = 'Maya' AND T1.last_name = 'Mclean' AND T3.event_name = 'Women''s Soccer';
=====================
Question: Indicate the cost of posters for 'September Speaker' event.
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "amount",
    "budget_id",
    "link_to_event",
    "category",
    "spent",
    "remaining"
  ],
  "Zip_Code": "drop_all",
  "Expense": [
    "cost",
    "expense_description",
    "link_to_budget",
    "expense_id",
    "expense_date",
    "approved"
  ],
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": [
    "event_name",
    "event_id",
    "event_date",
    "status",
    "type",
    "notes"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.cost
FROM Expense AS T1
INNER JOIN Budget AS T2
  ON T1.link_to_budget = T2.budget_id
INNER JOIN Event AS T3
  ON T2.link_to_event = T3.event_id
WHERE
  T1.expense_description = 'Posters' AND T3.event_name = 'September Speaker';
=====================
Question: Indicate the name of the closed event whose cost has exceeded the budget the most.
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "budget_id",
    "link_to_event",
    "remaining",
    "amount",
    "spent",
    "category"
  ],
  "Zip_Code": "drop_all",
  "Expense": [
    "link_to_budget",
    "cost",
    "expense_id",
    "expense_description",
    "expense_date",
    "approved"
  ],
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": [
    "event_name",
    "event_id",
    "status",
    "event_date",
    "type",
    "notes"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.event_name FROM Event AS T1 JOIN Budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.status = 'Closed' ORDER BY T2.remaining ASC LIMIT 1
=====================
Question: Identify the type of expenses and their total value approved for 'October Meeting' event.
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "budget_id",
    "link_to_event",
    "category",
    "spent",
    "remaining",
    "amount"
  ],
  "Zip_Code": "drop_all",
  "Expense": [
    "cost",
    "expense_description",
    "approved",
    "expense_id",
    "expense_date",
    "link_to_budget"
  ],
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": [
    "event_name",
    "event_id",
    "event_date",
    "type",
    "notes",
    "location"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.expense_description,
  SUM(T1.cost)
FROM Expense AS T1
JOIN Budget AS T2
  ON T1.link_to_budget = T2.budget_id
JOIN Event AS T3
  ON T2.link_to_event = T3.event_id
WHERE
  T3.event_name = 'October Meeting' AND T1.approved = 'TRUE'
GROUP BY
  T1.expense_description;
=====================
Question: Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "amount",
    "category",
    "link_to_event",
    "budget_id",
    "spent",
    "remaining"
  ],
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": [
    "event_name",
    "event_id",
    "event_date",
    "type",
    "notes",
    "location"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  b.category
FROM Budget AS b
JOIN Event AS e
  ON b.link_to_event = e.event_id
WHERE
  e.event_name = 'April Speaker'
ORDER BY
  b.amount ASC;
=====================
Question: Mention the total expense used on 8/20/2019.
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": [
    "cost",
    "expense_date",
    "expense_id",
    "expense_description",
    "approved",
    "link_to_member"
  ],
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT SUM(cost) FROM Expense WHERE expense_date = '2019-08-20'
=====================
Question: List out the full name and total cost that member id "rec4BLdZHS2Blfp4v" incurred?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "budget_id",
    "category",
    "spent",
    "remaining",
    "amount",
    "event_status"
  ],
  "Zip_Code": "drop_all",
  "Expense": [
    "cost",
    "expense_description",
    "expense_date",
    "approved",
    "link_to_member",
    "link_to_budget"
  ],
  "Member": [
    "member_id",
    "first_name",
    "last_name",
    "position",
    "t_shirt_size",
    "email"
  ],
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.first_name,
  T1.last_name,
  SUM(T2.cost)
FROM Member AS T1
JOIN Expense AS T2
  ON T1.member_id = T2.link_to_member
WHERE
  T1.member_id = 'rec4BLdZHS2Blfp4v';
=====================
Question: State what kind of expenses that Sacha Harrison incurred?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": [
    "expense_description",
    "link_to_member",
    "expense_id",
    "expense_date",
    "cost",
    "approved"
  ],
  "Member": [
    "first_name",
    "last_name",
    "member_id",
    "zip",
    "t_shirt_size",
    "position"
  ],
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.expense_description
FROM Expense AS T1
INNER JOIN Member AS T2
  ON T1.link_to_member = T2.member_id
WHERE
  T2.first_name = 'Sacha' AND T2.last_name = 'Harrison';
=====================
Question: State the category of events were held at MU 215.
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "category",
    "budget_id",
    "link_to_event",
    "spent",
    "remaining",
    "amount"
  ],
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": [
    "location",
    "type",
    "event_id",
    "event_name",
    "event_date",
    "notes"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT DISTINCT T1.type FROM Event AS T1 WHERE T1.location = "MU 215"
=====================
Question: List the last name of members with a major in environmental engineering and include its department and college name.
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": [
    "last_name",
    "link_to_major",
    "member_id",
    "first_name",
    "email",
    "position"
  ],
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": [
    "major_name",
    "department",
    "college",
    "major_id"
  ]
}
```
Final SQL (attempt 1): SELECT
  T1.last_name,
  T2.department,
  T2.college
FROM Member AS T1
INNER JOIN Major AS T2
  ON T1.link_to_major = T2.major_id
WHERE
  T2.major_name = 'Environmental Engineering';
=====================
Question: What are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "category",
    "spent",
    "link_to_event",
    "budget_id",
    "amount",
    "event_status"
  ],
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": [
    "location",
    "type",
    "event_id",
    "event_name",
    "event_date",
    "notes"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT DISTINCT T1.category FROM Budget AS T1 INNER JOIN Event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.location = "MU 215" AND T2.type = "Guest Speaker" AND T1.spent = 0
=====================
Question: Among the members with t-shirt size of medium, what is the percentage of the amount 50 received by the Student_Club?
 db_id: student_club
Selector: ```json
{
  "Income": [
    "amount",
    "income_id",
    "date_received",
    "source",
    "notes",
    "link_to_member"
  ],
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": [
    "t_shirt_size",
    "member_id",
    "first_name",
    "last_name",
    "email",
    "position"
  ],
  "Attendance": "keep_all",
  "Event": "drop_all",
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T2.amount = 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.member_id) FROM Member AS T1 INNER JOIN Income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'Medium'
=====================
Question: List the names of closed event as "game" that was closed from 3/15/2019 to 3/20/2020.
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": [
    "event_name",
    "event_date",
    "status",
    "type",
    "event_id",
    "notes"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT event_name FROM Event WHERE status = 'Closed' AND type = 'Game' AND event_date BETWEEN '2019-03-15' AND '2020-03-20'
=====================
Question: Give the full name and contact number of members who had to spend more than average on each expense.
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": [
    "cost",
    "expense_id",
    "expense_description",
    "expense_date",
    "approved",
    "link_to_member"
  ],
  "Member": [
    "first_name",
    "last_name",
    "phone",
    "member_id",
    "email",
    "position"
  ],
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.first_name, T1.last_name, T1.phone
FROM Member AS T1
JOIN Expense AS T2 ON T1.member_id = T2.link_to_member
WHERE T2.cost > (SELECT AVG(cost) FROM Expense);
=====================
Question: Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it.
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "budget_id",
    "link_to_event",
    "event_status",
    "category",
    "amount",
    "spent"
  ],
  "Zip_Code": "drop_all",
  "Expense": [
    "expense_id",
    "expense_description",
    "cost",
    "expense_date",
    "link_to_member",
    "link_to_budget"
  ],
  "Member": [
    "member_id",
    "first_name",
    "last_name",
    "position",
    "email",
    "phone"
  ],
  "Attendance": "drop_all",
  "Event": [
    "event_id",
    "event_name",
    "event_date",
    "type",
    "status",
    "location"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.first_name,
  T1.last_name,
  T2.cost
FROM Member AS T1
INNER JOIN Expense AS T2
  ON T1.member_id = T2.link_to_member
WHERE
  T2.expense_description = 'Water, Veggie tray, supplies';
=====================
Question: Write the full names of students who received funds on the date of 9/9/2019 and include the amount received.
 db_id: student_club
Selector: ```json
{
  "Income": [
    "amount",
    "date_received",
    "link_to_member",
    "income_id",
    "source",
    "notes"
  ],
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": [
    "first_name",
    "last_name",
    "member_id",
    "email",
    "position",
    "t_shirt_size"
  ],
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.first_name,
  T1.last_name,
  T2.amount
FROM Member AS T1
INNER JOIN Income AS T2
  ON T1.member_id = T2.link_to_member
WHERE
  T2.date_received = '9/9/2019';
=====================
Question: Are there more in-patient or outpatient who were male? What is the deviation in percentage?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": "drop_all",
  "Patient": [
    "ID",
    "SEX",
    "Admission",
    "Birthday",
    "Description",
    "First Date"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  CASE
    WHEN (
      SELECT
        COUNT(CASE WHEN SEX = 'M' AND Admission = '+' THEN ID ELSE NULL END)
      FROM Patient
    ) > (
      SELECT
        COUNT(CASE WHEN SEX = 'M' AND Admission = '-' THEN ID ELSE NULL END)
      FROM Patient
    )
    THEN 'More in-patients'
    WHEN (
      SELECT
        COUNT(CASE WHEN SEX = 'M' AND Admission = '+' THEN ID ELSE NULL END)
      FROM Patient
    ) < (
      SELECT
        COUNT(CASE WHEN SEX = 'M' AND Admission = '-' THEN ID ELSE NULL END)
      FROM Patient
    )
    THEN 'More out-patients'
    ELSE 'Equal number of in-patients and out-patients'
  END AS comparison_result,
  CAST(ABS(
    (
      SELECT
        COUNT(CASE WHEN SEX = 'M' AND Admission = '+' THEN ID ELSE NULL END)
      FROM Patient
    ) - (
      SELECT
        COUNT(CASE WHEN SEX = 'M' AND Admission = '-' THEN ID ELSE NULL END)
      FROM Patient
    )
  ) AS REAL) * 100 / (
    SELECT
      COUNT(CASE WHEN SEX = 'M' AND Admission = '-' THEN ID ELSE NULL END)
    FROM Patient
  ) AS percentage_deviation;
=====================
Question: What is the percentage of female patient were born after 1930?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": "drop_all",
  "Patient": [
    "ID",
    "Birthday",
    "SEX",
    "Description",
    "First Date",
    "Diagnosis"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', Birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE SEX = 'F'
=====================
Question: What is the ratio of outpatient to inpatient followed up treatment among all the 'SLE' diagnosed patient?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": "drop_all",
  "Patient": [
    "ID",
    "Diagnosis",
    "Admission",
    "SEX",
    "Birthday",
    "Description"
  ],
  "Examination": [
    "ID",
    "Examination Date",
    "Thrombosis",
    "Symptoms",
    "LAC",
    "RVVT"
  ]
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE Diagnosis = 'SLE'
=====================
Question: What is the disease patient '30609' diagnosed with. List all the date of laboratory tests done for this patient.
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "Date",
    "GPT",
    "GOT",
    "LDH",
    "ALP"
  ],
  "Patient": [
    "ID",
    "Diagnosis",
    "Birthday",
    "First Date",
    "Description",
    "SEX"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.Diagnosis, T2.Date FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 30609
=====================
Question: List the patient ID, sex and birthday of patient with LDH beyond normal range.
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "LDH",
    "Date",
    "ALP",
    "TP",
    "GPT"
  ],
  "Patient": [
    "ID",
    "SEX",
    "Birthday",
    "Description",
    "First Date",
    "Diagnosis"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 500
=====================
Question: State the ID and age of patient with positive degree of coagulation.
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": "drop_all",
  "Patient": [
    "ID",
    "Birthday",
    "SEX",
    "Description",
    "First Date",
    "Diagnosis"
  ],
  "Examination": [
    "RVVT",
    "ID",
    "Examination Date",
    "aCL IgG",
    "aCL IgM",
    "ANA"
  ]
}
```
Final SQL (attempt 1): SELECT
  p.ID,
  CAST(SUBSTR(strftime('%Y', 'now'), 1, 4) AS INTEGER) - CAST(SUBSTR(strftime('%Y', p.Birthday), 1, 4) AS INTEGER)
FROM Patient AS p
JOIN Examination AS e
  ON p.ID = e.ID
WHERE
  e.RVVT = '+';
=====================
Question: For patients with severe degree of thrombosis, list their ID, sex and disease the patient is diagnosed with.
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": "drop_all",
  "Patient": [
    "ID",
    "SEX",
    "Diagnosis",
    "Birthday",
    "Description",
    "First Date"
  ],
  "Examination": [
    "Thrombosis",
    "ID",
    "Examination Date",
    "aCL IgG",
    "aCL IgM",
    "ANA"
  ]
}
```
Final SQL (attempt 1): SELECT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2
=====================
Question: How many female patients who came at the hospital in 1997 was immediately followed at the outpatient clinic?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": "drop_all",
  "Patient": [
    "ID",
    "SEX",
    "Description",
    "First Date",
    "Birthday",
    "Admission"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(*)
FROM Patient
WHERE SEX = 'F' AND STRFTIME('%Y', Description) = '1997' AND Admission = '-'
=====================
Question: How many of the patients with the most serious thrombosis cases examined in 1997 are women?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "Date",
    "TAT",
    "TAT2",
    "GOT",
    "GPT"
  ],
  "Patient": [
    "ID",
    "SEX",
    "Birthday",
    "Description",
    "First Date",
    "Diagnosis"
  ],
  "Examination": [
    "Thrombosis",
    "Examination Date",
    "ID",
    "aCL IgG",
    "aCL IgM",
    "ANA"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.ID)
FROM Patient AS T1
INNER JOIN
Examination AS T2
ON T1.ID = T2.ID
WHERE
T2.Thrombosis = 1 AND STRFTIME('%Y', T2."Examination Date") = '1997' AND T1.SEX = 'F';
=====================
Question: What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis.
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": "drop_all",
  "Patient": [
    "ID",
    "Birthday",
    "SEX",
    "Description",
    "First Date",
    "Diagnosis"
  ],
  "Examination": [
    "ID",
    "Examination Date",
    "Symptoms",
    "Diagnosis",
    "Thrombosis",
    "aCL IgG"
  ]
}
```
Final SQL (attempt 1): SELECT T1.Symptoms, T1.Diagnosis
FROM Examination AS T1
JOIN Patient AS T2 ON T1.ID = T2.ID
WHERE T2.ID = (SELECT ID FROM Patient ORDER BY Birthday DESC LIMIT 1)
  AND T1.Symptoms IS NOT NULL;
=====================
Question: The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "Date",
    "FG",
    "PT",
    "PLT",
    "HCT"
  ],
  "Patient": [
    "ID",
    "Birthday",
    "First Date",
    "Diagnosis",
    "SEX",
    "Description"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T2.Date,
  CAST(SUBSTR(T1."First Date", 1, 4) AS INTEGER) - CAST(SUBSTR(T1.Birthday, 1, 4) AS INTEGER)
FROM Patient AS T1
INNER JOIN Laboratory AS T2
  ON T1.ID = T2.ID
WHERE
  T1.Diagnosis = 'SJS'
ORDER BY
  T1.Birthday
LIMIT 1;
=====================
Question: What is the ratio of male to female patients among all those with abnormal uric acid counts?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "UA",
    "ID",
    "Date",
    "ALB",
    "TP",
    "UN"
  ],
  "Patient": [
    "SEX",
    "ID",
    "Birthday",
    "Description",
    "First Date",
    "Diagnosis"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T1.SEX = 'M' AND T2.UA <= 8.0 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.SEX = 'F' AND T2.UA <= 6.5 THEN 1 ELSE 0 END)
FROM Patient AS T1
INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID
WHERE (T1.SEX = 'M' AND T2.UA <= 8.0) OR (T1.SEX = 'F' AND T2.UA <= 6.5);
=====================
Question: How many underage patients were examined during the course of the three-year period from 1990 to 1993?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": "drop_all",
  "Patient": [
    "ID",
    "Birthday",
    "SEX",
    "Description",
    "First Date",
    "Diagnosis"
  ],
  "Examination": [
    "Examination Date",
    "ID",
    "Thrombosis",
    "aCL IgG",
    "aCL IgM",
    "ANA"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE CAST(SUBSTR(T1.Birthday, 1, 4) AS INTEGER) + 18 > 1990+18 AND STRFTIME('%Y', T2."Examination Date") BETWEEN '1990' AND '1993'
=====================
Question: How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "HGB",
    "ID",
    "Date",
    "GPT",
    "GOT",
    "ALB"
  ],
  "Patient": [
    "Birthday",
    "ID",
    "SEX",
    "Diagnosis",
    "Description",
    "First Date"
  ],
  "Examination": [
    "Examination Date",
    "ID",
    "aCL IgG",
    "aCL IgM",
    "ANA",
    "ANA Pattern"
  ]
}
```
Final SQL (attempt 1): SELECT
  CAST(STRFTIME('%Y', T2.Date) AS INTEGER) - CAST(STRFTIME('%Y', T1.Birthday) AS INTEGER),
  T1.Diagnosis
FROM Patient AS T1
JOIN Laboratory AS T2
  ON T1.ID = T2.ID
WHERE T2.HGB = (SELECT MAX(HGB) FROM Laboratory)
LIMIT 1;
=====================
Question: For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": "drop_all",
  "Patient": [
    "ID",
    "Diagnosis",
    "Description",
    "SEX",
    "Birthday",
    "First Date"
  ],
  "Examination": [
    "ID",
    "Examination Date",
    "aCL IgM",
    "aCL IgG",
    "aCL IgA",
    "ANA"
  ]
}
```
Final SQL (attempt 1): SELECT
  T1."aCL IgM"
FROM Examination AS T1
INNER JOIN Patient AS T2
  ON T1.ID = T2.ID
WHERE
  T2.Diagnosis = 'SLE' AND T2.Description = '1994-02-19' AND T1."Examination Date" = '1993-11-12';
=====================
Question: For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "Date",
    "T-CHO",
    "GPT",
    "GOT",
    "LDH"
  ],
  "Patient": [
    "ID",
    "Birthday",
    "SEX",
    "First Date",
    "Description",
    "Diagnosis"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST((SUM(CASE WHEN T2.Birthday = '1959-02-18' AND T1.Date LIKE '1981-11%' THEN T1.`T-CHO` ELSE 0 END) - SUM(CASE WHEN T2.Birthday = '1959-02-18' AND T1.Date LIKE '1981-12%' THEN T1.`T-CHO` ELSE 0 END)) AS REAL) / SUM(CASE WHEN T2.Birthday = '1959-02-18' AND T1.Date LIKE '1981-11%' THEN T1.`T-CHO` ELSE 0 END) FROM Laboratory AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Birthday = '1959-02-18' AND (T1.Date LIKE '1981-11%' OR T1.Date LIKE '1981-12%');
=====================
Question: How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID.
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "ALB",
    "GPT",
    "Date",
    "TAT2",
    "TAT"
  ],
  "Patient": [
    "ID",
    "Description",
    "SEX",
    "Birthday",
    "First Date",
    "Diagnosis"
  ],
  "Examination": [
    "ID",
    "Examination Date",
    "aCL IgG",
    "aCL IgM",
    "ANA",
    "ANA Pattern"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE GPT > 30 AND ALB < 4 AND Date BETWEEN '1987-07-06' AND '1996-01-31'
=====================
Question: What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "Date",
    "GOT",
    "GPT",
    "LDH",
    "ALP"
  ],
  "Patient": [
    "ID",
    "SEX",
    "Birthday",
    "Description",
    "First Date",
    "Diagnosis"
  ],
  "Examination": [
    "Thrombosis",
    "ANA Pattern",
    "aCL IgM",
    "ID",
    "Examination Date",
    "aCL IgG"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Thrombosis = 2 AND T1."ANA Pattern" = 'S' AND T1."aCL IgM" > (SELECT AVG("aCL IgM") * 1.2 FROM Examination)
=====================
Question: List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range.
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "Date",
    "T-BIL",
    "ALB",
    "ALP",
    "APTT"
  ],
  "Patient": [
    "ID",
    "Admission",
    "SEX",
    "Birthday",
    "Description",
    "First Date"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.Date LIKE '9110%' AND T2."T-BIL" < 2.0
=====================
Question: What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "ALB",
    "PLT",
    "Date",
    "GOT",
    "GPT"
  ],
  "Patient": [
    "ID",
    "SEX",
    "Diagnosis",
    "Birthday",
    "Description",
    "First Date"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT AVG(T1.ALB) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.SEX = 'F' AND T1.PLT > 400 AND T2.Diagnosis = 'SLE'
=====================
Question: What percentage of patients who were born in 1980 and were diagnosed with RA are women?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": "drop_all",
  "Patient": [
    "ID",
    "SEX",
    "Birthday",
    "Diagnosis",
    "Description",
    "First Date"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) 
FROM Patient 
WHERE strftime('%Y', Birthday) = '1980' 
AND Diagnosis = 'RA';
=====================
Question: Was the patient with the number 57266's uric acid within a normal range?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "UA",
    "SEX",
    "Date",
    "ALB",
    "TP"
  ],
  "Patient": [
    "ID",
    "SEX",
    "Birthday",
    "Description",
    "First Date",
    "Diagnosis"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  CASE
    WHEN T1.SEX = 'M' AND T2.UA > 8.0
    THEN 'Yes'
    WHEN T1.SEX = 'F' AND T2.UA > 6.5
    THEN 'Yes'
    ELSE 'No'
  END
FROM Patient AS T1
INNER JOIN Laboratory AS T2
  ON T1.ID = T2.ID
WHERE
  T1.ID = 57266;
=====================
Question: Provide IDs for male patients with ALT glutamic pylvic transaminase (GPT) that have history of ALT glutamic pylvic transaminase (GPT) exceed the normal range.
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "GPT",
    "Date",
    "TAT",
    "TAT2",
    "GOT"
  ],
  "Patient": [
    "ID",
    "SEX",
    "Birthday",
    "Description",
    "First Date",
    "Admission"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GPT >= 60
=====================
Question: Please provide the diagnosis of patients with ALT glutamic pylvic transaminase beyond the normal range by ascending order of their date of birth.
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "GPT",
    "Date",
    "ALB",
    "ALP",
    "APTT"
  ],
  "Patient": [
    "ID",
    "Birthday",
    "Diagnosis",
    "SEX",
    "Description",
    "First Date"
  ],
  "Examination": [
    "ID",
    "Examination Date",
    "aCL IgG",
    "aCL IgM",
    "ANA",
    "ANA Pattern"
  ]
}
```
Final SQL (attempt 1): SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT > 60 ORDER BY T1.Birthday ASC
=====================
Question: Provide all ID, sex and birthday of patients whose urea nitrogen (UN) just within the borderline of passing?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "UN",
    "Date",
    "GOT",
    "GPT",
    "LDH"
  ],
  "Patient": [
    "ID",
    "SEX",
    "Birthday",
    "Description",
    "First Date",
    "Admission"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN = 29
=====================
Question: List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range.
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "T-BIL",
    "Date",
    "ALB",
    "TP",
    "UA"
  ],
  "Patient": [
    "ID",
    "SEX",
    "Birthday",
    "Description",
    "First Date",
    "Admission"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 2): SELECT
  T1.SEX,
  GROUP_CONCAT(DISTINCT T1.ID)
FROM Patient AS T1
INNER JOIN Laboratory AS T2
  ON T1.ID = T2.ID
WHERE
  T2."T-BIL" >= 2.0
GROUP BY
  T1.SEX;
=====================
Question: What is the average age of the male patient with high cholesterol?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "T-CHO",
    "ID",
    "Date",
    "GOT",
    "GPT",
    "LDH"
  ],
  "Patient": [
    "Birthday",
    "SEX",
    "ID",
    "Description",
    "First Date",
    "Diagnosis"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN strftime('%Y', 'now') - strftime('%Y', T2.Birthday) IS NOT NULL THEN strftime('%Y', 'now') - strftime('%Y', T2.Birthday) ELSE 0 END) AS REAL) / COUNT(T1.ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Sex = 'M' AND T1.`T-CHO` >= 250
=====================
Question: For all patients with triglyceride (TG) level beyond the normal range, how many are age more than 50 years?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "TG",
    "Date",
    "GOT",
    "GPT",
    "LDH"
  ],
  "Patient": [
    "ID",
    "Birthday",
    "SEX",
    "Description",
    "First Date",
    "Admission"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.ID)
FROM Patient AS T1
INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID
WHERE T2.TG >= 200 AND CAST(SUBSTR(DATE('now'), 1, 4) AS INTEGER) - CAST(SUBSTR(T1.Birthday, 1, 4) AS INTEGER) > 50;
=====================
Question: For patient born between 1936-1956, how many male patients have creatinine phosphokinase beyond the normal range?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "CPK",
    "ID",
    "Date",
    "GPT",
    "GOT",
    "LDH"
  ],
  "Patient": [
    "Birthday",
    "SEX",
    "ID",
    "Description",
    "First Date",
    "Admission"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.ID) 
FROM Patient AS T1 
INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID 
WHERE T1.SEX = 'M' 
AND STRFTIME('%Y', T1.Birthday) BETWEEN '1936' AND '1956' 
AND T2.CPK >= 250;
=====================
Question: Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range.
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "GLU",
    "T-CHO",
    "Date",
    "GPT",
    "GOT"
  ],
  "Patient": [
    "ID",
    "Birthday",
    "SEX",
    "Description",
    "First Date",
    "Admission"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.ID,
  T1.SEX,
  CAST(SUBSTR(DATE('now'), 1, 4) AS INTEGER) - CAST(SUBSTR(T1.Birthday, 1, 4) AS INTEGER)
FROM Patient AS T1
INNER JOIN Laboratory AS T2
  ON T1.ID = T2.ID
WHERE
  T2.GLU >= 180 AND T2."T-CHO" < 250
GROUP BY
  T1.ID,
  T1.SEX,
  T1.Birthday;
=====================
Question: What are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age.
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "RBC",
    "Date",
    "WBC",
    "HGB",
    "HCT"
  ],
  "Patient": [
    "ID",
    "Birthday",
    "Diagnosis",
    "SEX",
    "Description",
    "First Date"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.Diagnosis,
  T1.ID,
  CAST(SUBSTR(DATE('now'), 1, 4) AS INTEGER) - CAST(SUBSTR(T1.Birthday, 1, 4) AS INTEGER) AS Age
FROM Patient AS T1
INNER JOIN Laboratory AS T2
  ON T1.ID = T2.ID
WHERE
  T2.RBC < 3.5;
=====================
Question: Among the patients who were diagnosed with SLE, who is the oldest with normal hemoglobin level. Provide the ID and sex.
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "HGB",
    "Date",
    "WBC",
    "RBC",
    "HCT"
  ],
  "Patient": [
    "ID",
    "SEX",
    "Birthday",
    "Diagnosis",
    "Description",
    "First Date"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.ID, T1.SEX
FROM Patient AS T1
INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID
WHERE T1.Diagnosis = 'SLE' AND T2.HGB > 10 AND T2.HGB < 17
ORDER BY T1.Birthday ASC
LIMIT 1;
=====================
Question: Name the ID and age of patient with two or more laboratory examinations which show their hematoclit level exceeded the normal range.
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "HCT",
    "Date",
    "RBC",
    "HGB",
    "WBC"
  ],
  "Patient": [
    "ID",
    "Birthday",
    "SEX",
    "Description",
    "First Date",
    "Diagnosis"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.ID, CAST(SUBSTR(DATE('now'), 1, 4) AS INTEGER) - CAST(SUBSTR(T1.Birthday, 1, 4) AS INTEGER) AS age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HCT >= 52 GROUP BY T1.ID HAVING COUNT(T1.ID) >= 2
=====================
Question: For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "PLT",
    "ID",
    "Date",
    "WBC",
    "RBC",
    "HGB"
  ],
  "Patient": [
    "ID",
    "SEX",
    "Birthday",
    "Description",
    "First Date",
    "Admission"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  SUM(CASE WHEN PLT < 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN PLT > 400 THEN 1 ELSE 0 END)
FROM Laboratory;
=====================
Question: For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level.
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "PLT",
    "Date",
    "ID",
    "GOT",
    "GPT",
    "LDH"
  ],
  "Patient": [
    "Birthday",
    "ID",
    "SEX",
    "Description",
    "First Date",
    "Admission"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.ID
FROM Patient AS T1
INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID
WHERE STRFTIME('%Y', 'now') - STRFTIME('%Y', T1.Birthday) < 50
AND STRFTIME('%Y', T2.Date) = '1984'
AND T2.PLT BETWEEN 100 AND 400;
=====================
Question: For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "PT",
    "ID",
    "Date",
    "GPT",
    "GOT",
    "ALB"
  ],
  "Patient": [
    "Birthday",
    "SEX",
    "ID",
    "Description",
    "First Date",
    "Admission"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T1.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (STRFTIME('%Y', 'now') - STRFTIME('%Y', T1.Birthday)) > 55 AND T2.PT >= 14
=====================
Question: Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "FG",
    "WBC",
    "Date",
    "GPT",
    "GOT"
  ],
  "Patient": [
    "ID",
    "SEX",
    "First Date",
    "Birthday",
    "Description",
    "Diagnosis"
  ],
  "Examination": [
    "ID",
    "Examination Date",
    "aCL IgG",
    "aCL IgM",
    "ANA",
    "ANA Pattern"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.ID)
FROM Patient AS T1
INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID
WHERE T1.SEX = 'M'
  AND T2.WBC > 3.5
  AND T2.WBC < 9.0
  AND (T2.FG <= 150 OR T2.FG >= 450);
=====================
Question: How many patients with an Ig G higher than normal?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "IGG",
    "ID",
    "Date",
    "GOT",
    "GPT",
    "LDH"
  ],
  "Patient": [
    "ID",
    "SEX",
    "Birthday",
    "Description",
    "First Date",
    "Admission"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE IGG >= 2000
=====================
Question: Among the patients with a normal Ig G level, how many of them have symptoms?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "IGG",
    "ID",
    "Date",
    "GOT",
    "GPT",
    "LDH"
  ],
  "Patient": [
    "ID",
    "SEX",
    "Birthday",
    "Description",
    "First Date",
    "Admission"
  ],
  "Examination": [
    "Symptoms",
    "ID",
    "Examination Date",
    "aCL IgG",
    "aCL IgM",
    "ANA"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.ID)
FROM Examination AS T1
INNER JOIN
Laboratory AS T2 ON T1.ID = T2.ID
WHERE
T2.IGG > 900 AND T2.IGG < 2000 AND T1.Symptoms IS NOT NULL;
=====================
Question: How many patients with a normal Ig A level came to the hospital after 1990/1/1?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "IGA",
    "ID",
    "Date",
    "GOT",
    "GPT",
    "LDH"
  ],
  "Patient": [
    "First Date",
    "ID",
    "SEX",
    "Birthday",
    "Description",
    "Admission"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.ID)
FROM Patient AS T1
INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID
WHERE STRFTIME('%Y', T1.`First Date`) >= '1990' AND T2.IGA > 80 AND T2.IGA < 500;
=====================
Question: For the patients with an abnormal Ig M level, what is the most common disease they are diagnosed with?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "IGM",
    "ID",
    "Date",
    "GPT",
    "GOT",
    "LDH",
    "keep_all"
  ],
  "Patient": [
    "Diagnosis",
    "ID",
    "Birthday",
    "SEX",
    "Description",
    "First Date",
    "keep_all"
  ],
  "Examination": [
    "ID",
    "Examination Date",
    "Diagnosis",
    "aCL IgG",
    "aCL IgM",
    "ANA",
    "keep_all"
  ]
}
```
Final SQL (attempt 1): SELECT Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGM <= 40 OR T2.IGM >= 400 GROUP BY Diagnosis ORDER BY COUNT(*) DESC LIMIT 1
=====================
Question: How many patients with a abnormal C-reactive protein don't have their data recorded?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "CRP",
    "ID",
    "Date",
    "GOT",
    "GPT",
    "LDH"
  ],
  "Patient": [
    "Description",
    "ID",
    "SEX",
    "Birthday",
    "First Date",
    "Admission"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(T1.ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.CRP = '+' AND T2.Description IS NULL
=====================
Question: Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "CRE",
    "Date",
    "GOT",
    "GPT",
    "LDH"
  ],
  "Patient": [
    "ID",
    "Birthday",
    "SEX",
    "Description",
    "First Date",
    "Admission"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND (strftime('%Y', 'now') - strftime('%Y', T1.Birthday)) < 70
=====================
Question: How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "RNP",
    "ID",
    "Date",
    "GOT",
    "GPT",
    "LDH"
  ],
  "Patient": [
    "Admission",
    "ID",
    "SEX",
    "Birthday",
    "Description",
    "First Date"
  ],
  "Examination": [
    "ID",
    "Examination Date",
    "aCL IgG",
    "aCL IgM",
    "ANA",
    "ANA Pattern"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.ID)
FROM Patient AS T1
INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID
WHERE T1.Admission = "+" AND T2.RNP IN ("-", "+-");
=====================
Question: Among the patients with normal anti-SM, how many of them does not have thrombosis?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "SM",
    "PT",
    "PLT",
    "HCT",
    "HGB"
  ],
  "Patient": [
    "ID",
    "SEX",
    "Birthday",
    "Description",
    "First Date",
    "Admission"
  ],
  "Examination": [
    "Thrombosis",
    "ID",
    "Examination Date",
    "aCL IgG",
    "aCL IgM",
    "ANA"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.ID) FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SM IN ('-', '+-') AND T2.Thrombosis = 0
=====================
Question: Among the patients who has a normal anti-scl70, how many of them are female and does not have any symptom?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "SC170",
    "ID",
    "Date",
    "GOT",
    "GPT",
    "LDH"
  ],
  "Patient": [
    "SEX",
    "ID",
    "Birthday",
    "Description",
    "First Date",
    "Diagnosis"
  ],
  "Examination": [
    "Symptoms",
    "ID",
    "Examination Date",
    "aCL IgG",
    "aCL IgM",
    "ANA"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T1.SC170 IN ('negative', '0') AND T2.SEX = 'F' AND T3.Symptoms IS NULL
=====================
Question: Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "CENTROMEA",
    "SSB",
    "Date",
    "GOT",
    "GPT"
  ],
  "Patient": [
    "ID",
    "SEX",
    "Birthday",
    "Description",
    "First Date",
    "Admission"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CENTROMEA IN ('-', '+-') AND T2.SSB IN ('-', '+-') AND T1.SEX = 'M'
=====================
Question: Among the patients who have an abnormal level of glutamic oxaloacetic transaminase, when was the youngest of them born?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "GOT",
    "Date",
    "GPT",
    "LDH",
    "ALP"
  ],
  "Patient": [
    "Birthday",
    "ID",
    "SEX",
    "Description",
    "First Date",
    "Diagnosis"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT >= 60 ORDER BY T1.Birthday DESC LIMIT 1
=====================
Question: For the patients with a normal range of creatinine phosphokinase, how many of them have a positive measure of degree of coagulation?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "CPK",
    "Date",
    "GPT",
    "GOT",
    "LDH"
  ],
  "Patient": [
    "ID",
    "Description",
    "First Date",
    "SEX",
    "Birthday",
    "Diagnosis"
  ],
  "Examination": [
    "LAC",
    "RVVT",
    "KCT",
    "ID",
    "Examination Date",
    "Thrombosis"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT L.ID)
FROM Laboratory AS L
INNER JOIN Examination AS E ON L.ID = E.ID
WHERE L.CPK < 250 AND (E.KCT = '+' OR E.RVVT = '+' OR E.LAC = '+');
=====================
Question: Give the name of the league had the most goals in the 2016 season?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": "drop_all",
  "Match": [
    "away_team_goal",
    "home_team_goal",
    "season",
    "league_id",
    "date",
    "id"
  ],
  "League": [
    "name",
    "id",
    "country_id"
  ],
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T2.name
FROM Match AS T1
JOIN League AS T2
  ON T1.league_id = T2.id
WHERE
  T1.season = '2015/2016'
GROUP BY
  T2.name
ORDER BY
  SUM(T1.home_team_goal + T1.away_team_goal) DESC
LIMIT 1;
=====================
Question: In Scotland Premier League, which away team won the most during the 2010 season?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": "drop_all",
  "Match": [
    "away_team_goal",
    "home_team_goal",
    "away_team_api_id",
    "season",
    "league_id",
    "id"
  ],
  "League": [
    "name",
    "id",
    "country_id"
  ],
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": [
    "team_long_name",
    "team_api_id",
    "id",
    "team_fifa_api_id",
    "team_short_name"
  ]
}
```
Final SQL (attempt 1): SELECT
  T1.team_long_name
FROM Team AS T1
JOIN (
  SELECT
    away_team_api_id
  FROM Match
  WHERE
    league_id = (
      SELECT
        id
      FROM League
      WHERE
        name = 'Scotland Premier League'
    )
    AND season = '2009/2010'
    AND away_team_goal > home_team_goal
  GROUP BY
    away_team_api_id
  ORDER BY
    COUNT(*) DESC
  LIMIT 1
) AS T2
  ON T1.team_api_id = T2.away_team_api_id;
=====================
Question: What are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": [
    "buildUpPlaySpeed",
    "team_api_id",
    "id",
    "date",
    "buildUpPlaySpeedClass",
    "team_fifa_api_id"
  ],
  "Player": "drop_all",
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": [
    "team_long_name",
    "team_api_id",
    "id",
    "team_fifa_api_id",
    "team_short_name"
  ]
}
```
Final SQL (attempt 1): SELECT
  buildUpPlaySpeed
FROM Team_Attributes
ORDER BY
  buildUpPlaySpeed DESC
LIMIT 4;
=====================
Question: Give the name of the league had the most matches end as draw in the 2016 season?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": "drop_all",
  "Match": [
    "season",
    "home_team_goal",
    "away_team_goal",
    "league_id",
    "id",
    "date"
  ],
  "League": [
    "name",
    "id",
    "country_id"
  ],
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T2.name
FROM Match AS T1
INNER JOIN League AS T2
  ON T1.league_id = T2.id
WHERE
  T1.season = '2015/2016' AND T1.home_team_goal = T1.away_team_goal
GROUP BY
  T2.name
ORDER BY
  COUNT(T1.id) DESC
LIMIT 1;
=====================
Question: At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "birthday",
    "id",
    "player_api_id",
    "player_name",
    "player_fifa_api_id",
    "height"
  ],
  "Match": [
    "date",
    "id",
    "country_id",
    "league_id",
    "season",
    "stage"
  ],
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "sprint_speed",
    "player_api_id",
    "date",
    "player_fifa_api_id",
    "id",
    "overall_rating"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  CAST(STRFTIME('%Y', 'now') AS INTEGER) - CAST(STRFTIME('%Y', T1.birthday) AS INTEGER)
FROM Player AS T1
INNER JOIN Player_Attributes AS T2
  ON T1.player_api_id = T2.player_api_id
WHERE
  T2.sprint_speed >= 97 AND STRFTIME('%Y', T2.date) BETWEEN '2013' AND '2015'
GROUP BY
  T1.birthday;
=====================
Question: Give the name of the league with the highest matches of all time and how many matches were played in the said league.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": "drop_all",
  "Match": [
    "league_id",
    "id",
    "season",
    "stage",
    "date",
    "match_api_id"
  ],
  "League": [
    "name",
    "id",
    "country_id"
  ],
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.name,
  COUNT(T2.league_id)
FROM League AS T1
JOIN Match AS T2
  ON T1.id = T2.league_id
GROUP BY
  T1.name
ORDER BY
  COUNT(T2.league_id) DESC
LIMIT 1;
=====================
Question: Give the team_fifa_api_id of teams with more than 50 but less than 60 build-up play speed.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": [
    "team_fifa_api_id",
    "buildUpPlaySpeed",
    "id",
    "team_api_id",
    "date",
    "buildUpPlaySpeedClass"
  ],
  "Player": "drop_all",
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": [
    "team_fifa_api_id",
    "team_api_id",
    "id",
    "team_long_name",
    "team_short_name"
  ]
}
```
Final SQL (attempt 1): SELECT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60
=====================
Question: List the long name of teams with above-average build-up play passing in 2012.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": [
    "buildUpPlayPassing",
    "date",
    "team_api_id",
    "team_fifa_api_id",
    "id",
    "buildUpPlaySpeed"
  ],
  "Team": [
    "team_long_name",
    "team_api_id",
    "team_fifa_api_id",
    "id",
    "team_short_name"
  ],
  "Player": "drop_all",
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.team_long_name FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlayPassing > (SELECT avg(buildUpPlayPassing) FROM Team_Attributes WHERE strftime('%Y', DATE) = '2012') AND strftime('%Y', T2.date) = '2012'
=====================
Question: Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "birthday",
    "id",
    "player_api_id",
    "player_fifa_api_id",
    "player_name",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "preferred_foot",
    "player_fifa_api_id",
    "player_api_id",
    "id",
    "date",
    "overall_rating"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T2.preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.player_api_id) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE STRFTIME('%Y', T1.birthday) BETWEEN '1987' AND '1992'
=====================
Question: Find the average number of long-shot done by Ahmed Samir Farag.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "player_name",
    "player_api_id",
    "player_fifa_api_id",
    "id",
    "height",
    "weight"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "long_shots",
    "player_api_id",
    "player_fifa_api_id",
    "id",
    "date",
    "overall_rating"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT AVG(T1.long_shots) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = "Ahmed Samir Farag"
=====================
Question: List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "height",
    "player_name",
    "id",
    "player_api_id",
    "player_fifa_api_id",
    "birthday"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "heading_accuracy",
    "player_fifa_api_id",
    "player_api_id",
    "date",
    "overall_rating",
    "potential"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.player_name
FROM Player AS T1
JOIN Player_Attributes AS T2
  ON T1.player_api_id = T2.player_api_id
WHERE
  T1.height > 180
GROUP BY
  T1.player_name
ORDER BY
  AVG(T2.heading_accuracy) DESC
LIMIT 10;
=====================
Question: List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": "drop_all",
  "Match": [
    "home_team_goal",
    "away_team_goal",
    "season",
    "league_id",
    "id",
    "date"
  ],
  "League": [
    "name",
    "id",
    "country_id"
  ],
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.name
FROM League AS T1
JOIN Match AS T2
  ON T1.id = T2.league_id
WHERE
  T2.season = '2009/2010'
GROUP BY
  T1.name
HAVING
  AVG(T2.home_team_goal) > AVG(T2.away_team_goal);
=====================
Question: List the football players with a birthyear of 1970 and a birthmonth of October.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "birthday",
    "player_name",
    "id",
    "player_api_id",
    "player_fifa_api_id",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT player_name FROM Player WHERE substr(birthday, 1, 4) = '1970' AND substr(birthday, 6, 2) = '10'
=====================
Question: What is the overall rating of the football player Gabriel Tamas in year 2011?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "player_name",
    "player_api_id",
    "player_fifa_api_id",
    "id",
    "weight",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "overall_rating",
    "date",
    "player_api_id",
    "player_fifa_api_id",
    "id",
    "potential"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.overall_rating
FROM Player_Attributes AS T1
INNER JOIN Player AS T2
  ON T1.player_api_id = T2.player_api_id
WHERE
  T2.player_name = 'Gabriel Tamas' AND STRFTIME('%Y', T1.date) = '2011';
=====================
Question: Calculate the average home team goal in the 2010/2011 season in the country of Poland.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": "drop_all",
  "Match": [
    "home_team_goal",
    "season",
    "country_id",
    "id",
    "date",
    "match_api_id"
  ],
  "League": [
    "country_id",
    "id",
    "name"
  ],
  "Country": [
    "name",
    "id"
  ],
  "Player_Attributes": "drop_all",
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT AVG(M.home_team_goal)
FROM Match AS M
JOIN Country AS C ON M.country_id = C.id
WHERE C.name = 'Poland' AND M.season = '2010/2011';
=====================
Question: Who has the highest average finishing rate between the highest and shortest football player?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "height",
    "id",
    "player_api_id",
    "player_name",
    "player_fifa_api_id",
    "birthday"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "finishing",
    "player_api_id",
    "id",
    "player_fifa_api_id",
    "overall_rating",
    "potential"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  CASE
    WHEN (
      SELECT
        AVG(T1.finishing)
      FROM Player_Attributes AS T1
      INNER JOIN Player AS T2
        ON T1.player_api_id = T2.player_api_id
      ORDER BY
        T2.height DESC
      LIMIT 1
    ) > (
      SELECT
        AVG(T1.finishing)
      FROM Player_Attributes AS T1
      INNER JOIN Player AS T2
        ON T1.player_api_id = T2.player_api_id
      ORDER BY
        T2.height
      LIMIT 1
    )
    THEN (
      SELECT
        T1.player_name
      FROM Player AS T1
      ORDER BY
        T1.height DESC
      LIMIT 1
    )
    ELSE (
      SELECT
        T1.player_name
      FROM Player AS T1
      ORDER BY
        T1.height
      LIMIT 1
    )
  END;
=====================
Question: From 2010 to 2015, what was the average overall rating of players who are higher than 170?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "id",
    "height",
    "player_api_id",
    "player_fifa_api_id",
    "player_name",
    "birthday"
  ],
  "Match": [
    "date",
    "id",
    "season",
    "country_id",
    "league_id",
    "match_api_id"
  ],
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "overall_rating",
    "player_api_id",
    "player_fifa_api_id",
    "date",
    "id",
    "potential"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.height > 170 AND STRFTIME('%Y', T1.date) BETWEEN '2010' AND '2015'
=====================
Question: What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye
?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "player_name",
    "player_api_id",
    "id",
    "player_fifa_api_id",
    "birthday",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "ball_control",
    "player_api_id",
    "player_fifa_api_id",
    "id",
    "date",
    "overall_rating"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT (SELECT AVG(T1.ball_control) FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = "Abdou Diallo") - (SELECT AVG(T1.ball_control) FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = "Aaron Appindangoye");
=====================
Question: Which player is older, Aaron Lennon or Abdelaziz Barrada?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "birthday",
    "player_name",
    "player_api_id",
    "player_fifa_api_id",
    "height",
    "weight"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": "drop_all"
}
```
Final SQL (attempt 2): SELECT
  CASE
    WHEN (
      SELECT
        birthday
      FROM Player
      WHERE
        player_name = 'Aaron Lennon'
    ) < (
      SELECT
        birthday
      FROM Player
      WHERE
        player_name = 'Abdelaziz Barrada'
    )
    THEN 'Aaron Lennon'
    ELSE 'Abdelaziz Barrada'
  END AS older_player;
=====================
Question: Which player is the tallest?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "height",
    "id",
    "player_api_id",
    "player_name",
    "player_fifa_api_id",
    "birthday"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT player_name FROM Player ORDER BY height DESC LIMIT 1
=====================
Question: Among the players whose preferred foot was the left foot when attacking, how many of them would remain in his position when the team attacked?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": "keep_all",
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "preferred_foot",
    "attacking_work_rate",
    "player_api_id",
    "player_fifa_api_id",
    "date",
    "id"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(*) 
FROM Player_Attributes 
WHERE preferred_foot = 'left' AND attacking_work_rate = 'low'
=====================
Question: Among the players born before the year 1986, how many of them would remain in his position and defense while the team attacked?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "birthday",
    "player_api_id",
    "id",
    "player_name",
    "player_fifa_api_id",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "defensive_work_rate",
    "player_api_id",
    "player_fifa_api_id",
    "id",
    "date",
    "overall_rating"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.player_api_id) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE strftime('%Y', T1.birthday) < '1986' AND T2.defensive_work_rate = 'high'
=====================
Question: Please list the names of the players whose volley score and dribbling score are over 70.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "player_name",
    "id",
    "player_api_id",
    "player_fifa_api_id",
    "birthday",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "dribbling",
    "volleys",
    "player_api_id",
    "player_fifa_api_id",
    "id",
    "date"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.player_name
FROM Player AS T1
INNER JOIN Player_Attributes AS T2
  ON T1.player_api_id = T2.player_api_id
WHERE
  T2.volleys > 70 AND T2.dribbling > 70
GROUP BY
  T1.player_name;
=====================
Question: How many matches were held in the Belgium Jupiler League in April, 2009?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": "drop_all",
  "Match": [
    "date",
    "league_id",
    "id",
    "season",
    "country_id",
    "stage"
  ],
  "League": [
    "name",
    "id",
    "country_id"
  ],
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(m.id)
FROM Match AS m
JOIN League AS l ON m.league_id = l.id
WHERE l.name = 'Belgium Jupiler League' AND SUBSTR(m.date, 1, 7) = '2009-04';
=====================
Question: Give the name of the league had the most matches in the 2008/2009 season?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": "drop_all",
  "Match": [
    "season",
    "league_id",
    "id",
    "country_id",
    "stage",
    "date"
  ],
  "League": [
    "name",
    "id",
    "country_id"
  ],
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T2.name
FROM Match AS T1
JOIN League AS T2
  ON T1.league_id = T2.id
WHERE
  T1.season = '2008/2009'
GROUP BY
  T2.name
ORDER BY
  COUNT(T1.id) DESC
LIMIT 1;
=====================
Question: How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "player_name",
    "id",
    "player_api_id",
    "player_fifa_api_id",
    "birthday",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "overall_rating",
    "player_api_id",
    "player_fifa_api_id",
    "id",
    "date",
    "potential"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  (
    (
      (
        SELECT
          overall_rating
        FROM Player_Attributes
        WHERE
          player_api_id = (
            SELECT
              player_api_id
            FROM Player
            WHERE
              player_name = 'Ariel Borysiuk'
          )
        ORDER BY
          date DESC
        LIMIT 1
      ) - (
        SELECT
          overall_rating
        FROM Player_Attributes
        WHERE
          player_api_id = (
            SELECT
              player_api_id
            FROM Player
            WHERE
              player_name = 'Paulin Puel'
          )
        ORDER BY
          date DESC
        LIMIT 1
      )
    ) * 100.0 / (
      SELECT
        overall_rating
      FROM Player_Attributes
      WHERE
        player_api_id = (
          SELECT
            player_api_id
          FROM Player
          WHERE
            player_name = 'Paulin Puel'
        )
      ORDER BY
        date DESC
      LIMIT 1
    )
  );
=====================
Question: Calculate the average overall rating of Pietro Marino.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "player_name",
    "id",
    "player_api_id",
    "player_fifa_api_id",
    "birthday",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "overall_rating",
    "player_api_id",
    "player_fifa_api_id",
    "date",
    "id",
    "potential"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT AVG(T2.overall_rating) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Pietro Marino'
=====================
Question: What is Ajax's highest chance creation passing score and what is it classified as?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": [
    "chanceCreationPassing",
    "chanceCreationPassingClass",
    "team_api_id",
    "team_fifa_api_id",
    "id",
    "date"
  ],
  "Player": "drop_all",
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": [
    "team_long_name",
    "team_api_id",
    "team_fifa_api_id",
    "team_short_name",
    "id"
  ]
}
```
Final SQL (attempt 1): SELECT
  T1.chanceCreationPassing,
  T1.chanceCreationPassingClass
FROM Team_Attributes AS T1
JOIN Team AS T2
  ON T1.team_api_id = T2.team_api_id
WHERE
  T2.team_long_name = 'Ajax'
ORDER BY
  T1.chanceCreationPassing DESC
LIMIT 1;
=====================
Question: For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "birthday",
    "player_name",
    "player_api_id",
    "player_fifa_api_id",
    "weight",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "date",
    "overall_rating",
    "player_api_id",
    "player_fifa_api_id",
    "id",
    "potential"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  p.player_name
FROM Player AS p
JOIN Player_Attributes AS pa
  ON p.player_api_id = pa.player_api_id
WHERE
  pa.overall_rating = 77 AND pa.date LIKE '2016-06-23%'
ORDER BY
  p.birthday
LIMIT 1;
=====================
Question: What was the overall rating for Aaron Mooy on 2016/2/4?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "player_name",
    "id",
    "player_api_id",
    "player_fifa_api_id",
    "birthday",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "overall_rating",
    "date",
    "player_api_id",
    "player_fifa_api_id",
    "id",
    "potential"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  pa.overall_rating
FROM Player AS p
JOIN Player_Attributes AS pa
  ON p.player_api_id = pa.player_api_id
WHERE
  p.player_name = 'Aaron Mooy' AND pa.date LIKE '2016-02-04%';
=====================
Question: How was Francesco Migliore's attacking work rate on 2015/5/1?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "player_name",
    "id",
    "player_api_id",
    "player_fifa_api_id",
    "birthday",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "attacking_work_rate",
    "date",
    "player_api_id",
    "player_fifa_api_id",
    "id",
    "overall_rating"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  pa.attacking_work_rate
FROM Player AS p
JOIN Player_Attributes AS pa
  ON p.player_api_id = pa.player_api_id
WHERE
  p.player_name = 'Francesco Migliore' AND pa.date LIKE '2015-05-01%'
LIMIT 1;
=====================
Question: When was the first time did Kevin Constant have his highest crossing score? Give the date.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "player_name",
    "id",
    "player_api_id",
    "player_fifa_api_id",
    "birthday",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "crossing",
    "player_api_id",
    "date",
    "id",
    "player_fifa_api_id",
    "overall_rating"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.date FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = "Kevin Constant" AND T1.crossing = ( SELECT max(T1.crossing) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = "Kevin Constant" ) ORDER BY T1.date ASC LIMIT 1
=====================
Question: Tell the build Up play passing class for "FC Lorient" on 2010/2/22.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": [
    "date",
    "buildUpPlayPassingClass",
    "buildUpPlayPassing",
    "team_api_id",
    "team_fifa_api_id",
    "id"
  ],
  "Player": "drop_all",
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": [
    "team_long_name",
    "team_api_id",
    "team_fifa_api_id",
    "team_short_name",
    "id"
  ]
}
```
Final SQL (attempt 3): SELECT
  T1.buildUpPlayPassingClass
FROM Team_Attributes AS T1
INNER JOIN Team AS T2
  ON T1.team_api_id = T2.team_api_id
WHERE
  T2.team_long_name = 'FC Lorient' AND T1.date LIKE '2010-02-22%';
=====================
Question: For the team "Hannover 96", what was its defence aggression class on 2015/9/10?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": [
    "date",
    "defenceAggressionClass",
    "defenceAggression",
    "team_api_id",
    "id",
    "team_fifa_api_id"
  ],
  "Player": "drop_all",
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": [
    "team_long_name",
    "team_api_id",
    "id",
    "team_fifa_api_id",
    "team_short_name"
  ]
}
```
Final SQL (attempt 1): SELECT
  TA.defenceAggressionClass
FROM Team AS T
JOIN Team_Attributes AS TA
  ON T.team_api_id = TA.team_api_id
WHERE
  T.team_long_name = 'Hannover 96' AND TA.date LIKE '2015-09-10%';
=====================
Question: What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "player_name",
    "player_api_id",
    "player_fifa_api_id",
    "id",
    "birthday",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "overall_rating",
    "player_api_id",
    "player_fifa_api_id",
    "date",
    "id",
    "potential"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT avg(overall_rating) FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = "Marko Arnautovic") AND substr(date, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'
=====================
Question: What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "player_name",
    "id",
    "player_api_id",
    "player_fifa_api_id",
    "birthday",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "overall_rating",
    "player_api_id",
    "player_fifa_api_id",
    "date",
    "id",
    "potential"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  CAST(
    (
      (
        SELECT
          PA.overall_rating
        FROM Player_Attributes AS PA
        JOIN Player AS P
          ON PA.player_api_id = P.player_api_id
        WHERE
          P.player_name = 'Landon Donovan' AND PA.date = '2013-07-12'
      ) - (
        SELECT
          PA.overall_rating
        FROM Player_Attributes AS PA
        JOIN Player AS P
          ON PA.player_api_id = P.player_api_id
        WHERE
          P.player_name = 'Jordan Bowery' AND PA.date = '2013-07-12'
      )
    ) AS REAL
  ) * 100 / (
    SELECT
      PA.overall_rating
    FROM Player_Attributes AS PA
    JOIN Player AS P
      ON PA.player_api_id = P.player_api_id
    WHERE
      P.player_name = 'Landon Donovan' AND PA.date = '2013-07-12'
  );
=====================
Question: List down most tallest players' name.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "height",
    "player_name",
    "weight",
    "birthday",
    "player_fifa_api_id",
    "player_api_id"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT player_name FROM Player ORDER BY height DESC LIMIT 1
=====================
Question: State the name of the most strongest player.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "player_name",
    "id",
    "player_api_id",
    "player_fifa_api_id",
    "birthday",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "overall_rating",
    "player_api_id",
    "player_fifa_api_id",
    "id",
    "date",
    "potential"
  ],
  "Team": [
    "team_long_name",
    "id",
    "team_api_id",
    "team_fifa_api_id",
    "team_short_name"
  ]
}
```
Final SQL (attempt 1): SELECT
  T1.player_name
FROM Player AS T1
INNER JOIN Player_Attributes AS T2
  ON T1.player_api_id = T2.player_api_id
WHERE
  T2.overall_rating = (
    SELECT
      MAX(overall_rating)
    FROM Player_Attributes
  );
=====================
Question: Who are the players that tend to be attacking when their mates were doing attack moves? List down their name.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "player_name",
    "id",
    "player_api_id",
    "player_fifa_api_id",
    "birthday",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "attacking_work_rate",
    "player_api_id",
    "player_fifa_api_id",
    "id",
    "date",
    "overall_rating"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 2): SELECT DISTINCT T1.player_name
FROM Player AS T1
JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id
WHERE T2.attacking_work_rate = 'high';
=====================
Question: What are the short name of team who played safe while creating chance of passing?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": [
    "chanceCreationPassingClass",
    "team_fifa_api_id",
    "team_api_id",
    "date",
    "id",
    "buildUpPlaySpeed"
  ],
  "Player": "drop_all",
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": [
    "team_short_name",
    "team_fifa_api_id",
    "team_api_id",
    "team_long_name",
    "id"
  ]
}
```
Final SQL (attempt 1): SELECT
  T1.team_short_name
FROM Team AS T1
INNER JOIN Team_Attributes AS T2
  ON T1.team_api_id = T2.team_api_id
WHERE
  T2.chanceCreationPassingClass = 'Safe';
=====================
Question: How many football players born after the 1990s have the first name "Aaron"?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "birthday",
    "player_name",
    "id",
    "player_api_id",
    "player_fifa_api_id",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(id)
FROM Player
WHERE player_name LIKE 'Aaron%' AND STRFTIME('%Y', birthday) > '1990';
=====================
Question: What is the difference between players 6 and 23's jumping scores?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "id",
    "player_api_id",
    "player_name",
    "player_fifa_api_id",
    "birthday",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "jumping",
    "player_api_id",
    "player_fifa_api_id",
    "id",
    "date",
    "overall_rating"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  (
    SELECT
      AVG(jumping)
    FROM Player_Attributes
    WHERE
      player_api_id = (
        SELECT
          player_api_id
        FROM Player
        WHERE
          id = 6
      )
  ) - (
    SELECT
      AVG(jumping)
    FROM Player_Attributes
    WHERE
      player_api_id = (
        SELECT
          player_api_id
        FROM Player
        WHERE
          id = 23
      )
  );
=====================
Question: Please provide top four football players' IDs who are among the lowest potential players and prefer to use the right foot when attacking.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "id",
    "player_api_id",
    "player_name",
    "player_fifa_api_id",
    "birthday",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "potential",
    "preferred_foot",
    "player_api_id",
    "player_fifa_api_id",
    "overall_rating",
    "date"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  player_api_id
FROM Player_Attributes
WHERE
  preferred_foot = 'right'
ORDER BY
  potential
LIMIT 4;
=====================
Question: How many players had the highest potential score for crossing that preferred to use their left foots while attacking?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "id",
    "player_api_id",
    "player_name",
    "player_fifa_api_id",
    "birthday",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "crossing",
    "potential",
    "preferred_foot",
    "player_api_id",
    "player_fifa_api_id",
    "date"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT(T1.player_api_id)) FROM Player_Attributes AS T1 INNER JOIN (SELECT MAX(crossing) AS max_crossing FROM Player_Attributes WHERE preferred_foot = 'left') AS T2 ON T1.crossing = T2.max_crossing WHERE T1.preferred_foot = 'left'
=====================
Question: What was the final score for the match on September 24, 2008, in the Belgian Jupiler League between the home team and the away team?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": "drop_all",
  "Match": [
    "date",
    "home_team_goal",
    "away_team_goal",
    "league_id",
    "id",
    "match_api_id"
  ],
  "League": [
    "name",
    "id",
    "country_id"
  ],
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  home_team_goal,
  away_team_goal
FROM Match
WHERE
  date LIKE '2008-09-24%' AND league_id = (
    SELECT
      id
    FROM League
    WHERE
      name = 'Belgium Jupiler League'
  );
=====================
Question: Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?
 db_id: european_football_2
Selector: ```json
{
  "Team": [
    "team_long_name",
    "team_api_id",
    "team_fifa_api_id",
    "id",
    "team_short_name"
  ],
  "Team_Attributes": [
    "buildUpPlaySpeedClass",
    "team_api_id",
    "team_fifa_api_id",
    "id",
    "date",
    "buildUpPlaySpeed"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player": "drop_all",
  "Player_Attributes": "drop_all"
}
```
Final SQL (attempt 2): SELECT
  TA.buildUpPlaySpeedClass
FROM Team AS T
JOIN Team_Attributes AS TA
  ON T.team_api_id = TA.team_api_id
WHERE
  T.team_long_name = 'KSV Cercle Brugge'
LIMIT 1;
=====================
Question: Please state the finishing rate and curve score of the player who has the heaviest weight.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "weight",
    "player_name",
    "player_api_id",
    "player_fifa_api_id",
    "id",
    "birthday"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "curve",
    "finishing",
    "player_api_id",
    "player_fifa_api_id",
    "date",
    "id"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT T2.finishing, T2.curve FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.weight = ( SELECT max(weight) FROM Player )
=====================
Question: Which top 4 leagues had the most games in the 2015-2016 season?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": "drop_all",
  "Match": [
    "season",
    "league_id",
    "id",
    "date",
    "country_id",
    "stage"
  ],
  "League": [
    "name",
    "id",
    "country_id"
  ],
  "Country": [
    "name",
    "id"
  ],
  "Player_Attributes": "drop_all",
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.name
FROM League AS T1
JOIN Match AS T2
  ON T1.id = T2.league_id
WHERE
  T2.season = '2015/2016'
GROUP BY
  T1.name
ORDER BY
  COUNT(T2.id) DESC
LIMIT 4;
=====================
Question: Please provide the full name of the away team that scored the most goals.
 db_id: european_football_2
Selector: ```json
{
  "Team": [
    "team_long_name",
    "team_api_id",
    "team_short_name",
    "id",
    "team_fifa_api_id"
  ],
  "Match": [
    "away_team_goal",
    "away_team_api_id",
    "id",
    "date",
    "season",
    "league_id"
  ],
  "Country": "drop_all",
  "League": "drop_all",
  "Player": "drop_all",
  "Player_Attributes": "drop_all",
  "Team_Attributes": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.team_long_name
FROM Team AS T1
JOIN Match AS T2
  ON T1.team_api_id = T2.away_team_api_id
ORDER BY
  T2.away_team_goal DESC
LIMIT 1;
=====================
Question: Please name one player whose overall strength is the greatest.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "player_name",
    "id",
    "player_api_id",
    "player_fifa_api_id",
    "birthday",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "overall_rating",
    "player_api_id",
    "player_fifa_api_id",
    "id",
    "date",
    "potential"
  ],
  "Team": "keep_all"
}
```
Final SQL (attempt 1): SELECT
  T1.player_name
FROM Player AS T1
INNER JOIN Player_Attributes AS T2
  ON T1.player_api_id = T2.player_api_id
ORDER BY
  T2.overall_rating DESC
LIMIT 1;
=====================
Question: What is the percentage of players that are under 180 cm who have an overall strength of more than 70?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "height",
    "id",
    "weight",
    "player_name",
    "player_fifa_api_id",
    "player_api_id"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "overall_rating",
    "strength",
    "player_api_id",
    "player_fifa_api_id",
    "id",
    "date"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 3): SELECT CAST(SUM(CASE WHEN T1.height < 180 AND T2.overall_rating > 70 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id
=====================
Question: Please list the reference names of the drivers who are eliminated in the first period in race number 20.
 db_id: formula_1
Selector: ```json
{
  "qualifying": [
    "raceId",
    "driverId",
    "q1",
    "qualifyId",
    "constructorId",
    "position"
  ],
  "drivers": [
    "driverRef",
    "driverId",
    "forename",
    "surname",
    "number",
    "code"
  ],
  "races": [
    "raceId",
    "year",
    "round",
    "circuitId",
    "name",
    "date"
  ],
  "status": "drop_all",
  "circuits": "drop_all",
  "driverStandings": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.driverRef FROM drivers AS T1 JOIN qualifying AS T2 ON T1.driverId  =  T2.driverId WHERE T2.raceId  =  20 ORDER BY T2.q1 DESC LIMIT 5
=====================
Question: What is the surname of the driver with the best lap time in race number 19 in the second qualifying period?
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": [
    "driverId",
    "surname",
    "forename",
    "driverRef",
    "number",
    "code"
  ],
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "year",
    "round",
    "circuitId",
    "name",
    "date"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": [
    "raceId",
    "driverId",
    "q2",
    "qualifyId",
    "constructorId",
    "number"
  ],
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T2.surname
FROM qualifying AS T1
INNER JOIN drivers AS T2
  ON T1.driverId = T2.driverId
WHERE
  T1.raceId = 19
ORDER BY
  T1.q2
LIMIT 1;
=====================
Question: Please give the name of the race held on the circuits in Germany.
 db_id: formula_1
Selector: ```json
{
  "circuits": [
    "country",
    "name",
    "circuitId",
    "circuitRef",
    "location",
    "lat"
  ],
  "races": [
    "name",
    "circuitId",
    "raceId",
    "year",
    "round",
    "date"
  ],
  "drivers": [
    "driverId",
    "driverRef",
    "number",
    "code",
    "forename",
    "surname"
  ],
  "status": "drop_all",
  "driverStandings": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  r.name
FROM races AS r
JOIN circuits AS c
  ON r.circuitId = c.circuitId
WHERE
  c.country = 'Germany';
=====================
Question: What is the coordinates location of the circuits for Australian grand prix?
 db_id: formula_1
Selector: ```json
{
  "circuits": [
    "circuitId",
    "circuitRef",
    "name",
    "location",
    "country",
    "lat",
    "lng",
    "alt",
    "url"
  ],
  "races": [
    "raceId",
    "year",
    "round",
    "circuitId",
    "name",
    "date",
    "time",
    "url"
  ],
  "status": "drop_all",
  "drivers": "drop_all",
  "driverStandings": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.lat, T1.lng FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Australian Grand Prix'
=====================
Question: Give the coordinate position for Abu Dhabi Grand Prix.
 db_id: formula_1
Selector: ```json
{
  "circuits": [
    "circuitId",
    "lat",
    "lng",
    "name",
    "location",
    "country"
  ],
  "races": [
    "raceId",
    "circuitId",
    "name",
    "year",
    "date",
    "round"
  ],
  "drivers": "drop_all",
  "driverStandings": "drop_all",
  "status": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.lat, T1.lng FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Abu Dhabi Grand Prix'
=====================
Question: What's Bruno Senna's Q1 result in the qualifying race No. 354?
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": [
    "driverId",
    "forename",
    "surname",
    "driverRef",
    "number",
    "code"
  ],
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "year",
    "round",
    "circuitId",
    "name",
    "date"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": [
    "raceId",
    "driverId",
    "q1",
    "qualifyId",
    "constructorId",
    "number"
  ],
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.q1
FROM qualifying AS T1
INNER JOIN drivers AS T2
  ON T1.driverId = T2.driverId
WHERE
  T2.forename = 'Bruno' AND T2.surname = 'Senna' AND T1.raceId = 354;
=====================
Question: What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903?
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": [
    "driverId",
    "driverRef",
    "number",
    "code",
    "forename",
    "surname"
  ],
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "year",
    "round",
    "circuitId",
    "name",
    "date"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": [
    "qualifyId",
    "raceId",
    "driverId",
    "constructorId",
    "number",
    "position",
    "q1",
    "q2",
    "q3"
  ],
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.number FROM drivers AS T1 JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 903 AND T2.q3 = "1:54.%"
=====================
Question: For the Bahrain Grand Prix in 2007, how many drivers not finished the game?
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": [
    "statusId",
    "status"
  ],
  "drivers": [
    "driverId",
    "driverRef",
    "number",
    "code",
    "forename",
    "surname"
  ],
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "name",
    "year",
    "round",
    "circuitId",
    "date"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": [
    "raceId",
    "driverId",
    "statusId",
    "resultId",
    "constructorId",
    "number"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(T1.driverId) FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = "Bahrain Grand Prix" AND T2.year = 2007 AND T1.statusId <> 1
=====================
Question: For all the drivers who finished the game in race No. 592, who is the oldest?
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": [
    "driverId",
    "dob",
    "driverRef",
    "forename",
    "surname",
    "nationality"
  ],
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "year",
    "round",
    "name",
    "date",
    "circuitId"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": [
    "raceId",
    "driverId",
    "resultId",
    "positionOrder",
    "grid",
    "laps"
  ]
}
```
Final SQL (attempt 1): SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 592 AND T2.time IS NOT NULL ORDER BY T1.dob ASC LIMIT 1
=====================
Question: Who was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website.
 db_id: formula_1
Selector: ```json
{
  "lapTimes": [
    "raceId",
    "driverId",
    "time",
    "lap",
    "position",
    "milliseconds"
  ],
  "drivers": [
    "driverId",
    "url",
    "driverRef",
    "forename",
    "surname",
    "number"
  ],
  "races": [
    "raceId",
    "year",
    "round",
    "circuitId",
    "name",
    "date"
  ],
  "circuits": "drop_all",
  "status": "drop_all",
  "driverStandings": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T2.url
FROM lapTimes AS T1
INNER JOIN drivers AS T2
  ON T1.driverId = T2.driverId
WHERE
  T1.raceId = 161 AND T1.time LIKE '1:27%';
=====================
Question: Where is Malaysian Grand Prix held? Give the location coordinates.
 db_id: formula_1
Selector: ```json
{
  "circuits": [
    "circuitId",
    "name",
    "location",
    "country",
    "lat",
    "lng"
  ],
  "status": "drop_all",
  "drivers": "drop_all",
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "circuitId",
    "name",
    "year",
    "round",
    "date"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.lat, T1.lng FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Malaysian Grand Prix'
=====================
Question: For the constructor which got the highest point in the race No. 9 , what is its introduction website?
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": "drop_all",
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "year",
    "round",
    "name",
    "circuitId",
    "url"
  ],
  "constructors": [
    "url",
    "constructorId",
    "constructorRef",
    "name",
    "nationality",
    "wins"
  ],
  "constructorResults": [
    "points",
    "raceId",
    "constructorId",
    "constructorResultsId",
    "status"
  ],
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.url FROM constructors AS T1 JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId = 9 ORDER BY T2.points DESC LIMIT 1
=====================
Question: In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": [
    "driverId",
    "code",
    "driverRef",
    "forename",
    "surname",
    "number"
  ],
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "year",
    "round",
    "circuitId",
    "name",
    "date"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": [
    "raceId",
    "driverId",
    "q3",
    "qualifyId",
    "constructorId",
    "number"
  ],
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T2.code
FROM qualifying AS T1
INNER JOIN drivers AS T2
  ON T1.driverId = T2.driverId
WHERE
  T1.raceId = 45 AND T1.q3 LIKE '1:33%';
=====================
Question: Show me the season page of year when the race No. 901 took place.
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": "drop_all",
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "url",
    "year",
    "round",
    "circuitId",
    "name"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": [
    "url",
    "year"
  ],
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T2.url
FROM races AS T1
INNER JOIN seasons AS T2
  ON T1.year = T2.year
WHERE
  T1.raceId = 901;
=====================
Question: For all the drivers who finished the game in race No. 872, who is the youngest?
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "keep_all",
  "drivers": [
    "driverId",
    "dob",
    "driverRef",
    "forename",
    "surname",
    "nationality"
  ],
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "year",
    "round",
    "circuitId",
    "name",
    "date"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": [
    "raceId",
    "driverId",
    "time",
    "resultId",
    "constructorId",
    "number"
  ]
}
```
Final SQL (attempt 1): SELECT forename, surname
FROM drivers
WHERE driverId IN (SELECT driverId FROM results WHERE raceId = 872 AND time IS NOT NULL)
ORDER BY dob DESC
LIMIT 1;
=====================
Question: For the driver who set the fastest lap speed, what is his nationality?
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": [
    "driverId",
    "nationality",
    "driverRef",
    "forename",
    "surname",
    "dob"
  ],
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "year",
    "name",
    "round",
    "date",
    "circuitId"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": [
    "fastestLapSpeed",
    "driverId",
    "raceId",
    "resultId",
    "fastestLapTime",
    "fastestLap"
  ]
}
```
Final SQL (attempt 1): SELECT
  T2.nationality
FROM results AS T1
INNER JOIN drivers AS T2
  ON T1.driverId = T2.driverId
WHERE
  T1.fastestLapSpeed IS NOT NULL
ORDER BY
  T1.fastestLapSpeed DESC
LIMIT 1;
=====================
Question: Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": [
    "driverId",
    "forename",
    "surname",
    "driverRef",
    "number",
    "code"
  ],
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "year",
    "round",
    "circuitId",
    "name",
    "date"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": [
    "fastestLapSpeed",
    "raceId",
    "driverId",
    "fastestLapTime",
    "resultId",
    "constructorId"
  ]
}
```
Final SQL (attempt 1): SELECT CAST((
  (
    SELECT
      fastestLapSpeed
    FROM results
    WHERE
      driverId = (
        SELECT
          driverId
        FROM drivers
        WHERE
          forename = 'Paul' AND surname = 'di Resta'
      ) AND raceId = 853
  ) - (
    SELECT
      fastestLapSpeed
    FROM results
    WHERE
      driverId = (
        SELECT
          driverId
        FROM drivers
        WHERE
          forename = 'Paul' AND surname = 'di Resta'
      ) AND raceId = 854
  )
) AS REAL) * 100 / (
  SELECT
    fastestLapSpeed
  FROM results
  WHERE
    driverId = (
      SELECT
        driverId
      FROM drivers
      WHERE
        forename = 'Paul' AND surname = 'di Resta'
    ) AND raceId = 853
);
=====================
Question: For the drivers who took part in the race in 1983/7/16, what's their race completion rate?
 db_id: formula_1
Selector: ```json
{
  "races": [
    "date",
    "raceId",
    "year",
    "name",
    "round",
    "circuitId"
  ],
  "results": [
    "raceId",
    "driverId",
    "statusId",
    "resultId",
    "position",
    "positionOrder"
  ],
  "drivers": [
    "driverId",
    "driverRef",
    "forename",
    "surname",
    "nationality",
    "dob"
  ],
  "status": [
    "statusId",
    "status"
  ],
  "driverStandings": "drop_all",
  "circuits": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T2.status = 'Finished' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.driverId) FROM results AS T1 JOIN status AS T2 ON T1.statusId = T2.statusId WHERE T1.raceId = (SELECT raceId FROM races WHERE DATE = '1983-07-16')
=====================
Question: List the names of all races that occurred in the earliest recorded year and month.
 db_id: formula_1
Selector: ```json
{
  "races": [
    "date",
    "raceId",
    "year",
    "name",
    "round",
    "circuitId"
  ],
  "seasons": [
    "year",
    "url"
  ],
  "circuits": [
    "circuitId",
    "circuitRef",
    "name",
    "location",
    "country",
    "lat"
  ],
  "status": "drop_all",
  "drivers": "drop_all",
  "driverStandings": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT name FROM races WHERE STRFTIME('%Y-%m', date) = (SELECT STRFTIME('%Y-%m', MIN(date)) FROM races)
=====================
Question: State the driver with the most points scored. Find his full name with that points.
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": [
    "driverId",
    "forename",
    "surname",
    "driverRef",
    "number",
    "code"
  ],
  "driverStandings": [
    "points",
    "driverId",
    "raceId",
    "driverStandingsId",
    "position",
    "positionText"
  ],
  "races": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.forename,
  T1.surname
FROM drivers AS T1
INNER JOIN driverStandings AS T2
  ON T1.driverId = T2.driverId
ORDER BY
  T2.points DESC
LIMIT 1;
=====================
Question: What is the best lap time recorded? List the driver and race with such recorded lap time.
 db_id: formula_1
Selector: ```json
{
  "lapTimes": [
    "milliseconds",
    "raceId",
    "driverId",
    "time",
    "lap",
    "position",
    "keep_all"
  ],
  "drivers": [
    "driverId",
    "forename",
    "surname",
    "driverRef",
    "number",
    "code",
    "keep_all"
  ],
  "races": [
    "raceId",
    "name",
    "year",
    "round",
    "circuitId",
    "date",
    "keep_all"
  ],
  "circuits": "drop_all",
  "status": "drop_all",
  "driverStandings": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.forename, T1.surname, T2.name FROM drivers AS T1 JOIN lapTimes AS T3 ON T1.driverId = T3.driverId JOIN races AS T2 ON T2.raceId = T3.raceId WHERE T3.milliseconds = ( SELECT min( milliseconds ) FROM lapTimes )
=====================
Question: What is the average lap time for Lewis Hamilton in the 2009 Malaysian Grand Prix?
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": [
    "driverId",
    "surname",
    "forename",
    "driverRef",
    "number",
    "code"
  ],
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "name",
    "year",
    "round",
    "circuitId",
    "date"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": [
    "milliseconds",
    "raceId",
    "driverId",
    "lap",
    "position",
    "time"
  ],
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT AVG(T1.milliseconds) FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.forename = "Lewis" AND T2.surname = "Hamilton" AND T3.year = 2009 AND T3.name = "Malaysian Grand Prix"
=====================
Question: Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010.
 db_id: formula_1
Selector: ```json
{
  "drivers": [
    "surname",
    "driverId",
    "forename",
    "driverRef",
    "nationality",
    "dob"
  ],
  "races": [
    "year",
    "raceId",
    "name",
    "circuitId",
    "date",
    "round"
  ],
  "results": [
    "driverId",
    "raceId",
    "position",
    "resultId",
    "points",
    "positionOrder"
  ],
  "driverStandings": "drop_all",
  "circuits": "drop_all",
  "status": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T1.position > 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.raceId) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.surname = 'Hamilton' AND T3.year >= 2010
=====================
Question: Name the driver with the most winning. Mention his nationality and what is his maximum point scores.
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": [
    "driverId",
    "forename",
    "surname",
    "nationality",
    "driverRef",
    "url"
  ],
  "driverStandings": [
    "driverId",
    "points",
    "wins",
    "raceId",
    "driverStandingsId",
    "position"
  ],
  "races": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "keep_all"
}
```
Final SQL (attempt 1): SELECT
  T1.forename,
  T1.surname,
  T1.nationality,
  MAX(T2.points)
FROM drivers AS T1
INNER JOIN driverStandings AS T2
  ON T1.driverId = T2.driverId
GROUP BY
  T1.driverId
ORDER BY
  SUM(T2.wins) DESC
LIMIT 1;
=====================
Question: How old is the youngest Japanese driver? What is his name?
 db_id: formula_1
Selector: ```json
{
  "drivers": [
    "dob",
    "nationality",
    "forename",
    "surname",
    "driverId",
    "driverRef"
  ],
  "races": [
    "date",
    "raceId",
    "year",
    "round",
    "circuitId",
    "name"
  ],
  "results": [
    "driverId",
    "raceId",
    "resultId",
    "constructorId",
    "number",
    "grid"
  ],
  "circuits": "drop_all",
  "status": "drop_all",
  "driverStandings": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all"
}
```
Final SQL (attempt 1): SELECT STRFTIME('%Y', 'now') - STRFTIME('%Y', dob), forename, surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1;
=====================
Question: Name the races along with its circuit name and location for f1 races hosted in September 2005.
 db_id: formula_1
Selector: ```json
{
  "circuits": [
    "circuitId",
    "name",
    "location",
    "country",
    "circuitRef",
    "lat"
  ],
  "status": "drop_all",
  "drivers": "drop_all",
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "circuitId",
    "name",
    "date",
    "year",
    "round"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.name,
  T2.name,
  T2.location
FROM races AS T1
INNER JOIN circuits AS T2
  ON T1.circuitId = T2.circuitId
WHERE
  CAST(strftime('%w', T1.date) AS INTEGER) = 9 AND T1.year = 2005;
=====================
Question: Which race was Alex Yoong in when he was in track number less than 20?
 db_id: formula_1
Selector: ```json
{
  "circuits": [
    "circuitId",
    "name",
    "circuitRef",
    "location",
    "country",
    "lat"
  ],
  "status": [
    "statusId",
    "status"
  ],
  "drivers": [
    "driverId",
    "driverRef",
    "forename",
    "surname",
    "nationality",
    "dob"
  ],
  "driverStandings": [
    "driverStandingsId",
    "raceId",
    "driverId",
    "points",
    "position",
    "positionText"
  ],
  "races": "keep_all",
  "constructors": [
    "constructorId",
    "constructorRef",
    "name",
    "nationality",
    "url",
    "wins"
  ],
  "constructorResults": [
    "constructorResultsId",
    "raceId",
    "constructorId",
    "points",
    "status"
  ],
  "lapTimes": [
    "raceId",
    "driverId",
    "lap",
    "position",
    "time",
    "milliseconds"
  ],
  "qualifying": [
    "qualifyId",
    "raceId",
    "driverId",
    "constructorId",
    "number",
    "position"
  ],
  "pitStops": "drop_all",
  "seasons": [
    "year",
    "url"
  ],
  "constructorStandings": [
    "constructorStandingsId",
    "raceId",
    "constructorId",
    "points",
    "position",
    "positionText"
  ],
  "results": [
    "resultId",
    "raceId",
    "driverId",
    "constructorId",
    "number",
    "grid"
  ]
}
```
Final SQL (attempt 1): SELECT
  T1.name
FROM races AS T1
INNER JOIN results AS T2
  ON T1.raceId = T2.raceId
INNER JOIN drivers AS T3
  ON T2.driverId = T3.driverId
WHERE
  T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 20;
=====================
Question: State the race and year of race in which Michael Schumacher had his fastest lap.
 db_id: formula_1
Selector: ```json
{
  "circuits": [
    "circuitId",
    "circuitRef",
    "name",
    "location",
    "country",
    "lat"
  ],
  "status": [
    "statusId",
    "status"
  ],
  "drivers": [
    "driverId",
    "driverRef",
    "forename",
    "surname",
    "dob",
    "nationality"
  ],
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "year",
    "circuitId",
    "name",
    "date",
    "round"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": [
    "raceId",
    "driverId",
    "lap",
    "position",
    "time",
    "milliseconds"
  ],
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": [
    "resultId",
    "raceId",
    "driverId",
    "constructorId",
    "number",
    "grid"
  ]
}
```
Final SQL (attempt 1): SELECT
  T2.name,
  T2.year
FROM lapTimes AS T1
INNER JOIN races AS T2
  ON T1.raceId = T2.raceId
INNER JOIN drivers AS T3
  ON T1.driverId = T3.driverId
WHERE
  T3.forename = 'Michael' AND T3.surname = 'Schumacher'
ORDER BY
  T1.milliseconds
LIMIT 1;
=====================
Question: Which was Lewis Hamilton first race? What was his points recorded for his first race event?
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": [
    "driverId",
    "surname",
    "forename",
    "driverRef",
    "nationality",
    "dob"
  ],
  "driverStandings": [
    "driverId",
    "raceId",
    "points",
    "wins",
    "driverStandingsId",
    "position"
  ],
  "races": [
    "raceId",
    "year",
    "name",
    "date",
    "round",
    "circuitId"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  r.year,
  ds.points
FROM drivers AS d
JOIN driverStandings AS ds
  ON d.driverId = ds.driverId
JOIN races AS r
  ON ds.raceId = r.raceId
WHERE
  d.forename = 'Lewis' AND d.surname = 'Hamilton'
ORDER BY
  r.year
LIMIT 1;
=====================
Question: Among all European Grand Prix races, what is the percentage of the races were hosted in Germany?
 db_id: formula_1
Selector: ```json
{
  "circuits": [
    "country",
    "circuitId",
    "circuitRef",
    "name",
    "location",
    "lat"
  ],
  "races": [
    "name",
    "raceId",
    "circuitId",
    "year",
    "round",
    "date"
  ],
  "status": "drop_all",
  "drivers": "drop_all",
  "driverStandings": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T2.country = "Germany" THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.raceId) FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = "European Grand Prix"
=====================
Question: What's the location coordinates of Silverstone Circuit?
 db_id: formula_1
Selector: ```json
{
  "circuits": [
    "circuitId",
    "circuitRef",
    "name",
    "location",
    "country",
    "lat",
    "lng"
  ],
  "status": "drop_all",
  "drivers": "drop_all",
  "driverStandings": "drop_all",
  "races": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT lat, lng FROM circuits WHERE name = "Silverstone Circuit"
=====================
Question: What's the reference name of Marina Bay Street Circuit?
 db_id: formula_1
Selector: ```json
{
  "circuits": [
    "circuitRef",
    "name",
    "circuitId",
    "location",
    "country",
    "lat"
  ],
  "status": "drop_all",
  "drivers": "drop_all",
  "driverStandings": "drop_all",
  "races": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'
=====================
Question: Which country is the oldest driver from?
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": [
    "dob",
    "nationality",
    "driverId",
    "driverRef",
    "number",
    "code"
  ],
  "driverStandings": "drop_all",
  "races": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT nationality FROM drivers ORDER BY dob ASC LIMIT 1
=====================
Question: What is the ratio of customers who pay in EUR against customers who pay in CZK?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "Currency",
    "CustomerID",
    "Segment"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": "drop_all",
  "transactions_1k": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) FROM customers
=====================
Question: In 2012, who had the least consumption in LAM?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "CustomerID",
    "Segment",
    "Currency"
  ],
  "gasstations": [
    "GasStationID",
    "ChainID",
    "Country",
    "Segment"
  ],
  "products": [
    "ProductID",
    "Description"
  ],
  "yearmonth": [
    "Consumption",
    "Date",
    "CustomerID"
  ],
  "transactions_1k": [
    "Date",
    "CustomerID",
    "TransactionID",
    "Time",
    "CardID",
    "GasStationID"
  ]
}
```
Final SQL (attempt 1): SELECT CustomerID FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012' ORDER BY Consumption ASC LIMIT 1
=====================
Question: What was the average monthly consumption of customers in SME for the year 2013?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "CustomerID",
    "Segment",
    "Currency"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": [
    "Consumption",
    "Date",
    "CustomerID"
  ],
  "transactions_1k": "drop_all"
}
```
Final SQL (attempt 1): SELECT AVG(T1.Consumption) / 12 FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'SME' AND SUBSTR(T1.Date, 1, 4) = '2013'
=====================
Question: What was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "Currency",
    "CustomerID",
    "Segment"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": [
    "Consumption",
    "Date",
    "CustomerID"
  ],
  "transactions_1k": "drop_all"
}
```
Final SQL (attempt 2): SELECT
  SUM(CASE WHEN T2.Currency = 'CZK' THEN T1.Consumption ELSE 0 END) - SUM(CASE WHEN T2.Currency = 'EUR' THEN T1.Consumption ELSE 0 END)
FROM yearmonth AS T1
JOIN customers AS T2
  ON T1.CustomerID = T2.CustomerID
WHERE
  SUBSTR(T1.Date, 1, 4) = '2012';
=====================
Question: Which year recorded the most consumption of gas paid in CZK?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "Currency",
    "CustomerID",
    "Segment"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": [
    "Consumption",
    "Date",
    "CustomerID"
  ],
  "transactions_1k": [
    "Date",
    "Amount",
    "CustomerID",
    "GasStationID",
    "ProductID",
    "Price"
  ]
}
```
Final SQL (attempt 1): SELECT substr(Date, 1, 4) AS year FROM yearmonth WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = "CZK") GROUP BY year ORDER BY sum(Consumption) DESC LIMIT 1
=====================
Question: What was the gas consumption peak month for SME customers in 2013?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "CustomerID",
    "Segment",
    "Currency"
  ],
  "gasstations": [
    "GasStationID",
    "ChainID",
    "Country",
    "Segment"
  ],
  "products": [
    "ProductID",
    "Description"
  ],
  "yearmonth": [
    "Consumption",
    "Date",
    "CustomerID"
  ],
  "transactions_1k": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  SUBSTR(Date, 1, 6) AS PeakMonth
FROM yearmonth
JOIN customers
  ON yearmonth.CustomerID = customers.CustomerID
WHERE
  customers.Segment = 'SME' AND SUBSTR(Date, 1, 4) = '2013'
GROUP BY
  PeakMonth
ORDER BY
  SUM(Consumption) DESC
LIMIT 1;
=====================
Question: What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "Segment",
    "CustomerID",
    "Currency"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": [
    "Consumption",
    "Date",
    "CustomerID"
  ],
  "transactions_1k": [
    "Amount",
    "CustomerID",
    "Date",
    "TransactionID",
    "GasStationID",
    "ProductID"
  ]
}
```
Final SQL (attempt 1): SELECT
  (
    SELECT
      AVG(T1.Consumption)
    FROM yearmonth AS T1
    JOIN customers AS T2
      ON T1.CustomerID = T2.CustomerID
    WHERE
      SUBSTR(T1.Date, 1, 4) = '2013' AND T2.Currency = 'CZK' AND T2.Segment = 'SME'
  ) - (
    SELECT
      AVG(T1.Consumption)
    FROM yearmonth AS T1
    JOIN customers AS T2
      ON T1.CustomerID = T2.CustomerID
    WHERE
      SUBSTR(T1.Date, 1, 4) = '2013' AND T2.Currency = 'CZK' AND T2.Segment = 'LAM'
  ),
  (
    SELECT
      AVG(T1.Consumption)
    FROM yearmonth AS T1
    JOIN customers AS T2
      ON T1.CustomerID = T2.CustomerID
    WHERE
      SUBSTR(T1.Date, 1, 4) = '2013' AND T2.Currency = 'CZK' AND T2.Segment = 'LAM'
  ) - (
    SELECT
      AVG(T1.Consumption)
    FROM yearmonth AS T1
    JOIN customers AS T2
      ON T1.CustomerID = T2.CustomerID
    WHERE
      SUBSTR(T1.Date, 1, 4) = '2013' AND T2.Currency = 'CZK' AND T2.Segment = 'KAM'
  ),
  (
    SELECT
      AVG(T1.Consumption)
    FROM yearmonth AS T1
    JOIN customers AS T2
      ON T1.CustomerID = T2.CustomerID
    WHERE
      SUBSTR(T1.Date, 1, 4) = '2013' AND T2.Currency = 'CZK' AND T2.Segment = 'KAM'
  ) - (
    SELECT
      AVG(T1.Consumption)
    FROM yearmonth AS T1
    JOIN customers AS T2
      ON T1.CustomerID = T2.CustomerID
    WHERE
      SUBSTR(T1.Date, 1, 4) = '2013' AND T2.Currency = 'CZK' AND T2.Segment = 'SME'
  );
=====================
Question: Which of the three segments—SME, LAM and KAM—has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "Segment",
    "CustomerID",
    "Currency"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": [
    "Date",
    "CustomerID",
    "Consumption"
  ],
  "transactions_1k": [
    "Date",
    "CustomerID",
    "Amount",
    "Price"
  ]
}
```
Final SQL (attempt 1): SELECT
  (
    SELECT
      c.Segment
    FROM yearmonth AS ym
    JOIN customers AS c
      ON ym.CustomerID = c.CustomerID
    WHERE
      c.Currency = 'EUR' AND substr(ym.Date, 1, 4) = '2013'
    GROUP BY
      c.Segment
    ORDER BY
      SUM(ym.Consumption) DESC
    LIMIT 1
  ) AS Biggest_Increase_Segment,
  (
    SELECT
      c.Segment
    FROM yearmonth AS ym
    JOIN customers AS c
      ON ym.CustomerID = c.CustomerID
    WHERE
      c.Currency = 'EUR' AND substr(ym.Date, 1, 4) = '2012'
    GROUP BY
      c.Segment
    ORDER BY
      SUM(ym.Consumption)
    LIMIT 1
  ) AS Lowest_Increase_Segment;
=====================
Question: How much did customer 6 consume in total between August and November 2013?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": "drop_all",
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": [
    "Consumption",
    "Date",
    "CustomerID"
  ],
  "transactions_1k": "drop_all"
}
```
Final SQL (attempt 1): SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'
=====================
Question: How many more "discount" gas stations does the Czech Republic have compared to Slovakia?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": "drop_all",
  "gasstations": [
    "Country",
    "Segment",
    "GasStationID",
    "ChainID"
  ],
  "products": "drop_all",
  "yearmonth": "drop_all",
  "transactions_1k": "drop_all"
}
```
Final SQL (attempt 1): SELECT (SELECT COUNT(*) FROM gasstations WHERE Country = "CZE" AND Segment = "Discount") - (SELECT COUNT(*) FROM gasstations WHERE Country = "SVK" AND Segment = "Discount");
=====================
Question: Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "CustomerID",
    "Segment",
    "Currency"
  ],
  "transactions_1k": [
    "CustomerID",
    "Amount",
    "Date",
    "Time",
    "TransactionID",
    "CardID"
  ],
  "gasstations": [
    "Segment",
    "GasStationID",
    "ChainID",
    "Country"
  ],
  "products": [
    "ProductID",
    "Description"
  ],
  "yearmonth": [
    "CustomerID",
    "Date",
    "Consumption"
  ]
}
```
Final SQL (attempt 1): SELECT
  CASE
    WHEN SUM(CASE WHEN T1.Currency = 'CZK' THEN 1 ELSE 0 END) > SUM(CASE WHEN T1.Currency = 'EUR' THEN 1 ELSE 0 END)
    THEN 'True'
    ELSE 'False'
  END,
  SUM(CASE WHEN T1.Currency = 'CZK' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.Currency = 'EUR' THEN 1 ELSE 0 END)
FROM Customers AS T1
WHERE
  T1.Segment = 'SME';
=====================
Question: How many percent of LAM customer consumed more than 46.73?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "Segment",
    "CustomerID",
    "Currency"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": [
    "Consumption",
    "CustomerID",
    "Date"
  ],
  "transactions_1k": [
    "CustomerID",
    "Date",
    "TransactionID",
    "Time",
    "CardID",
    "GasStationID"
  ]
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T2.Consumption > 46.73 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.CustomerID) FROM customers AS T1 JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM'
=====================
Question: In February 2012, what percentage of customers consumed more than 528.3?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "CustomerID",
    "Segment",
    "Currency"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": [
    "Consumption",
    "Date",
    "CustomerID"
  ],
  "transactions_1k": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN Consumption > 528.3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT CustomerID) FROM yearmonth WHERE substr(Date, 1, 6) = '201202'
=====================
Question: What is the highest monthly consumption in the year 2012?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": "drop_all",
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": [
    "Consumption",
    "Date",
    "CustomerID"
  ],
  "transactions_1k": "drop_all"
}
```
Final SQL (attempt 1): SELECT MAX(Consumption) FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012';
=====================
Question: Please list the product description of the products consumed in September, 2013.
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": "drop_all",
  "gasstations": "drop_all",
  "products": [
    "Description",
    "ProductID"
  ],
  "yearmonth": [
    "Date",
    "CustomerID",
    "Consumption"
  ],
  "transactions_1k": [
    "ProductID",
    "Date",
    "TransactionID",
    "CustomerID",
    "GasStationID",
    "Amount"
  ]
}
```
Final SQL (attempt 1): SELECT DISTINCT
  p.Description
FROM transactions_1k AS t
JOIN products AS p
  ON t.ProductID = p.ProductID
WHERE
  SUBSTR(t.Date, 1, 4) = '2013' AND SUBSTR(t.Date, 6, 2) = '09';
=====================
Question: Please list the countries of the gas stations with transactions taken place in June, 2013.
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": "drop_all",
  "gasstations": [
    "Country",
    "GasStationID",
    "ChainID",
    "Segment"
  ],
  "products": "drop_all",
  "yearmonth": [
    "Date",
    "CustomerID",
    "Consumption"
  ],
  "transactions_1k": [
    "Date",
    "GasStationID",
    "CustomerID",
    "TransactionID",
    "CardID",
    "ProductID"
  ]
}
```
Final SQL (attempt 1): SELECT DISTINCT T1.Country FROM gasstations AS T1 INNER JOIN transactions_1k AS T2 ON T1.GasStationID = T2.GasStationID WHERE strftime('%Y', T2.Date) = '2013' AND strftime('%m', T2.Date) = '06'
=====================
Question: Among the customers who paid in euro, how many of them have a monthly consumption of over 1000?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "CustomerID",
    "Currency",
    "Segment"
  ],
  "yearmonth": [
    "CustomerID",
    "Consumption",
    "Date"
  ],
  "transactions_1k": [
    "CustomerID",
    "Date",
    "TransactionID",
    "Time",
    "CardID",
    "GasStationID"
  ],
  "gasstations": "drop_all",
  "products": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = "EUR" GROUP BY T1.CustomerID HAVING SUM(T2.Consumption) > 1000
=====================
Question: Please list the product descriptions of the transactions taken place in the gas stations in the Czech Republic.
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": "drop_all",
  "gasstations": [
    "Country",
    "GasStationID",
    "ChainID",
    "Segment"
  ],
  "products": [
    "Description",
    "ProductID"
  ],
  "yearmonth": "drop_all",
  "transactions_1k": [
    "ProductID",
    "GasStationID",
    "TransactionID",
    "Date",
    "Time",
    "CustomerID"
  ]
}
```
Final SQL (attempt 1): SELECT DISTINCT
  p.Description
FROM products AS p
JOIN transactions_1k AS t1 ON p.ProductID = t1.ProductID
JOIN gasstations AS gs ON t1.GasStationID = gs.GasStationID
WHERE
  gs.Country = 'CZE';
=====================
Question: Please list the disparate time of the transactions taken place in the gas stations from chain no. 11.
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": "drop_all",
  "gasstations": [
    "ChainID",
    "GasStationID",
    "Country",
    "Segment"
  ],
  "products": "drop_all",
  "yearmonth": "drop_all",
  "transactions_1k": [
    "Time",
    "GasStationID",
    "CustomerID",
    "TransactionID",
    "Date",
    "CardID"
  ]
}
```
Final SQL (attempt 1): SELECT DISTINCT T1.Time FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11
=====================
Question: Among the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": "drop_all",
  "gasstations": [
    "Country",
    "GasStationID",
    "ChainID",
    "Segment"
  ],
  "products": "drop_all",
  "yearmonth": "drop_all",
  "transactions_1k": [
    "Date",
    "GasStationID",
    "CustomerID",
    "TransactionID",
    "CardID",
    "ProductID"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(T.TransactionID)
FROM transactions_1k AS T
INNER JOIN gasstations AS G ON T.GasStationID = G.GasStationID
WHERE G.Country = 'CZE' AND T.Date > '2012-01-01'
=====================
Question: What kind of currency did the customer paid at 16:25:00 in 2012/8/24?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "CustomerID",
    "Currency",
    "Segment"
  ],
  "gasstations": [
    "GasStationID",
    "ChainID",
    "Country",
    "Segment"
  ],
  "products": [
    "ProductID",
    "Description"
  ],
  "yearmonth": "drop_all",
  "transactions_1k": [
    "Date",
    "Time",
    "CustomerID",
    "GasStationID",
    "ProductID",
    "Amount"
  ]
}
```
Final SQL (attempt 1): SELECT
  T2.Currency
FROM transactions_1k AS T1
INNER JOIN customers AS T2
  ON T1.CustomerID = T2.CustomerID
WHERE
  T1.Date = '2012-08-24' AND T1.Time = '16:25:00';
=====================
Question: What segment did the customer have at 2012/8/23 21:20:00?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "CustomerID",
    "Segment",
    "Currency"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": [
    "Date",
    "CustomerID",
    "Consumption"
  ],
  "transactions_1k": [
    "Date",
    "Time",
    "CustomerID",
    "TransactionID",
    "CardID",
    "GasStationID"
  ]
}
```
Final SQL (attempt 1): SELECT T1.Segment FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-23' AND T2.Time = '21:20:00'
=====================
Question: For all the transactions happened during 8:00-9:00 in 2012/8/26, how many happened in CZE?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": "drop_all",
  "gasstations": [
    "Country",
    "GasStationID",
    "ChainID",
    "Segment"
  ],
  "products": "drop_all",
  "yearmonth": "drop_all",
  "transactions_1k": [
    "Time",
    "Date",
    "GasStationID",
    "CustomerID",
    "TransactionID",
    "CardID"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(T.TransactionID)
FROM transactions_1k AS T
JOIN gasstations AS G ON T.GasStationID = G.GasStationID
WHERE G.Country = 'CZE'
  AND T.Date = '2012-08-26'
  AND T.Time BETWEEN '08:00:00' AND '09:00:00';
=====================
Question: What's the nationality of the customer who spent 548.4 in 2012/8/24?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "CustomerID",
    "Segment",
    "Currency"
  ],
  "gasstations": [
    "GasStationID",
    "ChainID",
    "Country",
    "Segment"
  ],
  "products": "drop_all",
  "yearmonth": "keep_all",
  "transactions_1k": [
    "Date",
    "CustomerID",
    "Amount",
    "TransactionID",
    "Time",
    "CardID"
  ]
}
```
Final SQL (attempt 1): SELECT
  T1.Country
FROM gasstations AS T1
INNER JOIN transactions_1k AS T2
  ON T1.GasStationID = T2.GasStationID
WHERE
  T2.Date = '2012-08-24' AND T2.Price = 548.4;
=====================
Question: What is the percentage of the customers who used EUR in 2012/8/25?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "Currency",
    "CustomerID",
    "Segment"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": "drop_all",
  "transactions_1k": [
    "Date",
    "CustomerID",
    "Amount",
    "Price",
    "TransactionID",
    "Time"
  ]
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T1.Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.CustomerID) FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-25'
=====================
Question: For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "CustomerID",
    "Segment",
    "Currency"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": [
    "Consumption",
    "Date",
    "CustomerID"
  ],
  "transactions_1k": [
    "Price",
    "Amount",
    "ProductID",
    "GasStationID",
    "CardID",
    "CustomerID"
  ]
}
```
Final SQL (attempt 1): SELECT
  CAST(SUM(CASE WHEN STRFTIME('%Y', T1.Date) = '2012' THEN T1.Consumption ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.Date) = '2013' THEN T1.Consumption ELSE 0 END) AS REAL) * 1.0 / SUM(CASE WHEN STRFTIME('%Y', T1.Date) = '2012' THEN T1.Consumption ELSE 0 END)
FROM yearmonth AS T1
JOIN transactions_1k AS T2
  ON T1.CustomerID = T2.CustomerID
WHERE
  T2.Price = 634.8 AND T2.Date = '2012-08-25';
=====================
Question: What is the percentage of "premium" against the overall segment in Country = "SVK"?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "Segment",
    "CustomerID",
    "Currency"
  ],
  "gasstations": [
    "Country",
    "Segment",
    "GasStationID",
    "ChainID"
  ],
  "transactions_1k": "drop_all",
  "products": "drop_all",
  "yearmonth": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN Segment = 'premium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM gasstations WHERE Country = 'SVK';
=====================
Question: What is the amount spent by customer "38508" at the gas stations? How much had the customer spent in January 2012?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "CustomerID",
    "Segment",
    "Currency"
  ],
  "gasstations": [
    "GasStationID",
    "ChainID",
    "Country",
    "Segment"
  ],
  "products": [
    "ProductID",
    "Description"
  ],
  "yearmonth": [
    "CustomerID",
    "Date",
    "Consumption"
  ],
  "transactions_1k": [
    "Amount",
    "CustomerID",
    "GasStationID",
    "Date",
    "TransactionID",
    "Time"
  ]
}
```
Final SQL (attempt 2): SELECT SUM(CASE WHEN T1.GasStationID IS NOT NULL THEN T1.Amount ELSE 0 END) AS total_amount_at_gas_stations,
       SUM(CASE WHEN STRFTIME('%Y%m', T1.Date) = '201201' THEN T1.Amount ELSE 0 END) AS total_amount_jan_2012
FROM transactions_1k AS T1
WHERE T1.CustomerID = 38508;
=====================
Question: Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "CustomerID",
    "Currency",
    "Segment"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": "drop_all",
  "transactions_1k": [
    "CustomerID",
    "Price",
    "Amount",
    "Date",
    "Time",
    "TransactionID"
  ]
}
```
Final SQL (attempt 1): SELECT
  T1.Currency,
  SUM(T2.Price) / SUM(T2.Amount) AS avg_price
FROM customers AS T1
JOIN transactions_1k AS T2
  ON T1.CustomerID = T2.CustomerID
WHERE
  T2.CustomerID = (
    SELECT
      CustomerID
    FROM transactions_1k
    GROUP BY
      CustomerID
    ORDER BY
      SUM(Price) DESC
    LIMIT 1
  )
GROUP BY
  T1.Currency;
=====================
Question: For all the people who paid more than 29.00 per unit of product id No.5. Give their consumption status in the August of 2012.
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "CustomerID",
    "Segment",
    "Currency"
  ],
  "gasstations": "drop_all",
  "products": [
    "ProductID",
    "Description"
  ],
  "yearmonth": [
    "CustomerID",
    "Date",
    "Consumption"
  ],
  "transactions_1k": [
    "Price",
    "Amount",
    "ProductID",
    "CustomerID",
    "Date",
    "TransactionID"
  ]
}
```
Final SQL (attempt 1): SELECT T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.ProductID = 5 AND T1.Price / T1.Amount > 29.00 AND T2.Date = '201208'
=====================
Question: What's Angela Sanders's major?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": [
    "first_name",
    "last_name",
    "member_id",
    "position",
    "t_shirt_size",
    "email"
  ],
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": [
    "major_name",
    "major_id",
    "department",
    "college"
  ]
}
```
Final SQL (attempt 1): SELECT T2.major_name FROM Member AS T1 INNER JOIN Major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = "Angela" AND T1.last_name = "Sanders"
=====================
Question: Among the students from the Student_Club who attended the event "Women's Soccer", how many of them want a T-shirt that's in medium size?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": [
    "t_shirt_size",
    "member_id",
    "first_name",
    "last_name",
    "email",
    "position"
  ],
  "Attendance": [
    "link_to_member",
    "link_to_event"
  ],
  "Event": [
    "event_name",
    "event_id",
    "event_date",
    "type",
    "notes",
    "location"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(T1.member_id) FROM Member AS T1 INNER JOIN Attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN Event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = "Women's Soccer" AND T1.t_shirt_size = "Medium"
=====================
Question: Among the events attended by more than 10 members of the Student_Club, how many of them are meetings?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": [
    "member_id",
    "first_name",
    "last_name",
    "email",
    "position",
    "t_shirt_size"
  ],
  "Attendance": [
    "link_to_event",
    "link_to_member"
  ],
  "Event": [
    "event_id",
    "event_name",
    "event_date",
    "type",
    "notes",
    "location"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(T1.event_id) FROM Event AS T1 INNER JOIN Attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.type = 'Meeting' GROUP BY T1.event_id HAVING COUNT(T2.link_to_member) > 10
=====================
Question: List all the names of events that had an attendance of over 20 students but were not fundraisers.
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "budget_id",
    "category",
    "spent",
    "remaining",
    "amount",
    "event_status"
  ],
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": [
    "member_id",
    "first_name",
    "last_name",
    "email",
    "position",
    "t_shirt_size"
  ],
  "Attendance": "keep_all",
  "Event": [
    "event_id",
    "event_name",
    "event_date",
    "type",
    "notes",
    "location"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.event_name
FROM Event AS T1
INNER JOIN Attendance AS T2 ON T1.event_id = T2.link_to_event
WHERE T1.type != "fundraiser"
GROUP BY T1.event_name
HAVING COUNT(T2.link_to_event) > 20;
=====================
Question: What is the amount of the funds that the Vice President received?
 db_id: student_club
Selector: ```json
{
  "Income": [
    "amount",
    "date_received",
    "source",
    "notes",
    "link_to_member",
    "income_id"
  ],
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": [
    "position",
    "first_name",
    "last_name",
    "email",
    "t_shirt_size",
    "phone"
  ],
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.amount FROM Income AS T1 INNER JOIN Member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.position = 'Vice President'
=====================
Question: List the full name of the Student_Club members that grew up in Illinois state.
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": [
    "zip_code",
    "state",
    "city",
    "county",
    "short_state",
    "type"
  ],
  "Expense": "drop_all",
  "Member": [
    "first_name",
    "last_name",
    "zip",
    "member_id",
    "email",
    "position"
  ],
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.first_name, T1.last_name FROM Member AS T1 INNER JOIN Zip_Code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = "Illinois"
=====================
Question: Was each expense in October Meeting on October 8, 2019 approved?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "budget_id",
    "link_to_event",
    "category",
    "spent",
    "remaining",
    "amount"
  ],
  "Zip_Code": "drop_all",
  "Expense": [
    "approved",
    "expense_description",
    "expense_date",
    "cost",
    "expense_id",
    "link_to_budget"
  ],
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": [
    "event_name",
    "event_date",
    "event_id",
    "type",
    "notes",
    "location"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  CASE
    WHEN COUNT(CASE WHEN T1.approved = 'TRUE' THEN 1 ELSE NULL END) = COUNT(T1.approved)
    THEN 'yes'
    ELSE 'no'
  END
FROM Expense AS T1
INNER JOIN Budget AS T2
  ON T1.link_to_budget = T2.budget_id
INNER JOIN Event AS T3
  ON T2.link_to_event = T3.event_id
WHERE
  T3.event_name = 'October Meeting' AND T3.event_date = '2019-10-08';
=====================
Question: Calculate the total average cost that Elijah Allen spent in the events on September and October.
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": [
    "cost",
    "expense_date",
    "expense_description",
    "expense_id",
    "approved",
    "link_to_member"
  ],
  "Member": [
    "first_name",
    "last_name",
    "member_id",
    "position",
    "email",
    "t_shirt_size"
  ],
  "Attendance": "keep_all",
  "Event": "drop_all",
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT AVG(T1.cost) FROM Expense AS T1 INNER JOIN Member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = "Elijah" AND T2.last_name = "Allen" AND CAST(SUBSTR(T1.expense_date, 6, 2) AS INTEGER) IN (9, 10)
=====================
Question: Calculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020.
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "spent",
    "amount",
    "category",
    "budget_id",
    "link_to_event",
    "event_status"
  ],
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": [
    "event_date",
    "event_name",
    "event_id",
    "type",
    "notes",
    "location"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  (
    SELECT
      SUM(T1.spent)
    FROM Budget AS T1
    INNER JOIN Event AS T2
      ON T1.link_to_event = T2.event_id
    WHERE
      T2.type = 'Student_Club' AND STRFTIME('%Y', T2.event_date) = '2019'
  ) - (
    SELECT
      SUM(T1.spent)
    FROM Budget AS T1
    INNER JOIN Event AS T2
      ON T1.link_to_event = T2.event_id
    WHERE
      T2.type = 'Student_Club' AND STRFTIME('%Y', T2.event_date) = '2020'
  );
=====================
Question: What was the notes of the fundraising on 2019/9/14?
 db_id: student_club
Selector: ```json
{
  "Income": [
    "notes",
    "source",
    "date_received",
    "amount",
    "income_id",
    "link_to_member"
  ],
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT notes FROM Income WHERE source = 'Fundraising' AND date_received = '2019-09-14'
=====================
Question: Tell the phone number of "Carlo Jacobs".
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": [
    "phone",
    "first_name",
    "last_name",
    "member_id",
    "email",
    "position"
  ],
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT phone FROM Member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'
=====================
Question: What is the status of the event which bought "Post Cards, Posters" on 2019/8/20?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "budget_id",
    "link_to_event",
    "category",
    "spent",
    "remaining",
    "amount"
  ],
  "Zip_Code": "drop_all",
  "Expense": [
    "expense_description",
    "expense_date",
    "link_to_budget",
    "expense_id",
    "cost",
    "approved"
  ],
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": [
    "status",
    "event_id",
    "event_name",
    "event_date",
    "type",
    "notes"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.event_status FROM Budget AS T1 JOIN Expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = "Post Cards, Posters" AND T2.expense_date = "2019-08-20"
=====================
Question: What was Brent Thomason's major?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": [
    "first_name",
    "last_name",
    "member_id",
    "link_to_major",
    "email",
    "position"
  ],
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": [
    "major_name",
    "major_id",
    "department",
    "college"
  ]
}
```
Final SQL (attempt 1): SELECT
  T1.major_name
FROM Major AS T1
INNER JOIN Member AS T2
  ON T1.major_id = T2.link_to_major
WHERE
  T2.first_name = 'Brent' AND T2.last_name = 'Thomason';
=====================
Question: For all the club members from "Business" major, how many of them wear medium size t-shirt?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": [
    "t_shirt_size",
    "member_id",
    "first_name",
    "last_name",
    "link_to_major",
    "email"
  ],
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": [
    "major_name",
    "major_id",
    "department",
    "college"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(T1.member_id) FROM Member AS T1 INNER JOIN Major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = "Business" AND T1.t_shirt_size = "Medium"
=====================
Question: Which department was the President of the club in?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": [
    "position",
    "member_id",
    "first_name",
    "last_name",
    "email",
    "link_to_major"
  ],
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": [
    "department",
    "major_id",
    "major_name",
    "college"
  ]
}
```
Final SQL (attempt 1): SELECT T2.department FROM Member AS T1 JOIN Major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'
=====================
Question: State the date Connor Hilton paid his/her dues.
 db_id: student_club
Selector: ```json
{
  "Income": [
    "date_received",
    "source",
    "amount",
    "notes",
    "link_to_member",
    "income_id"
  ],
  "Member": [
    "first_name",
    "last_name",
    "member_id",
    "email",
    "position",
    "t_shirt_size"
  ],
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.date_received
FROM Income AS T1
INNER JOIN Member AS T2
  ON T1.link_to_member = T2.member_id
WHERE
  T2.first_name = 'Connor' AND T2.last_name = 'Hilton' AND T1.source = 'Dues';
=====================
Question: How many times was the budget in Advertisement for "Yearly Kickoff" meeting more than "October Meeting"?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "category",
    "amount",
    "link_to_event",
    "budget_id",
    "spent",
    "remaining"
  ],
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": [
    "event_name",
    "event_id",
    "event_date",
    "type",
    "notes",
    "location"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  CAST(SUM(CASE WHEN T1.amount > T2.amount THEN 1 ELSE 0 END) AS REAL)
FROM (
  SELECT
    amount
  FROM Budget
  WHERE
    category = 'Advertisement' AND link_to_event = (
      SELECT
        event_id
      FROM Event
      WHERE
        event_name = 'Yearly Kickoff'
    )
) AS T1
INNER JOIN (
  SELECT
    amount
  FROM Budget
  WHERE
    category = 'Advertisement' AND link_to_event = (
      SELECT
        event_id
      FROM Event
      WHERE
        event_name = 'October Meeting'
    )
) AS T2;
=====================
Question: What is the total cost of the pizzas for all the events?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "budget_id",
    "category",
    "spent",
    "remaining",
    "amount",
    "event_status"
  ],
  "Zip_Code": "drop_all",
  "Expense": [
    "cost",
    "expense_description",
    "expense_id",
    "expense_date",
    "approved",
    "link_to_budget"
  ],
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": [
    "event_name",
    "event_id",
    "event_date",
    "type",
    "notes",
    "location"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT SUM(cost) FROM Expense WHERE expense_description = 'Pizza';
=====================
Question: How many cities are there in Orange County, Virginia?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": [
    "county",
    "state",
    "city",
    "zip_code",
    "type",
    "short_state"
  ],
  "Expense": "drop_all",
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT count(DISTINCT city) FROM Zip_Code WHERE county = "Orange County" AND state = "Virginia"
=====================
Question: What does the person with the phone number "809-555-3360" major in?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": [
    "phone",
    "member_id",
    "first_name",
    "last_name",
    "email",
    "position"
  ],
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": [
    "major_name",
    "major_id",
    "department",
    "college"
  ]
}
```
Final SQL (attempt 1): SELECT T2.major_name FROM Member AS T1 INNER JOIN Major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = "809-555-3360"
=====================
Question: How many members attended the "Women's Soccer" event?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": [
    "member_id",
    "first_name",
    "last_name",
    "email",
    "position",
    "t_shirt_size"
  ],
  "Attendance": [
    "link_to_event",
    "link_to_member"
  ],
  "Event": [
    "event_id",
    "event_name",
    "event_date",
    "type",
    "notes",
    "location"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(T1.link_to_member) FROM Attendance AS T1 INNER JOIN Event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = "Women's Soccer"
=====================
Question: List all the members of the "School of Applied Sciences, Technology and Education" department.
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": [
    "first_name",
    "last_name",
    "member_id",
    "email",
    "position",
    "t_shirt_size"
  ],
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": [
    "department",
    "major_id",
    "major_name",
    "college"
  ]
}
```
Final SQL (attempt 1): SELECT T1.first_name, T1.last_name FROM Member AS T1 INNER JOIN Major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = "School of Applied Sciences, Technology and Education"
=====================
Question: Among all the closed events, which event has the highest spend-to-budget ratio?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "amount",
    "spent",
    "link_to_event",
    "budget_id",
    "category",
    "remaining"
  ],
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": [
    "event_id",
    "status",
    "event_name",
    "event_date",
    "type",
    "notes"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.event_name FROM Event AS T1 JOIN Budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.status = 'Closed' AND T2.amount != 0 ORDER BY CAST(T2.spent AS REAL) / T2.amount DESC LIMIT 1
=====================
Question: What is the highest amount of budget spend for an event?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "spent",
    "amount",
    "category",
    "event_status",
    "remaining",
    "link_to_event"
  ],
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": [
    "event_name",
    "event_id",
    "event_date",
    "type",
    "notes",
    "location"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT MAX(spent) FROM Budget
=====================
Question: What is the total amount of money spent for food?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "spent",
    "category",
    "budget_id",
    "amount",
    "event_status",
    "remaining"
  ],
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT SUM(spent) FROM Budget WHERE category = 'Food'
=====================
Question: List the name of students that have attended more than 7 events.
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": [
    "member_id",
    "first_name",
    "last_name",
    "email",
    "position",
    "link_to_major"
  ],
  "Attendance": [
    "link_to_event",
    "link_to_member"
  ],
  "Event": [
    "event_id",
    "event_name",
    "event_date",
    "type",
    "status",
    "location"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.first_name, T1.last_name FROM Member AS T1 INNER JOIN Attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.member_id HAVING COUNT(T2.link_to_event) > 7
=====================
Question: Which student has been entrusted to manage the budget for the Yearly Kickoff?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "link_to_event",
    "budget_id",
    "category",
    "spent",
    "remaining",
    "amount"
  ],
  "Zip_Code": "drop_all",
  "Expense": [
    "link_to_budget",
    "expense_id",
    "expense_description",
    "expense_date",
    "cost",
    "approved"
  ],
  "Member": [
    "member_id",
    "first_name",
    "last_name",
    "position",
    "email",
    "t_shirt_size"
  ],
  "Attendance": "drop_all",
  "Event": [
    "event_name",
    "event_id",
    "event_date",
    "type",
    "notes",
    "location"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT DISTINCT
  T1.first_name,
  T1.last_name
FROM Member AS T1
INNER JOIN Expense AS T2
  ON T1.member_id = T2.link_to_member
INNER JOIN Budget AS T3
  ON T2.link_to_budget = T3.budget_id
INNER JOIN Event AS T4
  ON T3.link_to_event = T4.event_id
WHERE
  T4.event_name = 'Yearly Kickoff';
=====================
Question: Which event has the lowest cost?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "link_to_event",
    "budget_id",
    "category",
    "spent",
    "remaining",
    "amount"
  ],
  "Zip_Code": "drop_all",
  "Expense": [
    "cost",
    "expense_description",
    "expense_date",
    "expense_id",
    "approved",
    "link_to_member"
  ],
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": [
    "event_name",
    "event_id",
    "event_date",
    "type",
    "notes",
    "location"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.event_name FROM Event AS T1 JOIN Budget AS T2 ON T1.event_id = T2.link_to_event JOIN Expense AS T3 ON T2.budget_id = T3.link_to_budget ORDER BY T3.cost ASC LIMIT 1
=====================
Question: Based on the total cost for all event, what is the percentage of cost for Yearly Kickoff event?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "link_to_event",
    "spent",
    "budget_id",
    "category",
    "remaining",
    "amount"
  ],
  "Zip_Code": "drop_all",
  "Expense": [
    "cost",
    "link_to_budget",
    "expense_id",
    "expense_description",
    "expense_date",
    "approved"
  ],
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": [
    "event_name",
    "event_id",
    "event_date",
    "type",
    "notes",
    "location"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T3.event_name = 'Yearly Kickoff' THEN T1.cost ELSE 0 END) AS REAL) * 100 / SUM(T1.cost) FROM Expense AS T1 JOIN Budget AS T2 ON T1.link_to_budget = T2.budget_id JOIN Event AS T3 ON T2.link_to_event = T3.event_id
=====================
Question: Indicate the top source of funds received in September 2019 based on their amount.
 db_id: student_club
Selector: ```json
{
  "Income": [
    "source",
    "amount",
    "date_received",
    "income_id",
    "notes",
    "link_to_member"
  ],
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT source FROM Income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' ORDER BY amount DESC LIMIT 1
=====================
Question: How many members of the Student_Club have major in 'Physics Teaching'?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": [
    "link_to_major",
    "member_id",
    "first_name",
    "last_name",
    "email",
    "position"
  ],
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": [
    "major_name",
    "major_id",
    "department",
    "college"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(T1.member_id) FROM Member AS T1 INNER JOIN Major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Physics Teaching'
=====================
Question: Name the event with the highest amount spent on advertisement.
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "amount",
    "remaining",
    "spent",
    "category",
    "link_to_event",
    "budget_id"
  ],
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": [
    "event_name",
    "event_id",
    "event_date",
    "type",
    "notes",
    "location"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.event_name FROM Event AS T1 JOIN Budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Advertisement' ORDER BY T2.spent DESC LIMIT 1
=====================
Question: Did Maya Mclean attend the 'Women's Soccer' event?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": [
    "member_id",
    "first_name",
    "last_name",
    "email",
    "position",
    "t_shirt_size"
  ],
  "Attendance": [
    "link_to_member",
    "link_to_event"
  ],
  "Event": [
    "event_id",
    "event_name",
    "event_date",
    "type",
    "notes",
    "location"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 2): SELECT CASE WHEN COUNT(*) > 0 THEN 'Yes' ELSE 'No' END FROM Attendance WHERE link_to_member = (SELECT member_id FROM Member WHERE first_name = 'Maya' AND last_name = 'Mclean') AND link_to_event = (SELECT event_id FROM Event WHERE event_name = 'Women''s Soccer')
=====================
Question: Indicate the cost of posters for 'September Speaker' event.
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "budget_id",
    "link_to_event",
    "category",
    "amount",
    "spent",
    "remaining"
  ],
  "Zip_Code": "drop_all",
  "Expense": [
    "expense_id",
    "expense_description",
    "cost",
    "link_to_budget",
    "expense_date",
    "approved"
  ],
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": [
    "event_id",
    "event_name",
    "event_date",
    "type",
    "location",
    "status"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.cost FROM Expense AS T1 INNER JOIN Budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN Event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = "September Speaker" AND T1.expense_description = "Posters"
=====================
Question: Indicate the name of the closed event whose cost has exceeded the budget the most.
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "budget_id",
    "remaining",
    "link_to_event",
    "spent",
    "amount",
    "category"
  ],
  "Zip_Code": "drop_all",
  "Expense": [
    "cost",
    "link_to_budget",
    "expense_id",
    "expense_description",
    "expense_date",
    "approved"
  ],
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": [
    "event_name",
    "status",
    "event_id",
    "event_date",
    "type",
    "notes"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.event_name
FROM Event AS T1
JOIN Budget AS T2 ON T1.event_id = T2.link_to_event
WHERE T1.status = 'Closed'
ORDER BY T2.remaining
LIMIT 1;
=====================
Question: Identify the type of expenses and their total value approved for 'October Meeting' event.
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "budget_id",
    "link_to_event",
    "spent",
    "remaining",
    "amount",
    "category"
  ],
  "Zip_Code": "drop_all",
  "Expense": [
    "cost",
    "link_to_budget",
    "expense_description",
    "approved",
    "expense_id",
    "expense_date"
  ],
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": [
    "event_name",
    "event_id",
    "event_date",
    "type",
    "notes",
    "location"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.expense_description,
  SUM(T1.cost)
FROM Expense AS T1
INNER JOIN Budget AS T2
  ON T1.link_to_budget = T2.budget_id
INNER JOIN Event AS T3
  ON T2.link_to_event = T3.event_id
WHERE
  T3.event_name = 'October Meeting' AND T1.approved = 'TRUE'
GROUP BY
  T1.expense_description;
=====================
Question: Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "amount",
    "category",
    "link_to_event",
    "budget_id",
    "spent",
    "remaining"
  ],
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": [
    "event_name",
    "event_id",
    "event_date",
    "type",
    "notes",
    "location"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.category
FROM Budget AS T1
INNER JOIN Event AS T2
  ON T1.link_to_event = T2.event_id
WHERE
  T2.event_name = 'April Speaker'
GROUP BY
  T1.category
ORDER BY
  T1.amount ASC;
=====================
Question: Mention the total expense used on 8/20/2019.
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": [
    "cost",
    "expense_date",
    "expense_id",
    "expense_description",
    "approved",
    "link_to_member"
  ],
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT SUM(cost) FROM Expense WHERE expense_date = '2019-08-20'
=====================
Question: List out the full name and total cost that member id "rec4BLdZHS2Blfp4v" incurred?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "budget_id",
    "category",
    "spent",
    "remaining",
    "amount",
    "event_status"
  ],
  "Zip_Code": "drop_all",
  "Expense": [
    "cost",
    "expense_description",
    "expense_date",
    "approved",
    "expense_id",
    "link_to_member"
  ],
  "Member": [
    "member_id",
    "first_name",
    "last_name",
    "email",
    "position",
    "t_shirt_size"
  ],
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.first_name,
  T1.last_name,
  SUM(T2.cost)
FROM Member AS T1
JOIN Expense AS T2
  ON T1.member_id = T2.link_to_member
WHERE
  T1.member_id = 'rec4BLdZHS2Blfp4v';
=====================
Question: State what kind of expenses that Sacha Harrison incurred?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": [
    "expense_description",
    "expense_id",
    "expense_date",
    "cost",
    "approved",
    "link_to_member"
  ],
  "Member": [
    "first_name",
    "last_name",
    "member_id",
    "email",
    "position",
    "t_shirt_size"
  ],
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.expense_description FROM Expense AS T1 JOIN Member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = "Sacha" AND T2.last_name = "Harrison"
=====================
Question: State the category of events were held at MU 215.
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "category",
    "link_to_event",
    "event_status",
    "spent",
    "remaining",
    "budget_id"
  ],
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": [
    "location",
    "event_id",
    "event_name",
    "event_date",
    "type",
    "notes"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT DISTINCT T1.category FROM Budget AS T1 JOIN Event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.location = "MU 215"
=====================
Question: List the last name of members with a major in environmental engineering and include its department and college name.
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": [
    "last_name",
    "link_to_major",
    "member_id",
    "first_name",
    "email",
    "position"
  ],
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": [
    "major_name",
    "department",
    "college",
    "major_id"
  ]
}
```
Final SQL (attempt 1): SELECT
  T1.last_name,
  T2.department,
  T2.college
FROM Member AS T1
INNER JOIN Major AS T2
  ON T1.link_to_major = T2.major_id
WHERE
  T2.major_name = 'Environmental Engineering';
=====================
Question: What are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent?
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "category",
    "spent",
    "link_to_event",
    "budget_id",
    "amount",
    "remaining"
  ],
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": [
    "location",
    "type",
    "event_id",
    "event_name",
    "event_date",
    "notes"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.category FROM Budget AS T1 INNER JOIN Event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.location = 'MU 215' AND T2.type = 'Guest Speaker' AND T1.spent = 0
=====================
Question: Among the members with t-shirt size of medium, what is the percentage of the amount 50 received by the Student_Club?
 db_id: student_club
Selector: ```json
{
  "Income": [
    "amount",
    "income_id",
    "date_received",
    "source",
    "notes",
    "link_to_member"
  ],
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": [
    "t_shirt_size",
    "member_id",
    "first_name",
    "last_name",
    "email",
    "position"
  ],
  "Attendance": "keep_all",
  "Event": "drop_all",
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T2.amount = 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.member_id) FROM Member AS T1 INNER JOIN Income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'Medium'
=====================
Question: List the names of closed event as "game" that was closed from 3/15/2019 to 3/20/2020.
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Member": "drop_all",
  "Attendance": "drop_all",
  "Event": [
    "event_name",
    "event_date",
    "status",
    "type",
    "event_id",
    "notes"
  ],
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT event_name AS game FROM Event WHERE status = 'Closed' AND type = 'Game' AND event_date BETWEEN '2019-03-15' AND '2020-03-20'
=====================
Question: Give the full name and contact number of members who had to spend more than average on each expense.
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": [
    "cost",
    "expense_id",
    "expense_description",
    "expense_date",
    "approved",
    "link_to_member"
  ],
  "Member": [
    "phone",
    "first_name",
    "last_name",
    "member_id",
    "email",
    "position"
  ],
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT T2.first_name, T2.last_name, T2.phone FROM Expense AS T1 INNER JOIN Member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.cost > (SELECT avg(cost) FROM Expense)
=====================
Question: Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it.
 db_id: student_club
Selector: ```json
{
  "Income": "drop_all",
  "Budget": [
    "budget_id",
    "link_to_event",
    "event_status",
    "category",
    "amount",
    "remaining"
  ],
  "Zip_Code": "drop_all",
  "Expense": [
    "expense_description",
    "cost",
    "link_to_member",
    "expense_id",
    "expense_date",
    "link_to_budget"
  ],
  "Member": [
    "first_name",
    "last_name",
    "member_id",
    "zip",
    "position",
    "email"
  ],
  "Attendance": "drop_all",
  "Event": "keep_all",
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.first_name, T1.last_name, T2.cost FROM Member AS T1 INNER JOIN Expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_description = 'Water, Veggie tray, supplies'
=====================
Question: Write the full names of students who received funds on the date of 9/9/2019 and include the amount received.
 db_id: student_club
Selector: ```json
{
  "Income": [
    "amount",
    "date_received",
    "link_to_member",
    "income_id",
    "source",
    "notes"
  ],
  "Member": [
    "first_name",
    "last_name",
    "member_id",
    "email",
    "position",
    "t_shirt_size"
  ],
  "Budget": "drop_all",
  "Zip_Code": "drop_all",
  "Expense": "drop_all",
  "Attendance": "drop_all",
  "Event": "drop_all",
  "Major": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.first_name,
  T1.last_name,
  T2.amount
FROM Member AS T1
JOIN Income AS T2
  ON T1.member_id = T2.link_to_member
WHERE
  T2.date_received = '9/9/2019';
=====================
Question: Are there more in-patient or outpatient who were male? What is the deviation in percentage?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": "drop_all",
  "Patient": [
    "ID",
    "SEX",
    "Admission",
    "Birthday",
    "Description",
    "First Date"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  CASE
    WHEN (
      SELECT
        COUNT(ID)
      FROM Patient
      WHERE
        SEX = 'M' AND Admission = '+'
    ) > (
      SELECT
        COUNT(ID)
      FROM Patient
      WHERE
        SEX = 'M' AND Admission = '-'
    )
    THEN 'More in-patients'
    ELSE 'More outpatients'
  END,
  ABS(
    (
      CAST(
        (
          SELECT
            COUNT(ID)
          FROM Patient
          WHERE
            SEX = 'M' AND Admission = '+'
        ) AS REAL
      ) / (
        SELECT
          COUNT(ID)
        FROM Patient
        WHERE
          SEX = 'M' AND Admission = '-'
      )
    ) - 1
  ) * 100;
=====================
Question: What is the percentage of female patient were born after 1930?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": "drop_all",
  "Patient": [
    "ID",
    "Birthday",
    "SEX",
    "Description",
    "First Date",
    "Diagnosis"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', Birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE SEX = 'F'
=====================
Question: What is the ratio of outpatient to inpatient followed up treatment among all the 'SLE' diagnosed patient?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": "drop_all",
  "Patient": [
    "ID",
    "Diagnosis",
    "Admission",
    "SEX",
    "Birthday",
    "Description"
  ],
  "Examination": [
    "ID",
    "Examination Date",
    "aCL IgG",
    "aCL IgM",
    "ANA",
    "ANA Pattern"
  ]
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) FROM Patient WHERE Diagnosis = 'SLE';
=====================
Question: What is the disease patient '30609' diagnosed with. List all the date of laboratory tests done for this patient.
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "Date",
    "GPT",
    "GOT",
    "LDH",
    "ALP"
  ],
  "Patient": [
    "ID",
    "Diagnosis",
    "First Date",
    "Birthday",
    "SEX",
    "Description"
  ],
  "Examination": [
    "ID",
    "Examination Date",
    "aCL IgG",
    "aCL IgM",
    "ANA",
    "ANA Pattern"
  ]
}
```
Final SQL (attempt 1): SELECT
  p.Diagnosis,
  l.Date
FROM Patient AS p
JOIN Laboratory AS l
  ON p.ID = l.ID
WHERE
  p.ID = '30609';
=====================
Question: List the patient ID, sex and birthday of patient with LDH beyond normal range.
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "LDH",
    "Date",
    "GPT",
    "GOT",
    "ALP"
  ],
  "Patient": [
    "ID",
    "SEX",
    "Birthday",
    "Description",
    "First Date",
    "Diagnosis"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  p.ID,
  p.SEX,
  p.Birthday
FROM Patient AS p
JOIN Laboratory AS l
  ON p.ID = l.ID
WHERE
  l.LDH > 500;
=====================
Question: State the ID and age of patient with positive degree of coagulation.
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": "drop_all",
  "Patient": [
    "ID",
    "Birthday",
    "SEX",
    "Description",
    "First Date",
    "Diagnosis"
  ],
  "Examination": [
    "RVVT",
    "ID",
    "Examination Date",
    "aCL IgG",
    "aCL IgM",
    "ANA"
  ]
}
```
Final SQL (attempt 1): SELECT P.ID, SUBSTR(CAST(strftime('%Y', 'now') - strftime('%Y', P.Birthday) AS TEXT), 1, 4) AS Age FROM Patient AS P JOIN Examination AS E ON P.ID = E.ID WHERE E.RVVT = '+'
=====================
Question: For patients with severe degree of thrombosis, list their ID, sex and disease the patient is diagnosed with.
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": "drop_all",
  "Patient": [
    "ID",
    "SEX",
    "Diagnosis",
    "Birthday",
    "Description",
    "First Date"
  ],
  "Examination": [
    "Thrombosis",
    "ID",
    "Examination Date",
    "aCL IgG",
    "aCL IgM",
    "ANA"
  ]
}
```
Final SQL (attempt 1): SELECT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2
=====================
Question: How many female patients who came at the hospital in 1997 was immediately followed at the outpatient clinic?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": "drop_all",
  "Patient": [
    "ID",
    "SEX",
    "Description",
    "First Date",
    "Admission",
    "Birthday"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  COUNT(ID)
FROM Patient
WHERE
  SEX = 'F' AND STRFTIME('%Y', Description) = '1997' AND Admission = '-';
=====================
Question: How many of the patients with the most serious thrombosis cases examined in 1997 are women?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": "drop_all",
  "Patient": [
    "ID",
    "SEX",
    "First Date",
    "Birthday",
    "Description",
    "Diagnosis"
  ],
  "Examination": [
    "Thrombosis",
    "Examination Date",
    "ID",
    "aCL IgG",
    "aCL IgM",
    "ANA"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(T1.ID) FROM Patient AS T1 JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 1 AND T1.SEX = 'F' AND substr(T2."Examination Date", 1, 4) = '1997'
=====================
Question: What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis.
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": "drop_all",
  "Patient": [
    "ID",
    "Birthday",
    "SEX",
    "Description",
    "First Date",
    "Diagnosis"
  ],
  "Examination": [
    "ID",
    "Examination Date",
    "Symptoms",
    "Diagnosis",
    "Thrombosis",
    "aCL IgG"
  ]
}
```
Final SQL (attempt 1): SELECT
  T1.Symptoms,
  T1.Diagnosis
FROM Examination AS T1
JOIN Patient AS T2
  ON T1.ID = T2.ID
WHERE
  T1.Symptoms IS NOT NULL
ORDER BY
  T2.Birthday DESC
LIMIT 1;
=====================
Question: The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "Date",
    "TAT2",
    "TAT",
    "PIC",
    "PT"
  ],
  "Patient": [
    "ID",
    "Birthday",
    "First Date",
    "SEX",
    "Diagnosis",
    "Description"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.Date, CAST(strftime('%Y', T2."First Date") AS INTEGER) - CAST(strftime('%Y', T2.Birthday) AS INTEGER) FROM Laboratory AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = "SJS" ORDER BY T2.Birthday ASC LIMIT 1
=====================
Question: What is the ratio of male to female patients among all those with abnormal uric acid counts?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "UA",
    "Date",
    "ALB",
    "TP",
    "UN"
  ],
  "Patient": [
    "ID",
    "SEX",
    "Birthday",
    "Description",
    "First Date",
    "Diagnosis"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  CAST(SUM(CASE WHEN T1.SEX = 'M' AND T2.UA <= 8.0 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.SEX = 'F' AND T2.UA <= 6.5 THEN 1 ELSE 0 END)
FROM Patient AS T1
INNER JOIN Laboratory AS T2
  ON T1.ID = T2.ID;
=====================
Question: How many underage patients were examined during the course of the three-year period from 1990 to 1993?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": "drop_all",
  "Patient": [
    "ID",
    "Birthday",
    "SEX",
    "Description",
    "First Date",
    "Admission"
  ],
  "Examination": [
    "Examination Date",
    "ID",
    "aCL IgG",
    "aCL IgM",
    "ANA",
    "ANA Pattern"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.ID)
FROM Patient AS T1
INNER JOIN Examination AS T2 ON T1.ID = T2.ID
WHERE CAST(SUBSTR(T2."Examination Date", 1, 4) AS INTEGER) BETWEEN 1990 AND 1993
AND CAST(SUBSTR(T1.Birthday, 1, 4) AS INTEGER) > (1993 - 18)
=====================
Question: How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "HGB",
    "ID",
    "Date",
    "HCT",
    "RBC",
    "WBC"
  ],
  "Patient": [
    "Birthday",
    "ID",
    "Diagnosis",
    "SEX",
    "Description",
    "First Date"
  ],
  "Examination": [
    "Examination Date",
    "ID",
    "aCL IgG",
    "aCL IgM",
    "ANA",
    "ANA Pattern"
  ]
}
```
Final SQL (attempt 1): SELECT
  CAST(STRFTIME('%Y', T1."Examination Date") AS INTEGER) - CAST(STRFTIME('%Y', T2.Birthday) AS INTEGER),
  T2.Diagnosis
FROM Examination AS T1
INNER JOIN Patient AS T2
  ON T1.ID = T2.ID
INNER JOIN Laboratory AS T3
  ON T1.ID = T3.ID
WHERE
  T3.HGB = (
    SELECT
      MAX(HGB)
    FROM Laboratory
  );
=====================
Question: For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": "drop_all",
  "Patient": [
    "ID",
    "Diagnosis",
    "Description",
    "SEX",
    "Birthday",
    "First Date"
  ],
  "Examination": [
    "ID",
    "Examination Date",
    "aCL IgM",
    "aCL IgG",
    "aCL IgA",
    "ANA"
  ]
}
```
Final SQL (attempt 1): SELECT
  T1."aCL IgM"
FROM Examination AS T1
INNER JOIN Patient AS T2
  ON T1.ID = T2.ID
WHERE
  T2.Diagnosis = 'SLE' AND T2.Description = '1994-02-19' AND T1."Examination Date" = '1993-11-12';
=====================
Question: For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "Date",
    "T-CHO",
    "GPT",
    "GOT",
    "LDH"
  ],
  "Patient": [
    "ID",
    "Birthday",
    "First Date",
    "Description",
    "SEX",
    "Diagnosis"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  CAST(SUM(CASE WHEN T2.Date LIKE '1981-11%' THEN T2."T-CHO" ELSE 0 END) - SUM(CASE WHEN T2.Date LIKE '1981-12%' THEN T2."T-CHO" ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.Date LIKE '1981-11%' THEN T2."T-CHO" ELSE 0 END)
FROM Patient AS T1
JOIN Laboratory AS T2
  ON T1.ID = T2.ID
WHERE
  T1.Birthday = '1959-02-18' AND (
    T2.Date LIKE '1981-11%' OR T2.Date LIKE '1981-12%'
  );
=====================
Question: How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID.
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "ALB",
    "GPT",
    "Date",
    "TAT2",
    "TAT"
  ],
  "Patient": [
    "ID",
    "First Date",
    "Description",
    "Birthday",
    "SEX",
    "Diagnosis"
  ],
  "Examination": [
    "ID",
    "Examination Date",
    "LAC",
    "RVVT",
    "KCT",
    "Thrombosis"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE Date BETWEEN '1987-07-06' AND '1996-01-31' AND GPT > 30 AND ALB < 4
=====================
Question: What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": "drop_all",
  "Patient": [
    "ID",
    "SEX",
    "Birthday",
    "Description",
    "First Date",
    "Diagnosis"
  ],
  "Examination": [
    "aCL IgM",
    "ANA Pattern",
    "Thrombosis",
    "ID",
    "Examination Date",
    "aCL IgG"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Thrombosis = 2 AND T1."ANA Pattern" = 'S' AND T1."aCL IgM" > (SELECT AVG("aCL IgM") * 1.2 FROM Examination)
=====================
Question: List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range.
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "Date",
    "T-BIL",
    "ALB",
    "TP",
    "ALP"
  ],
  "Patient": [
    "ID",
    "Admission",
    "SEX",
    "Birthday",
    "Description",
    "First Date"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.Date LIKE '9110%' AND T2."T-BIL" < 2.0
=====================
Question: What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ALB",
    "PLT",
    "ID",
    "Date",
    "GOT",
    "GPT"
  ],
  "Patient": [
    "Diagnosis",
    "SEX",
    "ID",
    "Birthday",
    "Description",
    "First Date"
  ],
  "Examination": [
    "ID",
    "Examination Date",
    "aCL IgG",
    "aCL IgM",
    "ANA",
    "ANA Pattern"
  ]
}
```
Final SQL (attempt 1): SELECT AVG(T1.ALB) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.SEX = 'F' AND T2.Diagnosis = 'SLE' AND T1.PLT > 400
=====================
Question: How many female patients were given an APS diagnosis?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": "drop_all",
  "Patient": [
    "ID",
    "SEX",
    "Diagnosis",
    "Birthday",
    "Description",
    "First Date"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS';
=====================
Question: What percentage of patients who were born in 1980 and were diagnosed with RA are women?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": "drop_all",
  "Patient": [
    "ID",
    "SEX",
    "Birthday",
    "Diagnosis",
    "Description",
    "First Date"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE strftime('%Y', Birthday) = '1980' AND Diagnosis = 'RA'
=====================
Question: Was the patient with the number 57266's uric acid within a normal range?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "UA",
    "Date",
    "ALB",
    "TP",
    "CRE"
  ],
  "Patient": [
    "ID",
    "SEX",
    "Birthday",
    "Description",
    "First Date",
    "Admission"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  CASE
    WHEN T1.SEX = 'M' AND T2.UA > 8.0
    THEN 'Yes'
    WHEN T1.SEX = 'F' AND T2.UA > 6.5
    THEN 'Yes'
    ELSE 'No'
  END
FROM Patient AS T1
INNER JOIN Laboratory AS T2
  ON T1.ID = T2.ID
WHERE
  T1.ID = 57266;
=====================
Question: Provide IDs for male patients with ALT glutamic pylvic transaminase (GPT) that have history of ALT glutamic pylvic transaminase (GPT) exceed the normal range.
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "GPT",
    "Date",
    "TAT",
    "TAT2",
    "GOT"
  ],
  "Patient": [
    "ID",
    "SEX",
    "Birthday",
    "Description",
    "First Date",
    "Admission"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT DISTINCT
  T1.ID
FROM Patient AS T1
INNER JOIN Laboratory AS T2
  ON T1.ID = T2.ID
WHERE
  T1.SEX = 'M' AND T2.GPT >= 60;
=====================
Question: Please provide the diagnosis of patients with ALT glutamic pylvic transaminase beyond the normal range by ascending order of their date of birth.
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "GPT",
    "Date",
    "ALB",
    "TP",
    "ALP"
  ],
  "Patient": [
    "ID",
    "Diagnosis",
    "Birthday",
    "SEX",
    "Description",
    "First Date"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.Diagnosis FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT > 60 ORDER BY T1.Birthday ASC
=====================
Question: Provide all ID, sex and birthday of patients whose urea nitrogen (UN) just within the borderline of passing?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "UN",
    "ID",
    "Date",
    "GPT",
    "GOT",
    "LDH"
  ],
  "Patient": [
    "ID",
    "SEX",
    "Birthday",
    "Description",
    "First Date",
    "Admission"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN = 29
=====================
Question: List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range.
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "T-BIL",
    "Date",
    "TP",
    "ALB",
    "UA"
  ],
  "Patient": [
    "SEX",
    "ID",
    "Birthday",
    "Description",
    "First Date",
    "Diagnosis"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 3): SELECT
  P.SEX,
  GROUP_CONCAT(DISTINCT P.ID)
FROM Patient AS P
JOIN Laboratory AS L
  ON P.ID = L.ID
WHERE
  L.T_BIL >= 2.0
GROUP BY
  P.SEX;
Final Error: no such column: L.T_BIL
=====================
Question: List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range.
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "T-BIL",
    "Date",
    "TP",
    "ALB",
    "UA"
  ],
  "Patient": [
    "ID",
    "SEX",
    "Birthday",
    "Description",
    "First Date",
    "Diagnosis"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  P.SEX,
  GROUP_CONCAT(DISTINCT P.ID)
FROM Patient AS P
JOIN Laboratory AS L
  ON P.ID = L.ID
WHERE
  L."T-BIL" >= 2.0
GROUP BY
  P.SEX;
=====================
Question: What is the average age of the male patient with high cholesterol?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "T-CHO",
    "Date",
    "GOT",
    "GPT",
    "LDH"
  ],
  "Patient": [
    "ID",
    "Birthday",
    "SEX",
    "Description",
    "First Date",
    "Admission"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(STRFTIME('%Y', 'now') - STRFTIME('%Y', T1.Birthday)) AS REAL) / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2."T-CHO" >= 250;
=====================
Question: For all patients with triglyceride (TG) level beyond the normal range, how many are age more than 50 years?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "TG",
    "Date",
    "GOT",
    "GPT",
    "LDH"
  ],
  "Patient": [
    "ID",
    "Birthday",
    "SEX",
    "Description",
    "First Date",
    "Admission"
  ],
  "Examination": [
    "ID",
    "Examination Date",
    "aCL IgG",
    "aCL IgM",
    "ANA",
    "ANA Pattern"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.ID)
FROM Patient AS T1
JOIN Laboratory AS T2 ON T1.ID = T2.ID
WHERE T2.TG >= 200
AND STRFTIME('%Y', 'now') - STRFTIME('%Y', T1.Birthday) > 50;
=====================
Question: For patient born between 1936-1956, how many male patients have creatinine phosphokinase beyond the normal range?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "CPK",
    "ID",
    "Date",
    "GPT",
    "GOT",
    "LDH"
  ],
  "Patient": [
    "Birthday",
    "SEX",
    "ID",
    "Description",
    "First Date",
    "Admission"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.ID)
FROM Patient AS T1
JOIN Laboratory AS T2 ON T1.ID = T2.ID
WHERE T1.SEX = 'M'
  AND SUBSTR(T1.Birthday, 1, 4) BETWEEN '1936' AND '1956'
  AND T2.CPK >= 250;
=====================
Question: Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range.
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "GLU",
    "T-CHO",
    "Date",
    "GPT",
    "GOT"
  ],
  "Patient": [
    "ID",
    "Birthday",
    "SEX",
    "Description",
    "First Date",
    "Admission"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  P.ID,
  P.SEX,
  CAST(SUBSTR(DATE('now'), 1, 4) AS INTEGER) - CAST(SUBSTR(P.Birthday, 1, 4) AS INTEGER)
FROM Patient AS P
INNER JOIN Laboratory AS L
  ON P.ID = L.ID
WHERE
  L.GLU >= 180 AND L."T-CHO" < 250;
=====================
Question: What are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age.
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "RBC",
    "Date",
    "WBC",
    "HGB",
    "HCT"
  ],
  "Patient": [
    "ID",
    "Birthday",
    "Diagnosis",
    "SEX",
    "Description",
    "First Date"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.Diagnosis,
  T1.ID,
  CAST(SUBSTR(STRFTIME('%Y', 'now'), 3, 2) AS INTEGER) - CAST(SUBSTR(STRFTIME('%Y', T1.Birthday), 3, 2) AS INTEGER)
FROM Patient AS T1
INNER JOIN Laboratory AS T2
  ON T1.ID = T2.ID
WHERE
  T2.RBC < 3.5;
=====================
Question: Among the patients who were diagnosed with SLE, who is the oldest with normal hemoglobin level. Provide the ID and sex.
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "HGB",
    "Date",
    "WBC",
    "RBC",
    "HCT"
  ],
  "Patient": [
    "ID",
    "SEX",
    "Birthday",
    "Diagnosis",
    "Description",
    "First Date"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.ID,
  T1.SEX
FROM Patient AS T1
INNER JOIN Laboratory AS T2
  ON T1.ID = T2.ID
WHERE
  T1.Diagnosis = 'SLE' AND T2.HGB > 10 AND T2.HGB < 17
ORDER BY
  T1.Birthday
LIMIT 1;
=====================
Question: Name the ID and age of patient with two or more laboratory examinations which show their hematoclit level exceeded the normal range.
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "Date",
    "HCT",
    "WBC",
    "RBC",
    "HGB"
  ],
  "Patient": [
    "ID",
    "Birthday",
    "SEX",
    "Description",
    "First Date",
    "Diagnosis"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.ID,
  CAST(SUBSTR(DATE('now'), 1, 4) AS INTEGER) - CAST(SUBSTR(T1.Birthday, 1, 4) AS INTEGER) AS Age
FROM Patient AS T1
INNER JOIN (
  SELECT
    ID
  FROM Laboratory
  WHERE
    HCT >= 52
  GROUP BY
    ID
  HAVING
    COUNT(ID) >= 2
) AS T2
  ON T1.ID = T2.ID;
=====================
Question: For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "PLT",
    "ID",
    "Date",
    "WBC",
    "RBC",
    "HGB"
  ],
  "Patient": [
    "ID",
    "SEX",
    "Birthday",
    "Description",
    "First Date",
    "Admission"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  SUM(CASE WHEN PLT < 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN PLT > 400 THEN 1 ELSE 0 END)
FROM Laboratory
WHERE
  PLT <= 100 OR PLT >= 400;
=====================
Question: For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level.
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "PLT",
    "Date",
    "ID",
    "GOT",
    "GPT",
    "LDH"
  ],
  "Patient": [
    "Birthday",
    "ID",
    "SEX",
    "Description",
    "First Date",
    "Admission"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.ID
FROM Patient AS T1
INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID
WHERE
  SUBSTR(T2.Date, 1, 4) = '1984' AND CAST(SUBSTR(strftime('%Y', 'now'), 1, 4) AS INTEGER) - CAST(SUBSTR(T1.Birthday, 1, 4) AS INTEGER) < 50 AND T2.PLT BETWEEN 100 AND 400;
=====================
Question: For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "PT",
    "ID",
    "Date",
    "GPT",
    "GOT",
    "ALB"
  ],
  "Patient": [
    "Birthday",
    "SEX",
    "ID",
    "Description",
    "First Date",
    "Admission"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T1.SEX = 'F' AND T2.PT >= 14 THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.PT >= 14 THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (STRFTIME('%Y', 'now') - STRFTIME('%Y', T1.Birthday)) > 55
=====================
Question: Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "FG",
    "WBC",
    "Date",
    "GPT",
    "GOT"
  ],
  "Patient": [
    "ID",
    "SEX",
    "First Date",
    "Birthday",
    "Description",
    "Diagnosis"
  ],
  "Examination": [
    "ID",
    "Examination Date",
    "aCL IgG",
    "aCL IgM",
    "ANA",
    "ANA Pattern"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.WBC > 3.5 AND T2.WBC < 9.0 AND (T2.FG <= 150 OR T2.FG >= 450)
=====================
Question: How many patients with an Ig G higher than normal?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "IGG",
    "ID",
    "Date",
    "GOT",
    "GPT",
    "LDH"
  ],
  "Patient": [
    "ID",
    "SEX",
    "Birthday",
    "Description",
    "First Date",
    "Admission"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE IGG >= 2000
=====================
Question: Among the patients with a normal Ig G level, how many of them have symptoms?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "IGG",
    "ID",
    "Date",
    "GPT",
    "GOT",
    "LDH"
  ],
  "Patient": [
    "ID",
    "Diagnosis",
    "SEX",
    "Birthday",
    "Description",
    "First Date"
  ],
  "Examination": [
    "Symptoms",
    "ID",
    "Examination Date",
    "aCL IgG",
    "aCL IgM",
    "ANA"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(T1.ID)
FROM Laboratory AS T1
INNER JOIN Examination AS T2 ON T1.ID = T2.ID
WHERE T1.IGG > 900 AND T1.IGG < 2000 AND T2.Symptoms IS NOT NULL;
=====================
Question: How many patients with a normal Ig A level came to the hospital after 1990/1/1?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "IGA",
    "ID",
    "Date",
    "GOT",
    "GPT",
    "LDH"
  ],
  "Patient": [
    "First Date",
    "ID",
    "SEX",
    "Birthday",
    "Description",
    "Admission"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.ID)
FROM Patient AS T1
INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID
WHERE T1.`First Date` >= '1990-01-01' AND T2.IGA > 80 AND T2.IGA < 500;
=====================
Question: For the patients with an abnormal Ig M level, what is the most common disease they are diagnosed with?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "IGM",
    "ID",
    "Date",
    "GOT",
    "GPT",
    "LDH"
  ],
  "Patient": [
    "Diagnosis",
    "ID",
    "SEX",
    "Birthday",
    "Description",
    "First Date"
  ],
  "Examination": [
    "ID",
    "Examination Date",
    "aCL IgG",
    "aCL IgM",
    "ANA",
    "ANA Pattern"
  ]
}
```
Final SQL (attempt 1): SELECT Diagnosis FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE IGM <= 40 OR IGM >= 400) GROUP BY Diagnosis ORDER BY COUNT(*) DESC LIMIT 1
=====================
Question: How many patients with a abnormal C-reactive protein don't have their data recorded?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "CRP",
    "ID",
    "Date",
    "GOT",
    "GPT",
    "LDH"
  ],
  "Patient": [
    "Description",
    "ID",
    "SEX",
    "Birthday",
    "First Date",
    "Admission"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRP = '+' AND T1.Description IS NULL
=====================
Question: Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "CRE",
    "Date",
    "GOT",
    "GPT",
    "LDH"
  ],
  "Patient": [
    "ID",
    "Birthday",
    "SEX",
    "Description",
    "First Date",
    "Admission"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.CRE >= 1.5 AND CAST(SUBSTR(DATE('now'), 1, 4) AS INTEGER) - CAST(SUBSTR(T2.Birthday, 1, 4) AS INTEGER) < 70
=====================
Question: How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "RNP",
    "ID",
    "Date",
    "GOT",
    "GPT",
    "LDH"
  ],
  "Patient": [
    "Admission",
    "ID",
    "SEX",
    "Birthday",
    "Description",
    "First Date"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.ID)
FROM Patient AS T1
INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID
WHERE T1.Admission = '+' AND (T2.RNP = '-' OR T2.RNP = '+-');
=====================
Question: Among the patients with normal anti-SM, how many of them does not have thrombosis?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "SM",
    "ID",
    "Date",
    "GOT",
    "GPT",
    "LDH"
  ],
  "Patient": [
    "ID",
    "SEX",
    "Birthday",
    "Description",
    "First Date",
    "Admission"
  ],
  "Examination": [
    "Thrombosis",
    "ID",
    "Examination Date",
    "aCL IgG",
    "aCL IgM",
    "ANA"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.ID)
FROM Laboratory AS T1
INNER JOIN Examination AS T2 ON T1.ID = T2.ID
WHERE T1.SM IN ('-', '+-') AND T2.Thrombosis = 0;
=====================
Question: Among the patients who has a normal anti-scl70, how many of them are female and does not have any symptom?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "SC170",
    "ID",
    "Date",
    "GOT",
    "GPT",
    "LDH"
  ],
  "Patient": [
    "SEX",
    "ID",
    "Birthday",
    "Description",
    "First Date",
    "Diagnosis"
  ],
  "Examination": [
    "Symptoms",
    "ID",
    "Examination Date",
    "aCL IgG",
    "aCL IgM",
    "ANA"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.ID)
FROM Patient AS T1
INNER JOIN Examination AS T2 ON T1.ID = T2.ID
INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID
WHERE T1.SEX = 'F'
AND T2.Symptoms IS NULL
AND T3.SC170 IN ('negative', '0');
=====================
Question: Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "CENTROMEA",
    "SSB",
    "Date",
    "GOT",
    "GPT"
  ],
  "Patient": [
    "ID",
    "SEX",
    "Birthday",
    "Description",
    "First Date",
    "Admission"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT count(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CENTROMEA IN ('-', '+-') AND T2.SSB IN ('-', '+-') AND T1.SEX = 'M'
=====================
Question: Among the patients who have an abnormal level of glutamic oxaloacetic transaminase, when was the youngest of them born?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "GOT",
    "Date",
    "GPT",
    "LDH",
    "ALP"
  ],
  "Patient": [
    "Birthday",
    "ID",
    "SEX",
    "Description",
    "First Date",
    "Diagnosis"
  ],
  "Examination": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT >= 60 ORDER BY T1.Birthday DESC LIMIT 1
=====================
Question: For the patients with a normal range of creatinine phosphokinase, how many of them have a positive measure of degree of coagulation?
 db_id: thrombosis_prediction
Selector: ```json
{
  "Laboratory": [
    "ID",
    "CPK",
    "Date",
    "GPT",
    "GOT",
    "LDH"
  ],
  "Patient": [
    "ID",
    "Diagnosis",
    "Admission",
    "First Date",
    "Description",
    "Birthday"
  ],
  "Examination": [
    "KCT",
    "RVVT",
    "LAC",
    "ID",
    "Examination Date",
    "Thrombosis"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.ID)
FROM Laboratory AS T1
INNER JOIN Examination AS T2 ON T1.ID = T2.ID
WHERE T1.CPK < 250 AND (T2.KCT = "+" OR T2.RVVT = "+" OR T2.LAC = "+");
=====================
Question: Give the name of the league had the most goals in the 2016 season?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": "drop_all",
  "Match": [
    "away_team_goal",
    "home_team_goal",
    "season",
    "league_id",
    "id",
    "date"
  ],
  "League": [
    "name",
    "id",
    "country_id"
  ],
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.name FROM League AS T1 JOIN Match AS T2 ON T1.id = T2.league_id WHERE T2.season = '2015/2016' GROUP BY T1.name ORDER BY sum(T2.home_team_goal + T2.away_team_goal) DESC LIMIT 1
=====================
Question: In Scotland Premier League, which away team won the most during the 2010 season?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": "drop_all",
  "Match": [
    "away_team_goal",
    "home_team_goal",
    "season",
    "league_id",
    "away_team_api_id",
    "id"
  ],
  "League": [
    "name",
    "id",
    "country_id"
  ],
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": [
    "team_long_name",
    "team_api_id",
    "id",
    "team_fifa_api_id",
    "team_short_name"
  ]
}
```
Final SQL (attempt 1): SELECT
  T1.team_long_name
FROM Team AS T1
INNER JOIN Match AS T2
  ON T1.team_api_id = T2.away_team_api_id
WHERE
  T2.league_id = (
    SELECT
      id
    FROM League
    WHERE
      name = 'Scotland Premier League'
  )
  AND T2.season = '2009/2010'
  AND T2.away_team_goal > T2.home_team_goal
GROUP BY
  T1.team_long_name
ORDER BY
  COUNT(T1.team_long_name) DESC
LIMIT 1;
=====================
Question: What are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": [
    "buildUpPlaySpeed",
    "buildUpPlaySpeedClass",
    "date",
    "team_fifa_api_id",
    "team_api_id",
    "id"
  ],
  "Player": "drop_all",
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": [
    "team_long_name",
    "team_short_name",
    "team_fifa_api_id",
    "team_api_id",
    "id"
  ]
}
```
Final SQL (attempt 1): SELECT
  buildUpPlaySpeed
FROM Team_Attributes
ORDER BY
  buildUpPlaySpeed DESC
LIMIT 4;
=====================
Question: Give the name of the league had the most matches end as draw in the 2016 season?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": "drop_all",
  "Match": [
    "season",
    "home_team_goal",
    "away_team_goal",
    "league_id",
    "id",
    "country_id"
  ],
  "League": [
    "name",
    "id",
    "country_id"
  ],
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.name
FROM League AS T1
INNER JOIN Match AS T2
  ON T1.id = T2.league_id
WHERE
  T2.season = '2015/2016' AND T2.home_team_goal = T2.away_team_goal
GROUP BY
  T1.name
ORDER BY
  COUNT(*) DESC
LIMIT 1;
=====================
Question: At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "birthday",
    "id",
    "player_api_id",
    "player_name",
    "player_fifa_api_id",
    "height"
  ],
  "Match": [
    "date",
    "id",
    "country_id",
    "league_id",
    "season",
    "stage"
  ],
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "sprint_speed",
    "player_api_id",
    "date",
    "player_fifa_api_id",
    "id",
    "overall_rating"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT DISTINCT
  CAST(STRFTIME('%Y', 'now') AS INTEGER) - CAST(STRFTIME('%Y', T1.birthday) AS INTEGER)
FROM Player AS T1
INNER JOIN Player_Attributes AS T2
  ON T1.player_api_id = T2.player_api_id
WHERE
  T2.sprint_speed >= 97 AND STRFTIME('%Y', T2.date) BETWEEN '2013' AND '2015';
=====================
Question: Give the name of the league with the highest matches of all time and how many matches were played in the said league.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": "drop_all",
  "Match": [
    "league_id",
    "id",
    "season",
    "stage",
    "date",
    "country_id"
  ],
  "League": [
    "name",
    "id",
    "country_id"
  ],
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.name,
  COUNT(T2.id)
FROM League AS T1
JOIN Match AS T2
  ON T1.id = T2.league_id
GROUP BY
  T1.name
ORDER BY
  COUNT(T2.id) DESC
LIMIT 1;
=====================
Question: Give the team_fifa_api_id of teams with more than 50 but less than 60 build-up play speed.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": [
    "team_fifa_api_id",
    "buildUpPlaySpeed",
    "id",
    "team_api_id",
    "date",
    "buildUpPlaySpeedClass"
  ],
  "Player": "drop_all",
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": [
    "team_fifa_api_id",
    "team_api_id",
    "id",
    "team_long_name",
    "team_short_name"
  ]
}
```
Final SQL (attempt 1): SELECT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60
=====================
Question: List the long name of teams with above-average build-up play passing in 2012.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": [
    "buildUpPlayPassing",
    "date",
    "team_api_id",
    "id",
    "team_fifa_api_id",
    "buildUpPlaySpeed"
  ],
  "Player": "drop_all",
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": [
    "team_long_name",
    "team_api_id",
    "id",
    "team_fifa_api_id",
    "team_short_name"
  ]
}
```
Final SQL (attempt 1): SELECT T1.team_long_name FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE STRFTIME('%Y', T2.date) = '2012' AND T2.buildUpPlayPassing > (SELECT avg(buildUpPlayPassing) FROM Team_Attributes WHERE STRFTIME('%Y', date) = '2012')
=====================
Question: Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "birthday",
    "id",
    "player_api_id",
    "player_fifa_api_id",
    "player_name",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "preferred_foot",
    "player_fifa_api_id",
    "player_api_id",
    "id",
    "date",
    "overall_rating"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  CAST(SUM(CASE WHEN T1.preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.player_api_id)
FROM Player_Attributes AS T1
INNER JOIN Player AS T2
  ON T1.player_api_id = T2.player_api_id
WHERE
  CAST(SUBSTR(T2.birthday, 1, 4) AS INTEGER) BETWEEN 1987 AND 1992;
=====================
Question: Find the average number of long-shot done by Ahmed Samir Farag.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "player_name",
    "player_api_id",
    "player_fifa_api_id",
    "id",
    "birthday",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "long_shots",
    "player_api_id",
    "player_fifa_api_id",
    "date",
    "id",
    "overall_rating"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT AVG(T2.long_shots) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = "Ahmed Samir Farag"
=====================
Question: List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "height",
    "player_name",
    "id",
    "player_api_id",
    "player_fifa_api_id",
    "birthday"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "heading_accuracy",
    "player_fifa_api_id",
    "player_api_id",
    "date",
    "overall_rating",
    "potential"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.player_name
FROM Player AS T1
INNER JOIN Player_Attributes AS T2
  ON T1.player_api_id = T2.player_api_id
WHERE
  T1.height > 180
GROUP BY
  T1.player_name
ORDER BY
  AVG(T2.heading_accuracy) DESC
LIMIT 10;
=====================
Question: List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": "drop_all",
  "Match": [
    "home_team_goal",
    "away_team_goal",
    "season",
    "league_id",
    "id",
    "date"
  ],
  "League": [
    "name",
    "id",
    "country_id"
  ],
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.name
FROM League AS T1
JOIN Match AS T2
  ON T1.id = T2.league_id
WHERE
  T2.season = '2009/2010'
GROUP BY
  T1.name
HAVING
  AVG(T2.home_team_goal) > AVG(T2.away_team_goal);
=====================
Question: List the football players with a birthyear of 1970 and a birthmonth of October.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "birthday",
    "player_name",
    "player_api_id",
    "player_fifa_api_id",
    "id",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT player_name
FROM Player
WHERE substr(birthday, 1, 4) = '1970' AND substr(birthday, 6, 2) = '10';
=====================
Question: What is the overall rating of the football player Gabriel Tamas in year 2011?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "player_name",
    "id",
    "player_api_id",
    "player_fifa_api_id",
    "birthday",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "overall_rating",
    "date",
    "player_api_id",
    "player_fifa_api_id",
    "id",
    "potential"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  PA.overall_rating
FROM Player AS P
JOIN Player_Attributes AS PA
  ON P.player_api_id = PA.player_api_id
WHERE
  P.player_name = 'Gabriel Tamas' AND STRFTIME('%Y', PA.date) = '2011';
=====================
Question: Calculate the average home team goal in the 2010/2011 season in the country of Poland.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": "drop_all",
  "Match": [
    "home_team_goal",
    "season",
    "country_id",
    "id",
    "date",
    "stage"
  ],
  "League": [
    "country_id",
    "id",
    "name"
  ],
  "Country": [
    "name",
    "id"
  ],
  "Player_Attributes": "drop_all",
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT AVG(M.home_team_goal)
FROM Match AS M
JOIN Country AS C ON M.country_id = C.id
WHERE C.name = 'Poland' AND M.season = '2010/2011';
=====================
Question: Who has the highest average finishing rate between the highest and shortest football player?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "height",
    "player_name",
    "weight",
    "birthday",
    "player_fifa_api_id",
    "player_api_id"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "finishing",
    "player_api_id",
    "player_fifa_api_id",
    "potential",
    "overall_rating",
    "date"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 3): SELECT
  P.player_name
FROM Player AS P
JOIN Player_Attributes AS PA
  ON P.player_api_id = PA.player_api_id
WHERE
  P.height IN (
    (
      SELECT
        MAX(height)
      FROM Player
    ),
    (
      SELECT
        MIN(height)
      FROM Player
    )
  )
GROUP BY
  P.player_name
ORDER BY
  AVG(PA.finishing) DESC
LIMIT 1;
=====================
Question: From 2010 to 2015, what was the average overall rating of players who are higher than 170?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "height",
    "id",
    "player_api_id",
    "player_name",
    "player_fifa_api_id",
    "birthday"
  ],
  "Match": [
    "date",
    "id",
    "country_id",
    "league_id",
    "season",
    "stage"
  ],
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "overall_rating",
    "date",
    "player_api_id",
    "player_fifa_api_id",
    "id",
    "potential"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.height > 170 AND STRFTIME('%Y', T1.date) BETWEEN '2010' AND '2015'
=====================
Question: What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye
?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "player_name",
    "id",
    "player_api_id",
    "player_fifa_api_id",
    "birthday",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "ball_control",
    "player_api_id",
    "player_fifa_api_id",
    "id",
    "date",
    "overall_rating"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  (
    SELECT
      AVG(T1.ball_control)
    FROM Player_Attributes AS T1
    INNER JOIN Player AS T2
      ON T1.player_api_id = T2.player_api_id
    WHERE
      T2.player_name = 'Abdou Diallo'
  ) - (
    SELECT
      AVG(T1.ball_control)
    FROM Player_Attributes AS T1
    INNER JOIN Player AS T2
      ON T1.player_api_id = T2.player_api_id
    WHERE
      T2.player_name = 'Aaron Appindangoye'
  );
=====================
Question: Which player is older, Aaron Lennon or Abdelaziz Barrada?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "birthday",
    "player_name",
    "player_api_id",
    "player_fifa_api_id",
    "id",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  CASE
    WHEN (
      SELECT
        birthday
      FROM Player
      WHERE
        player_name = 'Aaron Lennon'
    ) < (
      SELECT
        birthday
      FROM Player
      WHERE
        player_name = 'Abdelaziz Barrada'
    )
    THEN 'Aaron Lennon'
    ELSE 'Abdelaziz Barrada'
  END;
=====================
Question: Which player is the tallest?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "height",
    "player_name",
    "player_api_id",
    "player_fifa_api_id",
    "id",
    "weight"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  player_name
FROM Player
WHERE
  height = (
    SELECT
      MAX(height)
    FROM Player
  );
=====================
Question: Among the players whose preferred foot was the left foot when attacking, how many of them would remain in his position when the team attacked?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": "keep_all",
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "attacking_work_rate",
    "preferred_foot",
    "player_api_id",
    "player_fifa_api_id",
    "overall_rating",
    "potential"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(*)
FROM Player_Attributes
WHERE preferred_foot = 'left' AND attacking_work_rate = 'low';
=====================
Question: Among the players born before the year 1986, how many of them would remain in his position and defense while the team attacked?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "birthday",
    "player_api_id",
    "player_name",
    "player_fifa_api_id",
    "height",
    "weight"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "defensive_work_rate",
    "player_api_id",
    "player_fifa_api_id",
    "date",
    "overall_rating",
    "potential"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.player_api_id)
FROM Player AS T1
INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id
WHERE T2.defensive_work_rate = 'high' AND strftime('%Y', T1.birthday) < '1986'
=====================
Question: Please list the names of the players whose volley score and dribbling score are over 70.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "player_name",
    "id",
    "player_api_id",
    "player_fifa_api_id",
    "birthday",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "dribbling",
    "volleys",
    "player_api_id",
    "player_fifa_api_id",
    "date",
    "id"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT DISTINCT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.volleys > 70 AND T2.dribbling > 70
=====================
Question: How many matches were held in the Belgium Jupiler League in April, 2009?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": "drop_all",
  "Match": [
    "date",
    "league_id",
    "id",
    "country_id",
    "season",
    "stage"
  ],
  "League": [
    "name",
    "id",
    "country_id"
  ],
  "Country": "keep_all",
  "Player_Attributes": "drop_all",
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(M.id) FROM Match AS M JOIN League AS L ON M.league_id = L.id WHERE L.name = "Belgium Jupiler League" AND SUBSTR(M.date, 1, 7) = "2009-04"
=====================
Question: Give the name of the league had the most matches in the 2008/2009 season?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": "drop_all",
  "Match": [
    "season",
    "league_id",
    "id",
    "country_id",
    "stage",
    "date"
  ],
  "League": [
    "name",
    "id",
    "country_id"
  ],
  "Country": "keep_all",
  "Player_Attributes": "drop_all",
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.name FROM League AS T1 JOIN Match AS T2 ON T1.id = T2.league_id WHERE T2.season = '2008/2009' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1
=====================
Question: How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "player_name",
    "id",
    "player_api_id",
    "player_fifa_api_id",
    "birthday",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "overall_rating",
    "player_api_id",
    "player_fifa_api_id",
    "id",
    "date",
    "potential"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  CAST(
    (
      (
        SELECT
          overall_rating
        FROM Player_Attributes
        WHERE
          player_api_id = (
            SELECT
              player_api_id
            FROM Player
            WHERE
              player_name = 'Ariel Borysiuk'
          )
        ORDER BY
          date DESC
        LIMIT 1
      ) - (
        SELECT
          overall_rating
        FROM Player_Attributes
        WHERE
          player_api_id = (
            SELECT
              player_api_id
            FROM Player
            WHERE
              player_name = 'Paulin Puel'
          )
        ORDER BY
          date DESC
        LIMIT 1
      )
    ) AS REAL
  ) * 100 / (
    SELECT
      overall_rating
    FROM Player_Attributes
    WHERE
      player_api_id = (
        SELECT
          player_api_id
        FROM Player
        WHERE
          player_name = 'Paulin Puel'
      )
    ORDER BY
      date DESC
    LIMIT 1
  );
=====================
Question: Calculate the average overall rating of Pietro Marino.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "player_name",
    "id",
    "player_api_id",
    "player_fifa_api_id",
    "birthday",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "overall_rating",
    "player_api_id",
    "player_fifa_api_id",
    "date",
    "id",
    "potential"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = "Pietro Marino"
=====================
Question: What is Ajax's highest chance creation passing score and what is it classified as?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": [
    "chanceCreationPassing",
    "chanceCreationPassingClass",
    "team_api_id",
    "id",
    "date",
    "buildUpPlaySpeed"
  ],
  "Player": "drop_all",
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": [
    "team_long_name",
    "team_api_id",
    "id",
    "team_fifa_api_id",
    "team_short_name"
  ]
}
```
Final SQL (attempt 1): SELECT MAX(T1.chanceCreationPassing), T1.chanceCreationPassingClass
FROM Team_Attributes AS T1
INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id
WHERE T2.team_long_name = 'Ajax'
=====================
Question: For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "birthday",
    "player_name",
    "player_api_id",
    "player_fifa_api_id",
    "weight",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "overall_rating",
    "date",
    "player_api_id",
    "player_fifa_api_id",
    "potential",
    "preferred_foot",
    "id"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.player_name
FROM Player AS T1
INNER JOIN Player_Attributes AS T2
  ON T1.player_api_id = T2.player_api_id
WHERE
  T2.overall_rating = 77 AND T2.date LIKE '2016-06-23%'
ORDER BY
  T1.birthday
LIMIT 1;
=====================
Question: What was the overall rating for Aaron Mooy on 2016/2/4?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "player_name",
    "id",
    "player_api_id",
    "player_fifa_api_id",
    "birthday",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "overall_rating",
    "date",
    "player_api_id",
    "player_fifa_api_id",
    "id",
    "potential"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  pa.overall_rating
FROM Player AS p
JOIN Player_Attributes AS pa
  ON p.player_api_id = pa.player_api_id
WHERE
  p.player_name = 'Aaron Mooy' AND pa.date LIKE '2016-02-04%';
=====================
Question: How was Francesco Migliore's attacking work rate on 2015/5/1?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "player_name",
    "player_api_id",
    "player_fifa_api_id",
    "id",
    "weight",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "attacking_work_rate",
    "date",
    "player_api_id",
    "player_fifa_api_id",
    "id",
    "potential"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.attacking_work_rate
FROM Player_Attributes AS T1
INNER JOIN Player AS T2
  ON T1.player_api_id = T2.player_api_id
WHERE
  T2.player_name = 'Francesco Migliore' AND T1.date LIKE '2015-05-01%';
=====================
Question: When was the first time did Kevin Constant have his highest crossing score? Give the date.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "player_name",
    "player_api_id",
    "id",
    "player_fifa_api_id",
    "birthday",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "crossing",
    "player_api_id",
    "date",
    "id",
    "player_fifa_api_id",
    "overall_rating"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  date
FROM Player_Attributes
WHERE
  player_api_id = (
    SELECT
      player_api_id
    FROM Player
    WHERE
      player_name = 'Kevin Constant'
  )
ORDER BY
  crossing DESC,
  date ASC
LIMIT 1;
=====================
Question: Tell the build Up play passing class for "FC Lorient" on 2010/2/22.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": [
    "buildUpPlayPassingClass",
    "date",
    "team_api_id",
    "team_fifa_api_id",
    "buildUpPlaySpeed",
    "buildUpPlaySpeedClass"
  ],
  "Player": "drop_all",
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": [
    "team_long_name",
    "team_api_id",
    "team_fifa_api_id",
    "team_short_name",
    "id"
  ]
}
```
Final SQL (attempt 1): SELECT
  T1.buildUpPlayPassingClass
FROM Team_Attributes AS T1
INNER JOIN Team AS T2
  ON T1.team_api_id = T2.team_api_id
WHERE
  T2.team_long_name = 'FC Lorient' AND T1.date LIKE '2010-02-22%';
=====================
Question: For the team "Hannover 96", what was its defence aggression class on 2015/9/10?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": [
    "defenceAggressionClass",
    "date",
    "team_api_id",
    "id",
    "team_fifa_api_id",
    "defenceAggression"
  ],
  "Player": "drop_all",
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": [
    "team_long_name",
    "team_api_id",
    "id",
    "team_fifa_api_id",
    "team_short_name"
  ]
}
```
Final SQL (attempt 1): SELECT
  T1.defenceAggressionClass
FROM Team_Attributes AS T1
INNER JOIN Team AS T2
  ON T1.team_api_id = T2.team_api_id
WHERE
  T2.team_long_name = 'Hannover 96' AND T1.date LIKE '2015-09-10%'
=====================
Question: What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "player_name",
    "id",
    "player_api_id",
    "player_fifa_api_id",
    "birthday",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "overall_rating",
    "date",
    "player_api_id",
    "player_fifa_api_id",
    "id",
    "potential"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = "Marko Arnautovic" AND T1.date BETWEEN '2007-02-22' AND '2016-04-21'
=====================
Question: What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "player_name",
    "id",
    "player_api_id",
    "player_fifa_api_id",
    "birthday",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "overall_rating",
    "player_api_id",
    "player_fifa_api_id",
    "date",
    "id",
    "potential"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  CAST(SUM(CASE WHEN T2.player_name = 'Landon Donovan' THEN T1.overall_rating ELSE 0 END - CASE WHEN T2.player_name = 'Jordan Bowery' THEN T1.overall_rating ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.player_name = 'Landon Donovan' THEN T1.overall_rating ELSE 0 END)
FROM Player_Attributes AS T1
INNER JOIN Player AS T2
  ON T1.player_api_id = T2.player_api_id
WHERE
  T1.date = '2013-07-12' AND T2.player_name IN ('Landon Donovan', 'Jordan Bowery');
=====================
Question: List down most tallest players' name.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "height",
    "player_name",
    "weight",
    "birthday",
    "player_api_id",
    "player_fifa_api_id"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT player_name
FROM Player
ORDER BY height DESC
LIMIT 1;
=====================
Question: State the name of the most strongest player.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "player_name",
    "id",
    "player_api_id",
    "player_fifa_api_id",
    "birthday",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "overall_rating",
    "player_api_id",
    "player_fifa_api_id",
    "id",
    "strength",
    "stamina"
  ],
  "Team": "keep_all"
}
```
Final SQL (attempt 1): SELECT
  p.player_name
FROM Player AS p
JOIN Player_Attributes AS pa
  ON p.player_api_id = pa.player_api_id
WHERE
  pa.overall_rating = (
    SELECT
      MAX(overall_rating)
    FROM Player_Attributes
  );
=====================
Question: Who are the players that tend to be attacking when their mates were doing attack moves? List down their name.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "player_name",
    "id",
    "player_api_id",
    "player_fifa_api_id",
    "birthday",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "attacking_work_rate",
    "player_api_id",
    "player_fifa_api_id",
    "id",
    "date",
    "overall_rating"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT DISTINCT T1.player_name
FROM Player AS T1
INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id
WHERE T2.attacking_work_rate = 'high';
=====================
Question: What are the short name of team who played safe while creating chance of passing?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": [
    "chanceCreationPassingClass",
    "team_api_id",
    "id",
    "team_fifa_api_id",
    "date",
    "buildUpPlaySpeed"
  ],
  "Player": "drop_all",
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": [
    "team_short_name",
    "team_api_id",
    "id",
    "team_fifa_api_id",
    "team_long_name"
  ]
}
```
Final SQL (attempt 1): SELECT
  T2.team_short_name
FROM Team_Attributes AS T1
INNER JOIN Team AS T2
  ON T1.team_api_id = T2.team_api_id
WHERE
  T1.chanceCreationPassingClass = 'Safe'
GROUP BY
  T2.team_short_name;
=====================
Question: How many football players born after the 1990s have the first name "Aaron"?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "player_name",
    "birthday",
    "id",
    "player_api_id",
    "player_fifa_api_id",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(id)
FROM Player
WHERE player_name LIKE 'Aaron%' AND birthday > '1990-12-31'
=====================
Question: What is the difference between players 6 and 23's jumping scores?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "id",
    "player_api_id",
    "player_fifa_api_id",
    "player_name",
    "height",
    "weight"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "jumping",
    "player_api_id",
    "player_fifa_api_id",
    "id",
    "overall_rating",
    "potential"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  (
    SELECT
      jumping
    FROM Player_Attributes
    WHERE
      player_api_id = (
        SELECT
          player_api_id
        FROM Player
        WHERE
          id = 6
      )
    ORDER BY
      date DESC
    LIMIT 1
  ) - (
    SELECT
      jumping
    FROM Player_Attributes
    WHERE
      player_api_id = (
        SELECT
          player_api_id
        FROM Player
        WHERE
          id = 23
      )
    ORDER BY
      date DESC
    LIMIT 1
  );
=====================
Question: Please provide top four football players' IDs who are among the lowest potential players and prefer to use the right foot when attacking.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "id",
    "player_api_id",
    "player_name",
    "player_fifa_api_id",
    "birthday",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "potential",
    "player_api_id",
    "player_fifa_api_id",
    "preferred_foot",
    "overall_rating",
    "date"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT player_api_id
FROM Player_Attributes
WHERE potential = (SELECT MIN(potential) FROM Player_Attributes) AND preferred_foot = 'right'
LIMIT 4;
=====================
Question: How many players had the highest potential score for crossing that preferred to use their left foots while attacking?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "id",
    "player_api_id",
    "player_name",
    "player_fifa_api_id",
    "birthday",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "crossing",
    "potential",
    "preferred_foot",
    "player_api_id",
    "player_fifa_api_id",
    "date"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(T1.player_api_id) FROM Player_Attributes AS T1 INNER JOIN (SELECT MAX(crossing) AS max_crossing FROM Player_Attributes WHERE preferred_foot = 'left') AS T2 ON T1.crossing = T2.max_crossing WHERE T1.preferred_foot = 'left'
=====================
Question: What was the final score for the match on September 24, 2008, in the Belgian Jupiler League between the home team and the away team?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": "drop_all",
  "Match": [
    "date",
    "home_team_goal",
    "away_team_goal",
    "league_id",
    "id",
    "season"
  ],
  "League": [
    "name",
    "id",
    "country_id"
  ],
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.home_team_goal,
  T1.away_team_goal
FROM Match AS T1
INNER JOIN League AS T2
  ON T1.league_id = T2.id
WHERE
  T2.name = 'Belgium Jupiler League' AND T1.date LIKE '2008-09-24%';
=====================
Question: Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": [
    "buildUpPlaySpeedClass",
    "team_api_id",
    "buildUpPlaySpeed",
    "date",
    "id",
    "team_fifa_api_id"
  ],
  "Player": "drop_all",
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": "drop_all",
  "Team": [
    "team_long_name",
    "team_api_id",
    "id",
    "team_fifa_api_id",
    "team_short_name"
  ]
}
```
Final SQL (attempt 1): SELECT
  T1.buildUpPlaySpeedClass
FROM Team_Attributes AS T1
INNER JOIN Team AS T2
  ON T1.team_api_id = T2.team_api_id
WHERE
  T2.team_long_name = 'KSV Cercle Brugge'
LIMIT 1;
=====================
Question: Please state the finishing rate and curve score of the player who has the heaviest weight.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "weight",
    "id",
    "player_api_id",
    "player_name",
    "player_fifa_api_id",
    "birthday"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "finishing",
    "curve",
    "player_api_id",
    "id",
    "player_fifa_api_id",
    "date"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT T2.finishing, T2.curve FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.weight = ( SELECT max(weight) FROM Player )
=====================
Question: Which top 4 leagues had the most games in the 2015-2016 season?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": "drop_all",
  "Match": [
    "season",
    "league_id",
    "id",
    "date",
    "country_id",
    "stage"
  ],
  "League": [
    "name",
    "id",
    "country_id"
  ],
  "Country": [
    "name",
    "id"
  ],
  "Player_Attributes": "drop_all",
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T2.name
FROM Match AS T1
INNER JOIN League AS T2
  ON T1.league_id = T2.id
WHERE
  T1.season = '2015/2016'
GROUP BY
  T2.name
ORDER BY
  COUNT(T1.id) DESC
LIMIT 4;
=====================
Question: Please provide the full name of the away team that scored the most goals.
 db_id: european_football_2
Selector: ```json
{
  "Team": [
    "team_long_name",
    "team_api_id",
    "id",
    "team_fifa_api_id",
    "team_short_name"
  ],
  "Match": [
    "away_team_goal",
    "away_team_api_id",
    "id",
    "home_team_goal",
    "home_team_api_id",
    "league_id"
  ],
  "League": "keep_all",
  "Country": "keep_all",
  "Player": "drop_all",
  "Player_Attributes": "drop_all",
  "Team_Attributes": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_api_id = T2.away_team_api_id WHERE T2.away_team_goal = (SELECT MAX(away_team_goal) FROM Match)
=====================
Question: Please name one player whose overall strength is the greatest.
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "player_name",
    "id",
    "player_api_id",
    "player_fifa_api_id",
    "birthday",
    "height"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "overall_rating",
    "player_api_id",
    "player_fifa_api_id",
    "id",
    "potential",
    "date"
  ],
  "Team": "keep_all"
}
```
Final SQL (attempt 1): SELECT
  T1.player_name
FROM Player AS T1
INNER JOIN Player_Attributes AS T2
  ON T1.player_api_id = T2.player_api_id
WHERE
  T2.overall_rating = (
    SELECT
      MAX(overall_rating)
    FROM Player_Attributes
  )
LIMIT 1;
=====================
Question: What is the percentage of players that are under 180 cm who have an overall strength of more than 70?
 db_id: european_football_2
Selector: ```json
{
  "Team_Attributes": "drop_all",
  "Player": [
    "id",
    "height",
    "player_api_id",
    "player_fifa_api_id",
    "player_name",
    "birthday"
  ],
  "Match": "drop_all",
  "League": "drop_all",
  "Country": "drop_all",
  "Player_Attributes": [
    "overall_rating",
    "strength",
    "player_api_id",
    "player_fifa_api_id",
    "date",
    "id"
  ],
  "Team": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T1.height < 180 AND T2.overall_rating > 70 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id
=====================
Question: Please list the reference names of the drivers who are eliminated in the first period in race number 20.
 db_id: formula_1
Selector: ```json
{
  "drivers": [
    "driverId",
    "driverRef",
    "forename",
    "surname",
    "nationality",
    "dob"
  ],
  "qualifying": [
    "raceId",
    "driverId",
    "q1",
    "qualifyId",
    "constructorId",
    "number"
  ],
  "races": [
    "raceId",
    "year",
    "round",
    "circuitId",
    "name",
    "date"
  ],
  "status": "drop_all",
  "circuits": "drop_all",
  "driverStandings": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.driverRef FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 20 ORDER BY T2.q1 DESC LIMIT 5
=====================
Question: What is the surname of the driver with the best lap time in race number 19 in the second qualifying period?
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": [
    "driverId",
    "surname",
    "forename",
    "driverRef",
    "number",
    "code"
  ],
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "year",
    "round",
    "circuitId",
    "name",
    "date"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": [
    "raceId",
    "q2",
    "driverId",
    "qualifyId",
    "constructorId",
    "number"
  ],
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 19 AND T2.q2 IS NOT NULL ORDER BY T2.q2 ASC LIMIT 1
=====================
Question: Please give the name of the race held on the circuits in Germany.
 db_id: formula_1
Selector: ```json
{
  "circuits": [
    "country",
    "name",
    "circuitId",
    "circuitRef",
    "location",
    "lat"
  ],
  "races": [
    "name",
    "circuitId",
    "raceId",
    "year",
    "round",
    "date"
  ],
  "status": "drop_all",
  "drivers": "drop_all",
  "driverStandings": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.name
FROM races AS T1
INNER JOIN circuits AS T2
  ON T1.circuitId = T2.circuitId
WHERE
  T2.country = 'Germany';
=====================
Question: What is the coordinates location of the circuits for Australian grand prix?
 db_id: formula_1
Selector: ```json
{
  "circuits": [
    "circuitId",
    "circuitRef",
    "name",
    "location",
    "country",
    "lat",
    "lng"
  ],
  "status": [
    "statusId",
    "status"
  ],
  "drivers": [
    "driverId",
    "driverRef",
    "number",
    "code",
    "forename",
    "surname"
  ],
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "year",
    "round",
    "circuitId",
    "name",
    "date"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Australian Grand Prix'
=====================
Question: Give the coordinate position for Abu Dhabi Grand Prix.
 db_id: formula_1
Selector: ```json
{
  "circuits": [
    "circuitId",
    "lat",
    "lng",
    "name",
    "location",
    "country"
  ],
  "races": [
    "raceId",
    "circuitId",
    "name",
    "year",
    "round",
    "date"
  ],
  "drivers": "drop_all",
  "driverStandings": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "status": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.lat,
  T1.lng
FROM circuits AS T1
INNER JOIN races AS T2
  ON T1.circuitId = T2.circuitId
WHERE
  T2.name = 'Abu Dhabi Grand Prix';
=====================
Question: What's Bruno Senna's Q1 result in the qualifying race No. 354?
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": [
    "driverId",
    "forename",
    "surname",
    "driverRef",
    "number",
    "code"
  ],
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "year",
    "round",
    "circuitId",
    "name",
    "date"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": [
    "raceId",
    "driverId",
    "q1",
    "qualifyId",
    "constructorId",
    "number"
  ],
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.q1
FROM qualifying AS T1
INNER JOIN drivers AS T2
  ON T1.driverId = T2.driverId
WHERE
  T2.forename = 'Bruno' AND T2.surname = 'Senna' AND T1.raceId = 354;
=====================
Question: What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903?
 db_id: formula_1
Selector: ```json
{
  "qualifying": [
    "raceId",
    "q3",
    "number",
    "driverId",
    "qualifyId",
    "constructorId"
  ],
  "races": [
    "raceId",
    "year",
    "round",
    "circuitId",
    "name",
    "date"
  ],
  "drivers": [
    "driverId",
    "driverRef",
    "number",
    "code",
    "forename",
    "surname"
  ],
  "circuits": "drop_all",
  "status": "drop_all",
  "driverStandings": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.number FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 903 AND T2.q3 = '1:54.000'
=====================
Question: For the Bahrain Grand Prix in 2007, how many drivers not finished the game?
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": [
    "statusId",
    "status"
  ],
  "drivers": [
    "driverId",
    "driverRef",
    "number",
    "code",
    "forename",
    "surname"
  ],
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "name",
    "year",
    "round",
    "circuitId",
    "date"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": [
    "raceId",
    "driverId",
    "statusId",
    "resultId",
    "constructorId",
    "number"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(T1.driverId) FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId JOIN status AS T3 ON T1.statusId = T3.statusId WHERE T2.name = "Bahrain Grand Prix" AND T2.year = 2007 AND T3.status != "Finished"
=====================
Question: For all the drivers who finished the game in race No. 592, who is the oldest?
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": [
    "driverId",
    "dob",
    "driverRef",
    "forename",
    "surname",
    "nationality"
  ],
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "year",
    "round",
    "circuitId",
    "name",
    "date"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": [
    "raceId",
    "driverId",
    "resultId",
    "constructorId",
    "number",
    "grid"
  ]
}
```
Final SQL (attempt 1): SELECT T1.driverRef FROM drivers AS T1 JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 592 AND T2.time IS NOT NULL ORDER BY T1.dob ASC LIMIT 1
=====================
Question: Who was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website.
 db_id: formula_1
Selector: ```json
{
  "lapTimes": [
    "raceId",
    "driverId",
    "time",
    "lap",
    "position",
    "milliseconds"
  ],
  "drivers": [
    "driverId",
    "url",
    "driverRef",
    "forename",
    "surname",
    "number"
  ],
  "races": [
    "raceId",
    "year",
    "round",
    "circuitId",
    "name",
    "date"
  ],
  "circuits": "drop_all",
  "status": "drop_all",
  "driverStandings": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.url FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 161 AND T2.time = '1:27.052'
=====================
Question: Where is Malaysian Grand Prix held? Give the location coordinates.
 db_id: formula_1
Selector: ```json
{
  "circuits": [
    "circuitId",
    "name",
    "location",
    "country",
    "lat",
    "lng",
    "circuitRef"
  ],
  "status": "drop_all",
  "drivers": "drop_all",
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "circuitId",
    "name",
    "year",
    "round",
    "date"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.lat,
  T1.lng
FROM circuits AS T1
INNER JOIN races AS T2
  ON T1.circuitId = T2.circuitId
WHERE
  T2.name = 'Malaysian Grand Prix';
=====================
Question: For the constructor which got the highest point in the race No. 9 , what is its introduction website?
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": "drop_all",
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "year",
    "round",
    "name",
    "circuitId",
    "date"
  ],
  "constructors": [
    "url",
    "constructorId",
    "name",
    "constructorRef",
    "nationality",
    "wins"
  ],
  "constructorResults": [
    "points",
    "raceId",
    "constructorId",
    "constructorResultsId",
    "status"
  ],
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT T2.url FROM constructorResults AS T1 JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 9 ORDER BY T1.points DESC LIMIT 1
=====================
Question: In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": [
    "driverId",
    "code",
    "driverRef",
    "forename",
    "surname",
    "number"
  ],
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "year",
    "round",
    "circuitId",
    "name",
    "date"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": [
    "raceId",
    "driverId",
    "q3",
    "qualifyId",
    "constructorId",
    "number"
  ],
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T2.code
FROM qualifying AS T1
INNER JOIN drivers AS T2
  ON T1.driverId = T2.driverId
WHERE
  T1.raceId = 45 AND T1.q3 = '1:33.049';
=====================
Question: Show me the season page of year when the race No. 901 took place.
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": "drop_all",
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "url",
    "year",
    "name",
    "round",
    "circuitId"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": [
    "year",
    "url"
  ],
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.url
FROM seasons AS T1
INNER JOIN races AS T2
  ON T1.year = T2.year
WHERE
  T2.raceId = 901;
=====================
Question: For all the drivers who finished the game in race No. 872, who is the youngest?
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": [
    "dob",
    "driverId",
    "driverRef",
    "number",
    "code",
    "forename"
  ],
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "year",
    "round",
    "circuitId",
    "name",
    "date"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": [
    "raceId",
    "driverId",
    "time",
    "resultId",
    "constructorId",
    "number"
  ]
}
```
Final SQL (attempt 1): SELECT forename, surname FROM drivers WHERE driverId IN (SELECT driverId FROM results WHERE raceId = 872 AND time IS NOT NULL) ORDER BY dob DESC LIMIT 1
=====================
Question: For the driver who set the fastest lap speed, what is his nationality?
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": [
    "driverId",
    "nationality",
    "driverRef",
    "forename",
    "surname",
    "dob"
  ],
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "year",
    "round",
    "circuitId",
    "name",
    "date"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": [
    "fastestLapSpeed",
    "driverId",
    "raceId",
    "resultId",
    "constructorId",
    "number"
  ]
}
```
Final SQL (attempt 1): SELECT T2.nationality FROM results AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.fastestLapSpeed DESC LIMIT 1
=====================
Question: Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?
 db_id: formula_1
Selector: ```json
{
  "drivers": [
    "driverId",
    "forename",
    "surname",
    "driverRef",
    "nationality",
    "dob"
  ],
  "races": [
    "raceId",
    "year",
    "round",
    "circuitId",
    "name",
    "date"
  ],
  "results": [
    "resultId",
    "raceId",
    "driverId",
    "fastestLapSpeed",
    "fastestLapTime",
    "fastestLap"
  ],
  "circuits": "drop_all",
  "status": "drop_all",
  "driverStandings": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  CAST(
    (
      (
        SELECT
          fastestLapSpeed
        FROM results
        WHERE
          raceId = 853
          AND driverId = (
            SELECT
              driverId
            FROM drivers
            WHERE
              forename = 'Paul' AND surname = 'di Resta'
          )
      ) - (
        SELECT
          fastestLapSpeed
        FROM results
        WHERE
          raceId = 854
          AND driverId = (
            SELECT
              driverId
            FROM drivers
            WHERE
              forename = 'Paul' AND surname = 'di Resta'
          )
      )
    ) * 100 AS REAL
  ) / (
    SELECT
      fastestLapSpeed
    FROM results
    WHERE
      raceId = 853
      AND driverId = (
        SELECT
          driverId
        FROM drivers
        WHERE
          forename = 'Paul' AND surname = 'di Resta'
      )
  );
=====================
Question: For the drivers who took part in the race in 1983/7/16, what's their race completion rate?
 db_id: formula_1
Selector: ```json
{
  "drivers": [
    "driverId",
    "driverRef",
    "number",
    "code",
    "forename",
    "surname"
  ],
  "races": [
    "raceId",
    "year",
    "round",
    "circuitId",
    "name",
    "date"
  ],
  "results": [
    "resultId",
    "raceId",
    "driverId",
    "constructorId",
    "number",
    "grid"
  ],
  "status": "keep_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(driverId) AS percentage FROM results WHERE raceId = (SELECT raceId FROM races WHERE DATE = '1983-07-16')
=====================
Question: List the names of all races that occurred in the earliest recorded year and month.
 db_id: formula_1
Selector: ```json
{
  "races": [
    "date",
    "raceId",
    "year",
    "name",
    "round",
    "circuitId"
  ],
  "seasons": [
    "year",
    "url"
  ],
  "circuits": [
    "circuitId",
    "circuitRef",
    "name",
    "location",
    "country",
    "lat"
  ],
  "status": "drop_all",
  "drivers": "drop_all",
  "driverStandings": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT name FROM races WHERE STRFTIME('%Y', date) = (SELECT STRFTIME('%Y', MIN(date)) FROM races) AND STRFTIME('%m', date) = (SELECT STRFTIME('%m', MIN(date)) FROM races)
=====================
Question: State the driver with the most points scored. Find his full name with that points.
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": [
    "driverId",
    "surname",
    "forename",
    "driverRef",
    "number",
    "code"
  ],
  "driverStandings": [
    "points",
    "driverId",
    "raceId",
    "driverStandingsId",
    "position",
    "positionText"
  ],
  "races": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId ORDER BY T2.points DESC LIMIT 1
=====================
Question: What is the best lap time recorded? List the driver and race with such recorded lap time.
 db_id: formula_1
Selector: ```json
{
  "lapTimes": [
    "raceId",
    "driverId",
    "milliseconds",
    "time",
    "lap",
    "position",
    "keep_all"
  ],
  "drivers": [
    "driverId",
    "forename",
    "surname",
    "driverRef",
    "number",
    "code",
    "keep_all"
  ],
  "races": [
    "raceId",
    "name",
    "year",
    "round",
    "circuitId",
    "date",
    "keep_all"
  ],
  "circuits": "drop_all",
  "status": "drop_all",
  "driverStandings": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT T2.forename, T2.surname, T3.name FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T1.milliseconds = ( SELECT min( milliseconds ) FROM lapTimes ) LIMIT 1
=====================
Question: What is the average lap time for Lewis Hamilton in the 2009 Malaysian Grand Prix?
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": [
    "driverId",
    "surname",
    "forename",
    "driverRef",
    "number",
    "code"
  ],
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "name",
    "year",
    "circuitId",
    "round",
    "date"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": [
    "milliseconds",
    "raceId",
    "driverId",
    "lap",
    "position",
    "time"
  ],
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "keep_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT AVG(milliseconds)
FROM lapTimes
WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')
AND raceId = (SELECT raceId FROM races WHERE year = 2009 AND name = 'Malaysian Grand Prix');
=====================
Question: Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010.
 db_id: formula_1
Selector: ```json
{
  "drivers": [
    "surname",
    "driverId",
    "driverRef",
    "forename",
    "nationality",
    "dob"
  ],
  "races": [
    "raceId",
    "year",
    "name",
    "round",
    "circuitId",
    "date"
  ],
  "results": [
    "raceId",
    "driverId",
    "position",
    "resultId",
    "constructorId",
    "points"
  ],
  "driverStandings": "drop_all",
  "circuits": "drop_all",
  "status": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T2.position > 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.raceId) FROM races AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.surname = "Hamilton" AND T1.year >= 2010
=====================
Question: Name the driver with the most winning. Mention his nationality and what is his maximum point scores.
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": [
    "driverId",
    "forename",
    "surname",
    "nationality",
    "driverRef",
    "code"
  ],
  "driverStandings": [
    "driverId",
    "points",
    "raceId",
    "wins",
    "driverStandingsId",
    "position"
  ],
  "races": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.forename,
  T1.surname,
  T1.nationality,
  MAX(T2.points)
FROM drivers AS T1
INNER JOIN driverStandings AS T2
  ON T1.driverId = T2.driverId
GROUP BY
  T1.driverId
ORDER BY
  SUM(T2.wins) DESC
LIMIT 1;
=====================
Question: How old is the youngest Japanese driver? What is his name?
 db_id: formula_1
Selector: ```json
{
  "drivers": [
    "dob",
    "nationality",
    "forename",
    "surname",
    "driverId",
    "driverRef"
  ],
  "races": [
    "date",
    "raceId",
    "year",
    "round",
    "circuitId",
    "name"
  ],
  "results": [
    "driverId",
    "raceId",
    "resultId",
    "constructorId",
    "number",
    "grid"
  ],
  "circuits": "drop_all",
  "status": "drop_all",
  "driverStandings": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(strftime('%Y', 'now') AS INTEGER) - CAST(strftime('%Y', dob) AS INTEGER), forename, surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1
=====================
Question: Name the races along with its circuit name and location for f1 races hosted in September 2005.
 db_id: formula_1
Selector: ```json
{
  "circuits": [
    "circuitId",
    "name",
    "location",
    "country",
    "circuitRef",
    "lat"
  ],
  "races": [
    "raceId",
    "circuitId",
    "name",
    "date",
    "year",
    "round"
  ],
  "status": "drop_all",
  "drivers": "drop_all",
  "driverStandings": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 2): SELECT
  r.name,
  c.name,
  c.location
FROM races AS r
INNER JOIN circuits AS c
  ON r.circuitId = c.circuitId
WHERE
  CAST(strftime('%m', r.date) AS INTEGER) = 9 AND CAST(strftime('%Y', r.date) AS INTEGER) = 2005;
=====================
Question: Which race was Alex Yoong in when he was in track number less than 20?
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": [
    "driverId",
    "forename",
    "surname",
    "driverRef",
    "number",
    "code",
    "dob",
    "nationality",
    "url"
  ],
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "name",
    "year",
    "round",
    "circuitId",
    "date",
    "time",
    "url"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "keep_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": [
    "raceId",
    "driverId",
    "position",
    "resultId",
    "constructorId",
    "number",
    "grid",
    "positionText",
    "positionOrder",
    "points",
    "laps",
    "time",
    "milliseconds",
    "fastestLap",
    "rank",
    "fastestLapTime",
    "fastestLapSpeed",
    "statusId"
  ]
}
```
Final SQL (attempt 1): SELECT
  r.name
FROM drivers AS d
JOIN results AS res
  ON d.driverId = res.driverId
JOIN races AS r
  ON res.raceId = r.raceId
WHERE
  d.forename = 'Alex' AND d.surname = 'Yoong' AND res.position < 20;
=====================
Question: State the race and year of race in which Michael Schumacher had his fastest lap.
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": [
    "driverId",
    "surname",
    "forename",
    "driverRef",
    "number",
    "code"
  ],
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "year",
    "name",
    "date",
    "round",
    "circuitId"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "keep_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": [
    "milliseconds",
    "raceId",
    "driverId",
    "fastestLapTime",
    "fastestLapSpeed",
    "fastestLap"
  ]
}
```
Final SQL (attempt 1): SELECT
  T1.year,
  T1.name
FROM races AS T1
INNER JOIN results AS T2
  ON T1.raceId = T2.raceId
INNER JOIN drivers AS T3
  ON T2.driverId = T3.driverId
WHERE
  T3.forename = 'Michael' AND T3.surname = 'Schumacher'
ORDER BY
  T2.milliseconds
LIMIT 1;
=====================
Question: Which was Lewis Hamilton first race? What was his points recorded for his first race event?
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": [
    "driverId",
    "forename",
    "surname",
    "driverRef",
    "number",
    "code"
  ],
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "year",
    "round",
    "name",
    "date",
    "circuitId"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": [
    "points",
    "raceId",
    "driverId",
    "resultId",
    "constructorId",
    "number"
  ]
}
```
Final SQL (attempt 1): SELECT
  T2.name,
  T1.points
FROM results AS T1
INNER JOIN races AS T2
  ON T1.raceId = T2.raceId
INNER JOIN drivers AS T3
  ON T1.driverId = T3.driverId
WHERE
  T3.forename = 'Lewis' AND T3.surname = 'Hamilton'
ORDER BY
  T2.year
LIMIT 1;
=====================
Question: Among all European Grand Prix races, what is the percentage of the races were hosted in Germany?
 db_id: formula_1
Selector: ```json
{
  "circuits": [
    "country",
    "circuitId",
    "location",
    "name",
    "circuitRef",
    "lat"
  ],
  "races": [
    "name",
    "raceId",
    "circuitId",
    "year",
    "round",
    "date"
  ],
  "status": "drop_all",
  "drivers": "drop_all",
  "driverStandings": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T2.country = 'Germany' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'European Grand Prix'
=====================
Question: What's the location coordinates of Silverstone Circuit?
 db_id: formula_1
Selector: ```json
{
  "circuits": [
    "circuitId",
    "circuitRef",
    "name",
    "location",
    "country",
    "lat",
    "lng"
  ],
  "status": "drop_all",
  "drivers": "drop_all",
  "driverStandings": "drop_all",
  "races": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'
=====================
Question: What's the reference name of Marina Bay Street Circuit?
 db_id: formula_1
Selector: ```json
{
  "circuits": [
    "name",
    "circuitRef",
    "circuitId",
    "location",
    "country",
    "lat"
  ],
  "status": "drop_all",
  "drivers": "drop_all",
  "driverStandings": "drop_all",
  "races": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'
=====================
Question: Which country is the oldest driver from?
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": [
    "dob",
    "nationality",
    "driverId",
    "driverRef",
    "number",
    "code"
  ],
  "driverStandings": "drop_all",
  "races": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT nationality FROM drivers ORDER BY dob ASC LIMIT 1
=====================
Question: Which driver ranked the first in the Canadian Grand Prix in 2007? Please give his reference name.
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": [
    "driverId",
    "driverRef",
    "forename",
    "surname",
    "nationality",
    "dob"
  ],
  "driverStandings": [
    "driverStandingsId",
    "raceId",
    "driverId",
    "points",
    "position",
    "wins"
  ],
  "races": [
    "raceId",
    "year",
    "name",
    "circuitId",
    "date",
    "round"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": [
    "resultId",
    "raceId",
    "driverId",
    "positionOrder",
    "position",
    "points"
  ]
}
```
Final SQL (attempt 1): SELECT
  T2.driverRef
FROM races AS T1
INNER JOIN results AS T3
  ON T1.raceId = T3.raceId
INNER JOIN drivers AS T2
  ON T3.driverId = T2.driverId
WHERE
  T1.name = 'Canadian Grand Prix' AND T1.year = 2007 AND T3.positionOrder = 1;
=====================
Question: In which Formula_1 race did Lewis Hamilton rank the highest?
 db_id: formula_1
Selector: ```json
{
  "circuits": [
    "circuitId",
    "circuitRef",
    "name",
    "location",
    "country",
    "lat"
  ],
  "status": [
    "statusId",
    "status"
  ],
  "drivers": [
    "driverId",
    "driverRef",
    "forename",
    "surname",
    "nationality",
    "dob"
  ],
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "year",
    "round",
    "circuitId",
    "name",
    "date"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": [
    "raceId",
    "driverId",
    "resultId",
    "constructorId",
    "number",
    "grid",
    "position",
    "positionText",
    "positionOrder",
    "points",
    "laps",
    "time",
    "milliseconds",
    "fastestLap",
    "rank",
    "fastestLapTime",
    "fastestLapSpeed",
    "statusId"
  ]
}
```
Final SQL (attempt 1): SELECT
  T2.name
FROM results AS T1
INNER JOIN races AS T2
  ON T1.raceId = T2.raceId
INNER JOIN drivers AS T3
  ON T1.driverId = T3.driverId
WHERE
  T3.forename = 'Lewis' AND T3.surname = 'Hamilton'
ORDER BY
  T1.rank
LIMIT 1;
=====================
Question: What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix?
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": "drop_all",
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "name",
    "year",
    "round",
    "circuitId",
    "date"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "keep_all",
  "constructorStandings": "drop_all",
  "results": [
    "fastestLapSpeed",
    "raceId",
    "driverId",
    "fastestLapTime",
    "rank",
    "fastestLap"
  ]
}
```
Final SQL (attempt 1): SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2009 AND name = 'Spanish Grand Prix')
=====================
Question: What was Lewis Hamilton's final rank in the 2008 Chinese Grand Prix?
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": [
    "surname",
    "forename",
    "driverId",
    "driverRef",
    "number",
    "code"
  ],
  "driverStandings": "drop_all",
  "races": [
    "name",
    "raceId",
    "year",
    "round",
    "circuitId",
    "date"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": [
    "positionOrder",
    "driverId",
    "raceId",
    "resultId",
    "constructorId",
    "number"
  ]
}
```
Final SQL (attempt 1): SELECT
  T1.positionOrder
FROM results AS T1
INNER JOIN races AS T2
  ON T1.raceId = T2.raceId
INNER JOIN drivers AS T3
  ON T1.driverId = T3.driverId
WHERE
  T2.year = 2008 AND T2.name = 'Chinese Grand Prix' AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton';
=====================
Question: What's the finish time for the driver who ranked second in 2008's AustChineseralian Grand Prix?
 db_id: formula_1
Selector: ```json
{
  "circuits": [
    "circuitId",
    "name",
    "circuitRef",
    "location",
    "country",
    "lat"
  ],
  "status": [
    "statusId",
    "status"
  ],
  "drivers": [
    "driverId",
    "driverRef",
    "number",
    "code",
    "forename",
    "surname"
  ],
  "driverStandings": [
    "driverStandingsId",
    "raceId",
    "driverId",
    "points",
    "position",
    "positionText"
  ],
  "races": [
    "raceId",
    "year",
    "round",
    "circuitId",
    "name",
    "date"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "keep_all",
  "constructorStandings": "drop_all",
  "results": [
    "time",
    "raceId",
    "driverId",
    "positionOrder",
    "grid",
    "position"
  ]
}
```
Final SQL (attempt 1): SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2008 AND T2.name = "Australian Grand Prix" AND T1.positionOrder = 2
=====================
Question: Among the drivers that finished the race in the 2008 Chinese Grand Prix, how many of them have participated in Formula_1 races?
 db_id: formula_1
Selector: ```json
{
  "drivers": [
    "driverId",
    "driverRef",
    "number",
    "code",
    "forename",
    "surname"
  ],
  "races": [
    "raceId",
    "year",
    "round",
    "circuitId",
    "name",
    "date"
  ],
  "results": [
    "resultId",
    "raceId",
    "driverId",
    "constructorId",
    "number",
    "grid"
  ],
  "driverStandings": [
    "driverStandingsId",
    "raceId",
    "driverId",
    "points",
    "position",
    "positionText"
  ],
  "status": "drop_all",
  "circuits": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.driverId)
FROM results AS T1
INNER JOIN races AS T2 ON T1.raceId = T2.raceId
WHERE T1.raceId = (SELECT raceId FROM races WHERE YEAR = 2008 AND name = 'Chinese Grand Prix')
=====================
Question: How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix?
 db_id: formula_1
Selector: ```json
{
  "races": [
    "raceId",
    "year",
    "name",
    "date",
    "round",
    "keep_all"
  ],
  "results": [
    "milliseconds",
    "raceId",
    "time",
    "positionOrder",
    "driverId",
    "constructorId"
  ],
  "drivers": [
    "driverId",
    "surname",
    "forename",
    "driverRef",
    "nationality",
    "dob"
  ],
  "status": "drop_all",
  "circuits": "drop_all",
  "driverStandings": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST((T2.milliseconds - T1.milliseconds) AS REAL) * 100 / T2.milliseconds FROM results AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = "Australian Grand Prix") AND T1.positionOrder = 1 AND T2.positionOrder = (SELECT MAX(positionOrder) FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = "Australian Grand Prix"))
=====================
Question: How many circuits are there in Adelaide, Australia?
 db_id: formula_1
Selector: ```json
{
  "circuits": [
    "country",
    "location",
    "circuitId",
    "circuitRef",
    "name",
    "lat"
  ],
  "status": "drop_all",
  "drivers": "drop_all",
  "driverStandings": "drop_all",
  "races": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(*) FROM circuits WHERE country = "Australia" AND location = "Adelaide"
=====================
Question: What are the maximum points of British constructors?
 db_id: formula_1
Selector: ```json
{
  "constructors": [
    "nationality",
    "constructorId",
    "name",
    "constructorRef",
    "url",
    "wins"
  ],
  "constructorResults": [
    "points",
    "constructorId",
    "raceId",
    "constructorResultsId",
    "status"
  ],
  "constructorStandings": [
    "points",
    "constructorId",
    "raceId",
    "constructorStandingsId",
    "position",
    "positionText"
  ],
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": "drop_all",
  "driverStandings": "drop_all",
  "races": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT MAX(T2.points) FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = "British"
=====================
Question: Please list the constructor names with 0 points at race 291.
 db_id: formula_1
Selector: ```json
{
  "constructors": [
    "constructorId",
    "name",
    "constructorRef",
    "nationality",
    "url",
    "wins"
  ],
  "constructorResults": [
    "raceId",
    "constructorId",
    "points",
    "constructorResultsId",
    "status"
  ],
  "races": [
    "raceId",
    "year",
    "round",
    "circuitId",
    "name",
    "date"
  ],
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": "drop_all",
  "driverStandings": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT T2.name FROM constructorResults AS T1 JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 291 AND T1.points = 0
=====================
Question: How many Japanese constructors have 0 points in 2 races?
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": "drop_all",
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "year",
    "round",
    "name",
    "circuitId",
    "date"
  ],
  "constructors": [
    "constructorId",
    "name",
    "nationality",
    "constructorRef",
    "url",
    "wins"
  ],
  "constructorResults": [
    "raceId",
    "constructorId",
    "points",
    "constructorResultsId",
    "status"
  ],
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.constructorId)
FROM Constructors AS T1
INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId
WHERE T1.nationality = 'Japanese' AND T2.points = 0
GROUP BY T1.constructorId
HAVING COUNT(T2.raceId) = 2;
=====================
Question: Please calculate the race completion percentage of Japanese drivers from 2007 to 2009.
 db_id: formula_1
Selector: ```json
{
  "drivers": [
    "nationality",
    "driverId",
    "forename",
    "surname",
    "driverRef",
    "dob"
  ],
  "races": [
    "year",
    "raceId",
    "date",
    "circuitId",
    "name",
    "round"
  ],
  "results": [
    "raceId",
    "driverId",
    "time",
    "statusId",
    "resultId",
    "points"
  ],
  "status": [
    "statusId",
    "status"
  ],
  "driverStandings": "drop_all",
  "circuits": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T1.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.driverId) FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.nationality = "Japanese" AND T2.year BETWEEN 2007 AND 2009
=====================
Question: What is the average time in seconds of champion for each year, before year 1975?
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": "keep_all",
  "driverStandings": "drop_all",
  "races": [
    "year",
    "raceId",
    "name",
    "date",
    "round",
    "circuitId"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": [
    "year",
    "url"
  ],
  "constructorStandings": "drop_all",
  "results": [
    "time",
    "raceId",
    "positionOrder",
    "driverId",
    "resultId",
    "constructorId"
  ]
}
```
Final SQL (attempt 1): SELECT AVG(CAST(SUBSTR(T1.time, 1, 2) AS INTEGER) * 3600 + CAST(SUBSTR(T1.time, 4, 2) AS INTEGER) * 60 + CAST(SUBSTR(T1.time, 7, 2) AS INTEGER) + CAST(SUBSTR(T1.time, 10, 3) AS REAL) * 0.001) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year < 1975 AND T1.positionOrder = 1 AND T1.time IS NOT NULL
=====================
Question: What is the fastest lap number of the champion in 2009?
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": "drop_all",
  "driverStandings": [
    "driverStandingsId",
    "raceId",
    "driverId",
    "points",
    "position",
    "positionText"
  ],
  "races": [
    "raceId",
    "year",
    "name",
    "round",
    "circuitId",
    "url"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": [
    "raceId",
    "driverId",
    "lap",
    "position",
    "time",
    "milliseconds"
  ],
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": [
    "year",
    "url"
  ],
  "constructorStandings": "drop_all",
  "results": [
    "resultId",
    "raceId",
    "driverId",
    "constructorId",
    "number",
    "grid",
    "position",
    "positionText",
    "positionOrder",
    "points",
    "laps",
    "time",
    "milliseconds",
    "fastestLap",
    "rank",
    "fastestLapTime",
    "fastestLapSpeed",
    "statusId"
  ]
}
```
Final SQL (attempt 1): SELECT T2.lap FROM results AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId AND T1.driverId = T2.driverId WHERE T1.raceId IN (SELECT raceId FROM races WHERE YEAR = 2009) AND T1.driverId = (SELECT driverId FROM results WHERE raceId IN (SELECT raceId FROM races WHERE YEAR = 2009) ORDER BY positionOrder ASC LIMIT 1) ORDER BY T2.milliseconds ASC LIMIT 1
=====================
Question: What is the average of fastest lap speed in the 2009 Spanish Grand Prix race?
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": "drop_all",
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "name",
    "year",
    "round",
    "circuitId",
    "date"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": [
    "year",
    "url"
  ],
  "constructorStandings": "drop_all",
  "results": [
    "fastestLapSpeed",
    "raceId",
    "driverId",
    "constructorId",
    "number",
    "grid"
  ]
}
```
Final SQL (attempt 1): SELECT AVG(fastestLapSpeed) FROM results WHERE raceId = (SELECT raceId FROM races WHERE YEAR = 2009 AND name = 'Spanish Grand Prix')
=====================
Question: From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50?
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": [
    "driverId",
    "dob",
    "driverRef",
    "number",
    "code",
    "forename"
  ],
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "year",
    "round",
    "circuitId",
    "name",
    "date"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": [
    "raceId",
    "driverId",
    "lap",
    "position",
    "time",
    "milliseconds"
  ],
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": [
    "year",
    "url"
  ],
  "constructorStandings": "drop_all",
  "results": [
    "raceId",
    "driverId",
    "constructorId",
    "number",
    "grid",
    "position"
  ]
}
```
Final SQL (attempt 1): SELECT
  CAST(SUM(CASE WHEN T3.dob LIKE '____%' AND substr(T3.dob, 1, 4) < '1985' AND T1.lap > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.driverId)
FROM lapTimes AS T1
INNER JOIN races AS T2
  ON T1.raceId = T2.raceId
INNER JOIN drivers AS T3
  ON T1.driverId = T3.driverId
WHERE
  T2.year BETWEEN 2000 AND 2005;
=====================
Question: How many French drivers who obtain the laptime less than 02:00.00?
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": [
    "driverId",
    "nationality",
    "driverRef",
    "forename",
    "surname",
    "dob"
  ],
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "year",
    "round",
    "circuitId",
    "name",
    "date"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": [
    "raceId",
    "driverId",
    "time",
    "milliseconds",
    "lap",
    "position"
  ],
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.driverId)
FROM lapTimes AS T1
INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId
WHERE T2.nationality = 'French' AND T1.milliseconds < 120000;
=====================
Question: List out the code for drivers who have nationality in American.
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": [
    "nationality",
    "code",
    "driverId",
    "driverRef",
    "number",
    "forename"
  ],
  "driverStandings": "drop_all",
  "races": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT code FROM drivers WHERE nationality = 'American'
=====================
Question: State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?
 db_id: formula_1
Selector: ```json
{
  "drivers": [
    "driverId",
    "dob",
    "nationality",
    "code",
    "forename",
    "surname"
  ],
  "races": [
    "raceId",
    "year",
    "round",
    "name",
    "date",
    "circuitId"
  ],
  "results": [
    "driverId",
    "raceId",
    "resultId",
    "constructorId",
    "number",
    "grid"
  ],
  "driverStandings": "drop_all",
  "circuits": "drop_all",
  "status": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all"
}
```
Final SQL (attempt 2): SELECT
  SUM(CASE WHEN nationality = 'Dutch' THEN 1 ELSE 0 END)
FROM (
  SELECT
    nationality
  FROM drivers
  ORDER BY
    dob DESC
  LIMIT 3
);
=====================
Question: Please state the reference name of the oldest German driver.
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": [
    "driverId",
    "driverRef",
    "nationality",
    "dob",
    "forename",
    "surname"
  ],
  "driverStandings": "drop_all",
  "races": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT driverRef FROM drivers WHERE nationality = "German" ORDER BY dob ASC LIMIT 1
=====================
Question: Which drivers who were born in 1971 and has the fastest lap time on the race? Give id and code of these drivers.
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": [
    "driverId",
    "code",
    "dob",
    "driverRef",
    "number",
    "forename"
  ],
  "driverStandings": "drop_all",
  "races": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": [
    "fastestLapTime",
    "driverId",
    "raceId",
    "resultId",
    "constructorId",
    "number"
  ]
}
```
Final SQL (attempt 1): SELECT DISTINCT
  T1.driverId,
  T1.code
FROM drivers AS T1
INNER JOIN results AS T2
  ON T1.driverId = T2.driverId
WHERE
  STRFTIME('%Y', T1.dob) = '1971' AND T2.fastestLapTime IS NOT NULL;
=====================
Question: From race no. 50 to 100, how many finishers have been disqualified?
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": [
    "statusId",
    "status"
  ],
  "drivers": "drop_all",
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "year",
    "round",
    "circuitId",
    "name",
    "date"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": [
    "raceId",
    "statusId",
    "time",
    "resultId",
    "driverId",
    "constructorId"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(*)
FROM results
WHERE raceId > 50
  AND raceId < 100
  AND statusId = (
    SELECT statusId
    FROM status
    WHERE status = 'Disqualified'
  )
  AND time IS NOT NULL;
=====================
Question: How many times the circuits were held in Austria? Please give their location and coordinates.
 db_id: formula_1
Selector: ```json
{
  "circuits": [
    "country",
    "location",
    "name",
    "lat",
    "lng",
    "circuitId"
  ],
  "status": "drop_all",
  "drivers": "drop_all",
  "driverStandings": "drop_all",
  "races": [
    "circuitId",
    "raceId",
    "year",
    "round",
    "name",
    "date"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(*), location, lat, lng
FROM circuits
WHERE country = "Austria"
GROUP BY location, lat, lng;
=====================
Question: On what year did the youngest driver had his first qualifying race? Also state the name, date and time of the race.
 db_id: formula_1
Selector: ```json
{
  "drivers": [
    "driverId",
    "dob",
    "driverRef",
    "forename",
    "surname",
    "nationality"
  ],
  "races": [
    "raceId",
    "year",
    "name",
    "date",
    "time",
    "circuitId"
  ],
  "qualifying": [
    "raceId",
    "driverId",
    "qualifyId",
    "constructorId",
    "number",
    "position"
  ],
  "circuits": "keep_all",
  "status": "drop_all",
  "driverStandings": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.year,
  T1.name,
  T1.date,
  T1.time
FROM races AS T1
JOIN qualifying AS T2
  ON T1.raceId = T2.raceId
JOIN drivers AS T3
  ON T2.driverId = T3.driverId
WHERE
  T3.driverId = (
    SELECT
      driverId
    FROM drivers
    ORDER BY
      dob DESC
    LIMIT 1
  )
ORDER BY
  T1.date
LIMIT 1;
=====================
Question: List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985.
 db_id: formula_1
Selector: ```json
{
  "drivers": [
    "driverId",
    "nationality",
    "dob",
    "forename",
    "surname",
    "driverRef"
  ],
  "pitStops": [
    "driverId",
    "duration",
    "milliseconds",
    "raceId",
    "stop",
    "lap"
  ],
  "races": [
    "raceId",
    "year",
    "name",
    "date",
    "round",
    "circuitId"
  ],
  "circuits": [
    "circuitId",
    "name",
    "location",
    "country",
    "circuitRef",
    "lat"
  ],
  "status": "drop_all",
  "driverStandings": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = "German" AND T1.dob BETWEEN "1980-01-01" AND "1985-12-31" GROUP BY T1.driverId ORDER BY avg(T2.duration) ASC LIMIT 3
=====================
Question: Who is the champion of the Canadian Grand Prix in 2008? Indicate his finish time.
 db_id: formula_1
Selector: ```json
{
  "circuits": [
    "circuitId",
    "circuitRef",
    "name",
    "location",
    "country",
    "keep_all"
  ],
  "status": [
    "statusId",
    "status",
    "keep_all"
  ],
  "drivers": [
    "driverId",
    "driverRef",
    "number",
    "code",
    "forename",
    "surname"
  ],
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "year",
    "round",
    "circuitId",
    "name",
    "date"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": [
    "resultId",
    "raceId",
    "driverId",
    "constructorId",
    "number",
    "grid",
    "time"
  ]
}
```
Final SQL (attempt 1): SELECT
  T1.forename,
  T1.surname,
  T2.time
FROM drivers AS T1
INNER JOIN results AS T2
  ON T1.driverId = T2.driverId
INNER JOIN races AS T3
  ON T2.raceId = T3.raceId
WHERE
  T3.year = 2008 AND T3.name = "Canadian Grand Prix" AND T2.positionOrder = 1;
=====================
Question: What is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website.
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": "drop_all",
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "year",
    "name",
    "round",
    "circuitId",
    "date"
  ],
  "constructors": [
    "constructorId",
    "constructorRef",
    "url",
    "name",
    "nationality",
    "wins"
  ],
  "constructorResults": [
    "constructorId",
    "raceId",
    "points",
    "status",
    "constructorResultsId"
  ],
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T2.constructorRef,
  T2.url
FROM races AS T1
INNER JOIN constructors AS T2
  ON T1.raceId = T2.constructorId
INNER JOIN results AS T3
  ON T1.raceId = T3.raceId
WHERE
  T1.year = 2009 AND T1.name = 'Singapore Grand Prix'
ORDER BY
  T3.time DESC
LIMIT 1;
=====================
Question: Please list all the superpowers of 3-D Man.
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": [
    "power_name",
    "id"
  ],
  "publisher": "drop_all",
  "superhero": [
    "superhero_name",
    "id",
    "full_name",
    "gender_id",
    "eye_colour_id",
    "hair_colour_id"
  ],
  "colour": "drop_all",
  "attribute": "drop_all",
  "hero_power": [
    "power_id",
    "hero_id"
  ],
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T2.power_name
FROM superhero AS T1
INNER JOIN hero_power AS T3
  ON T1.id = T3.hero_id
INNER JOIN superpower AS T2
  ON T3.power_id = T2.id
WHERE
  T1.superhero_name = '3-D Man';
=====================
Question: Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team.
 db_id: formula_1
Selector: ```json
{
  "circuits": [
    "circuitId",
    "name",
    "circuitRef",
    "location",
    "country",
    "lat"
  ],
  "status": "drop_all",
  "drivers": "drop_all",
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "year",
    "name",
    "circuitId",
    "date",
    "round"
  ],
  "constructors": [
    "constructorId",
    "name",
    "nationality",
    "constructorRef",
    "url",
    "wins"
  ],
  "constructorResults": [
    "constructorResultsId",
    "raceId",
    "constructorId",
    "points",
    "status"
  ],
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T2.total_points,
  T1.name,
  T1.nationality
FROM constructors AS T1
INNER JOIN (
  SELECT
    constructorId,
    SUM(points) AS total_points
  FROM constructorResults
  WHERE
    raceId IN (
      SELECT
        raceId
      FROM races
      WHERE
        name = 'Monaco Grand Prix' AND YEAR BETWEEN 1980 AND 2010
    )
  GROUP BY
    constructorId
  ORDER BY
    total_points DESC
  LIMIT 1
) AS T2
  ON T1.constructorId = T2.constructorId;
=====================
Question: What is full name of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008?
 db_id: formula_1
Selector: ```json
{
  "circuits": [
    "circuitId",
    "name",
    "location",
    "country",
    "circuitRef",
    "lat"
  ],
  "qualifying": [
    "raceId",
    "driverId",
    "position",
    "qualifyId",
    "constructorId",
    "number"
  ],
  "races": [
    "year",
    "raceId",
    "circuitId",
    "name",
    "round",
    "date"
  ],
  "drivers": [
    "driverId",
    "forename",
    "surname",
    "driverRef",
    "number",
    "code"
  ],
  "status": "drop_all",
  "driverStandings": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId INNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T3.year = 2008 AND T4.name = "Marina Bay Street Circuit" AND T1.position = 1
=====================
Question: As of the present, what is the full name of the youngest racer? Indicate her nationality and the name of the race to which he/she first joined.
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": "drop_all",
  "drivers": [
    "dob",
    "driverId",
    "forename",
    "surname",
    "nationality",
    "driverRef"
  ],
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "name",
    "date",
    "year",
    "round",
    "circuitId"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": [
    "raceId",
    "driverId",
    "resultId",
    "constructorId",
    "number",
    "grid"
  ]
}
```
Final SQL (attempt 1): SELECT T1.forename, T1.surname, T1.nationality, T3.name FROM drivers AS T1 JOIN results AS T2 ON T1.driverId = T2.driverId JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T1.dob DESC, T2.raceId ASC LIMIT 1
=====================
Question: How many accidents did the driver who had the highest number accidents in the Canadian Grand Prix have?
 db_id: formula_1
Selector: ```json
{
  "circuits": "drop_all",
  "status": [
    "statusId",
    "status"
  ],
  "drivers": [
    "driverId",
    "driverRef",
    "number",
    "code",
    "forename",
    "surname"
  ],
  "driverStandings": "drop_all",
  "races": [
    "raceId",
    "year",
    "round",
    "circuitId",
    "name",
    "date"
  ],
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "lapTimes": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": [
    "resultId",
    "raceId",
    "driverId",
    "constructorId",
    "number",
    "grid",
    "position",
    "positionText",
    "positionOrder",
    "points",
    "laps",
    "time",
    "milliseconds",
    "fastestLap",
    "rank",
    "fastestLapTime",
    "fastestLapSpeed",
    "statusId"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(CASE WHEN T1.name = 'Canadian Grand Prix' THEN 1 ELSE NULL END) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.driverId = ( SELECT T2.driverId FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.name = 'Canadian Grand Prix' AND T2.statusId = 3 GROUP BY T2.driverId ORDER BY COUNT(*) DESC LIMIT 1 ) AND T2.statusId = 3
=====================
Question: Which top 20 driver created the shortest lap time ever record in a Formula_1 race? Please give them full names.
 db_id: formula_1
Selector: ```json
{
  "drivers": [
    "driverId",
    "forename",
    "surname",
    "driverRef",
    "number",
    "code",
    "dob"
  ],
  "lapTimes": [
    "raceId",
    "driverId",
    "time",
    "milliseconds",
    "lap",
    "position"
  ],
  "races": [
    "raceId",
    "year",
    "round",
    "circuitId",
    "name",
    "date"
  ],
  "driverStandings": [
    "driverId",
    "raceId",
    "points",
    "position",
    "wins",
    "driverStandingsId"
  ],
  "status": "drop_all",
  "circuits": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT DISTINCT
  T1.forename,
  T1.surname
FROM drivers AS T1
INNER JOIN lapTimes AS T2
  ON T1.driverId = T2.driverId
ORDER BY
  T2.time
LIMIT 20;
=====================
Question: Please list the lap records for the circuits in Italy.
 db_id: formula_1
Selector: ```json
{
  "circuits": [
    "circuitId",
    "name",
    "location",
    "country",
    "lat",
    "lng"
  ],
  "lapTimes": [
    "raceId",
    "driverId",
    "lap",
    "position",
    "time",
    "milliseconds"
  ],
  "races": [
    "raceId",
    "circuitId",
    "year",
    "round",
    "name",
    "date"
  ],
  "status": "drop_all",
  "drivers": "drop_all",
  "driverStandings": "drop_all",
  "constructors": "drop_all",
  "constructorResults": "drop_all",
  "qualifying": "drop_all",
  "pitStops": "drop_all",
  "seasons": "drop_all",
  "constructorStandings": "drop_all",
  "results": "drop_all"
}
```
Final SQL (attempt 1): SELECT MIN(T1.time) FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.country = "Italy"
=====================
Question: Among the superheroes with the super power of "Super Strength", how many of them have a height of over 200cm?
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": [
    "id",
    "power_name"
  ],
  "publisher": "drop_all",
  "superhero": [
    "id",
    "height_cm",
    "superhero_name",
    "full_name",
    "gender_id",
    "eye_colour_id"
  ],
  "colour": "drop_all",
  "attribute": "drop_all",
  "hero_power": [
    "hero_id",
    "power_id"
  ],
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = "Super Strength" AND T1.height_cm > 200
=====================
Question: Among the superheroes with blue eyes, how many of them have the super power of "Agility"?
 db_id: superhero
Selector: ```json
{
  "colour": [
    "id",
    "colour"
  ],
  "superhero": [
    "id",
    "eye_colour_id",
    "superhero_name",
    "full_name",
    "gender_id",
    "hair_colour_id"
  ],
  "superpower": [
    "id",
    "power_name"
  ],
  "hero_power": [
    "hero_id",
    "power_id"
  ],
  "gender": "keep_all",
  "publisher": "keep_all",
  "attribute": "drop_all",
  "race": "keep_all",
  "alignment": "keep_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  COUNT(T1.id)
FROM superhero AS T1
INNER JOIN colour AS T2
  ON T1.eye_colour_id = T2.id
INNER JOIN hero_power AS T3
  ON T1.id = T3.hero_id
INNER JOIN superpower AS T4
  ON T3.power_id = T4.id
WHERE
  T2.colour = 'Blue' AND T4.power_name = 'Agility';
=====================
Question: Please list the superhero names of all the superheroes that have blue eyes and blond hair.
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": "drop_all",
  "publisher": "drop_all",
  "superhero": [
    "superhero_name",
    "hair_colour_id",
    "eye_colour_id",
    "id",
    "full_name",
    "gender_id"
  ],
  "colour": [
    "colour",
    "id"
  ],
  "attribute": "drop_all",
  "hero_power": "drop_all",
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'
=====================
Question: Rank heroes published by Marvel Comics by their height in descending order.
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": "drop_all",
  "publisher": [
    "publisher_name",
    "id"
  ],
  "superhero": [
    "height_cm",
    "publisher_id",
    "superhero_name",
    "id",
    "full_name",
    "gender_id"
  ],
  "colour": "drop_all",
  "attribute": "drop_all",
  "hero_power": "drop_all",
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.superhero_name
FROM superhero AS T1
INNER JOIN publisher AS T2
  ON T1.publisher_id = T2.id
WHERE
  T2.publisher_name = 'Marvel Comics'
ORDER BY
  T1.height_cm DESC;
=====================
Question: Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": "drop_all",
  "publisher": {
    "publisher_name": 1,
    "id": 2
  },
  "superhero": {
    "eye_colour_id": 1,
    "publisher_id": 2,
    "id": 3,
    "superhero_name": 4,
    "full_name": 5,
    "gender_id": 6
  },
  "colour": {
    "colour": 1,
    "id": 2
  },
  "attribute": "drop_all",
  "hero_power": "drop_all",
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.colour FROM colour AS T1 JOIN superhero AS T2 ON T1.id = T2.eye_colour_id WHERE T2.publisher_id = (SELECT id FROM publisher WHERE publisher_name = "Marvel Comics") GROUP BY T1.colour ORDER BY count(T2.id) DESC
=====================
Question: List the superheroes from Marvel Comics who have the super power of 'Super Strength'.
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": [
    "id",
    "power_name"
  ],
  "publisher": [
    "id",
    "publisher_name"
  ],
  "superhero": [
    "id",
    "superhero_name",
    "full_name",
    "gender_id",
    "eye_colour_id",
    "hair_colour_id"
  ],
  "colour": "drop_all",
  "attribute": "drop_all",
  "hero_power": [
    "hero_id",
    "power_id"
  ],
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN publisher AS T4 ON T1.publisher_id = T4.id WHERE T3.power_name = "Super Strength" AND T4.publisher_name = "Marvel Comics"
=====================
Question: Which publisher published the slowest superhero?
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": "drop_all",
  "publisher": [
    "id",
    "publisher_name"
  ],
  "superhero": [
    "id",
    "publisher_id",
    "superhero_name",
    "full_name",
    "gender_id",
    "eye_colour_id"
  ],
  "colour": "drop_all",
  "attribute": [
    "id",
    "attribute_name"
  ],
  "hero_power": "drop_all",
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": [
    "hero_id",
    "attribute_id",
    "attribute_value"
  ]
}
```
Final SQL (attempt 1): SELECT T2.publisher_name FROM hero_attribute AS T1 INNER JOIN publisher AS T2 INNER JOIN superhero AS T3 INNER JOIN attribute AS T4 ON T1.hero_id = T3.id AND T2.id = T3.publisher_id AND T1.attribute_id = T4.id WHERE T4.attribute_name = 'Speed' ORDER BY T1.attribute_value ASC LIMIT 1
=====================
Question: How many gold-eyed superheroes did Marvel Comics publish?
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": "drop_all",
  "publisher": [
    "publisher_name",
    "id"
  ],
  "superhero": [
    "publisher_id",
    "id",
    "eye_colour_id",
    "superhero_name",
    "full_name",
    "gender_id"
  ],
  "colour": [
    "colour",
    "id"
  ],
  "attribute": "drop_all",
  "hero_power": "drop_all",
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.colour = "Gold" AND T3.publisher_name = "Marvel Comics"
=====================
Question: Who is the dumbest superhero?
 db_id: superhero
Selector: ```json
{
  "superhero": [
    "id",
    "superhero_name",
    "full_name",
    "alignment_id",
    "publisher_id",
    "race_id"
  ],
  "attribute": [
    "id",
    "attribute_name"
  ],
  "hero_attribute": [
    "hero_id",
    "attribute_id",
    "attribute_value"
  ],
  "gender": "drop_all",
  "superpower": "drop_all",
  "publisher": "keep_all",
  "colour": "drop_all",
  "race": "keep_all",
  "alignment": "keep_all",
  "hero_power": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value ASC LIMIT 1
=====================
Question: What is Copycat's race?
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": "drop_all",
  "publisher": "drop_all",
  "superhero": [
    "superhero_name",
    "race_id",
    "id",
    "full_name",
    "gender_id",
    "eye_colour_id"
  ],
  "colour": "drop_all",
  "attribute": "drop_all",
  "hero_power": "drop_all",
  "race": [
    "race",
    "id"
  ],
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 3): SELECT
  T1.race
FROM race AS T1
INNER JOIN superhero AS T2
  ON T1.id = T2.race_id
WHERE
  T2.superhero_name = 'Copycat';
=====================
Question: Which superheroes have a durability attribute value of less than 50?
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": "drop_all",
  "publisher": "drop_all",
  "superhero": [
    "id",
    "superhero_name",
    "full_name",
    "gender_id",
    "eye_colour_id",
    "hair_colour_id"
  ],
  "colour": "drop_all",
  "attribute": [
    "id",
    "attribute_name"
  ],
  "hero_power": "drop_all",
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": [
    "hero_id",
    "attribute_id",
    "attribute_value"
  ]
}
```
Final SQL (attempt 1): SELECT T1.superhero_name FROM superhero AS T1 JOIN hero_attribute AS T2 ON T1.id = T2.hero_id JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50
=====================
Question: What are the names of the superheroes with the power of death touch?
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": [
    "id",
    "power_name"
  ],
  "publisher": "drop_all",
  "superhero": [
    "id",
    "superhero_name",
    "full_name",
    "gender_id",
    "eye_colour_id",
    "hair_colour_id"
  ],
  "colour": "drop_all",
  "attribute": "drop_all",
  "hero_power": [
    "hero_id",
    "power_id"
  ],
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = "Death Touch"
=====================
Question: How many female superheroes have a strength value of 100?
 db_id: superhero
Selector: ```json
{
  "gender": [
    "id",
    "gender"
  ],
  "superhero": [
    "id",
    "gender_id",
    "superhero_name",
    "full_name",
    "eye_colour_id",
    "hair_colour_id"
  ],
  "attribute": [
    "id",
    "attribute_name"
  ],
  "hero_attribute": [
    "hero_id",
    "attribute_id",
    "attribute_value"
  ],
  "superpower": "drop_all",
  "publisher": "drop_all",
  "colour": "drop_all",
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_power": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN gender AS T3 ON T1.gender_id = T3.id INNER JOIN attribute AS T4 ON T2.attribute_id = T4.id WHERE T3.gender = "Female" AND T4.attribute_name = "Strength" AND T2.attribute_value = 100
=====================
Question: What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics.
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": "drop_all",
  "publisher": [
    "publisher_name",
    "id"
  ],
  "superhero": [
    "alignment_id",
    "publisher_id",
    "id",
    "superhero_name",
    "full_name"
  ],
  "colour": "drop_all",
  "attribute": "drop_all",
  "hero_power": "drop_all",
  "race": "drop_all",
  "alignment": [
    "alignment",
    "id"
  ],
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  CAST(SUM(CASE WHEN T2.alignment = 'bad' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id),
  SUM(CASE WHEN T2.alignment = 'bad' AND T3.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END)
FROM superhero AS T1
INNER JOIN alignment AS T2
  ON T1.alignment_id = T2.id
INNER JOIN publisher AS T3
  ON T1.publisher_id = T3.id;
=====================
Question: Between DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published.
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": "drop_all",
  "publisher": [
    "id",
    "publisher_name"
  ],
  "superhero": [
    "publisher_id",
    "id",
    "superhero_name",
    "full_name",
    "gender_id",
    "eye_colour_id"
  ],
  "colour": "drop_all",
  "attribute": "drop_all",
  "hero_power": "drop_all",
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  (
    SELECT
      COUNT(*)
    FROM superhero AS t1
    INNER JOIN publisher AS t2
      ON t1.publisher_id = t2.id
    WHERE
      t2.publisher_name = 'Marvel Comics'
  ) - (
    SELECT
      COUNT(*)
    FROM superhero AS t1
    INNER JOIN publisher AS t2
      ON t1.publisher_id = t2.id
    WHERE
      t2.publisher_name = 'DC Comics'
  );
=====================
Question: Give the publisher ID of Star Trek.
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": "drop_all",
  "publisher": [
    "id",
    "publisher_name"
  ],
  "superhero": [
    "publisher_id",
    "id",
    "superhero_name",
    "full_name",
    "gender_id",
    "eye_colour_id"
  ],
  "colour": "drop_all",
  "attribute": "drop_all",
  "hero_power": "drop_all",
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT id FROM publisher WHERE publisher_name = "Star Trek"
=====================
Question: What is the total number of superheroes without full name?
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": "drop_all",
  "publisher": "drop_all",
  "superhero": [
    "full_name",
    "id",
    "superhero_name",
    "gender_id",
    "eye_colour_id",
    "hair_colour_id"
  ],
  "colour": "drop_all",
  "attribute": "drop_all",
  "hero_power": "drop_all",
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT count(*) FROM superhero WHERE full_name IS NULL
=====================
Question: What is the average weight of all female superheroes?
 db_id: superhero
Selector: ```json
{
  "gender": [
    "id",
    "gender"
  ],
  "superhero": [
    "weight_kg",
    "gender_id",
    "id",
    "superhero_name",
    "full_name",
    "eye_colour_id"
  ],
  "superpower": "drop_all",
  "publisher": "drop_all",
  "colour": "drop_all",
  "attribute": "drop_all",
  "hero_power": "drop_all",
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT AVG(T1.weight_kg) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = "Female"
=====================
Question: List down at least five superpowers of male superheroes.
 db_id: superhero
Selector: ```json
{
  "gender": [
    "id",
    "gender"
  ],
  "superpower": [
    "id",
    "power_name"
  ],
  "superhero": [
    "id",
    "gender_id",
    "superhero_name",
    "full_name",
    "publisher_id",
    "alignment_id"
  ],
  "publisher": "keep_all",
  "colour": "drop_all",
  "attribute": "drop_all",
  "hero_power": [
    "hero_id",
    "power_id"
  ],
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.power_name FROM superpower AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.power_id INNER JOIN superhero AS T3 ON T2.hero_id = T3.id INNER JOIN gender AS T4 ON T3.gender_id = T4.id WHERE T4.gender = "Male" GROUP BY T1.power_name LIMIT 5
=====================
Question: Among the superheroes with height from 170 to 190, list the names of the superheroes with no eye color.
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": "drop_all",
  "publisher": "drop_all",
  "superhero": [
    "height_cm",
    "superhero_name",
    "id",
    "eye_colour_id",
    "full_name",
    "gender_id"
  ],
  "colour": [
    "colour",
    "id"
  ],
  "attribute": "drop_all",
  "hero_power": "drop_all",
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT superhero_name
FROM superhero
WHERE height_cm BETWEEN 170 AND 190
  AND eye_colour_id IN (SELECT id FROM colour WHERE colour = 'No Colour');
=====================
Question: Provide the hair colour of the human superhero who is 185 cm tall.
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": "drop_all",
  "publisher": "drop_all",
  "superhero": [
    "height_cm",
    "race_id",
    "hair_colour_id",
    "id",
    "superhero_name",
    "full_name"
  ],
  "colour": [
    "colour",
    "id"
  ],
  "attribute": "drop_all",
  "hero_power": "drop_all",
  "race": [
    "race",
    "id"
  ],
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.colour FROM colour AS T1 JOIN superhero AS T2 ON T1.id = T2.hair_colour_id JOIN race AS T3 ON T2.race_id = T3.id WHERE T3.race = 'Human' AND T2.height_cm = 185
=====================
Question: In superheroes with height between 150 to 180, what is the percentage of heroes published by Marvel Comics?
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": "drop_all",
  "publisher": [
    "id",
    "publisher_name"
  ],
  "superhero": [
    "height_cm",
    "publisher_id",
    "id",
    "superhero_name",
    "full_name",
    "gender_id"
  ],
  "colour": "drop_all",
  "attribute": "drop_all",
  "hero_power": "drop_all",
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.height_cm BETWEEN 150 AND 180
=====================
Question: Among the male superheroes, list the super hero names of superheroes with weight greater than the 79% average weight of all superheroes.
 db_id: superhero
Selector: ```json
{
  "gender": [
    "id",
    "gender"
  ],
  "superhero": [
    "superhero_name",
    "weight_kg",
    "gender_id",
    "id",
    "full_name",
    "eye_colour_id"
  ],
  "hero_power": "drop_all",
  "publisher": "drop_all",
  "superpower": "drop_all",
  "colour": "drop_all",
  "attribute": "drop_all",
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = "Male" AND T1.weight_kg > (SELECT avg(Weight_Kg) * 0.79 FROM superhero)
=====================
Question: What are the superpowers of heroes with ID 1?
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": [
    "power_name",
    "id"
  ],
  "publisher": "drop_all",
  "superhero": [
    "id",
    "superhero_name",
    "full_name",
    "gender_id",
    "eye_colour_id",
    "hair_colour_id"
  ],
  "colour": "drop_all",
  "attribute": "drop_all",
  "hero_power": [
    "hero_id",
    "power_id"
  ],
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T2.power_name
FROM hero_power AS T1
INNER JOIN superpower AS T2
  ON T1.power_id = T2.id
WHERE
  T1.hero_id = 1;
=====================
Question: How many heroes have stealth power?
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": [
    "id",
    "power_name"
  ],
  "publisher": "drop_all",
  "superhero": [
    "id",
    "superhero_name",
    "full_name",
    "gender_id",
    "eye_colour_id",
    "hair_colour_id"
  ],
  "colour": "drop_all",
  "attribute": "drop_all",
  "hero_power": [
    "hero_id",
    "power_id"
  ],
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(T1.hero_id) FROM hero_power AS T1 JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Stealth'
=====================
Question: What is the hero's full name with the highest attribute in strength?
 db_id: superhero
Selector: ```json
{
  "superhero": [
    "id",
    "superhero_name",
    "full_name",
    "gender_id",
    "eye_colour_id",
    "hair_colour_id"
  ],
  "attribute": [
    "id",
    "attribute_name"
  ],
  "hero_attribute": [
    "hero_id",
    "attribute_id",
    "attribute_value"
  ],
  "gender": "drop_all",
  "superpower": "drop_all",
  "publisher": "drop_all",
  "colour": "drop_all",
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_power": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = "strength" ORDER BY T2.attribute_value DESC LIMIT 1
=====================
Question: Which superhero has the most durability published by Dark Horse Comics?
 db_id: superhero
Selector: ```json
{
  "superhero": [
    "id",
    "superhero_name",
    "publisher_id",
    "full_name",
    "gender_id",
    "eye_colour_id"
  ],
  "attribute": [
    "id",
    "attribute_name"
  ],
  "hero_attribute": [
    "hero_id",
    "attribute_id",
    "attribute_value"
  ],
  "publisher": [
    "id",
    "publisher_name"
  ],
  "gender": "drop_all",
  "superpower": "drop_all",
  "colour": "drop_all",
  "hero_power": "drop_all",
  "race": "drop_all",
  "alignment": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.superhero_name
FROM superhero AS T1
INNER JOIN hero_attribute AS T2
  ON T1.id = T2.hero_id
INNER JOIN attribute AS T3
  ON T2.attribute_id = T3.id
INNER JOIN publisher AS T4
  ON T1.publisher_id = T4.id
WHERE
  T3.attribute_name = 'Durability' AND T4.publisher_name = 'Dark Horse Comics'
ORDER BY
  T2.attribute_value DESC
LIMIT 1;
=====================
Question: List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics.
 db_id: superhero
Selector: ```json
{
  "gender": [
    "id",
    "gender"
  ],
  "superhero": [
    "gender_id",
    "eye_colour_id",
    "hair_colour_id",
    "skin_colour_id",
    "publisher_id",
    "id"
  ],
  "publisher": [
    "id",
    "publisher_name"
  ],
  "colour": "keep_all",
  "superpower": "drop_all",
  "attribute": "drop_all",
  "hero_power": "drop_all",
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.colour AS eye_colour,
  T2.colour AS hair_colour,
  T3.colour AS skin_colour
FROM superhero AS T0
INNER JOIN colour AS T1
  ON T0.eye_colour_id = T1.id
INNER JOIN colour AS T2
  ON T0.hair_colour_id = T2.id
INNER JOIN colour AS T3
  ON T0.skin_colour_id = T3.id
INNER JOIN gender AS T4
  ON T0.gender_id = T4.id
INNER JOIN publisher AS T5
  ON T0.publisher_id = T5.id
WHERE
  T4.gender = 'Female' AND T5.publisher_name = 'Dark Horse Comics';
=====================
Question: Which superhero has the same eyes, hair and skin colour? Indicate the publisher of the superhero.
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": "drop_all",
  "publisher": [
    "id",
    "publisher_name"
  ],
  "superhero": [
    "id",
    "publisher_id",
    "superhero_name",
    "skin_colour_id",
    "hair_colour_id",
    "eye_colour_id"
  ],
  "colour": "keep_all",
  "attribute": "drop_all",
  "hero_power": "drop_all",
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT T2.publisher_name FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.hair_colour_id = T1.skin_colour_id AND T1.hair_colour_id = T1.eye_colour_id
=====================
Question: What is the percentage of blue female superheroes among all female superheroes?
 db_id: superhero
Selector: ```json
{
  "gender": [
    "id",
    "gender"
  ],
  "superhero": [
    "gender_id",
    "eye_colour_id",
    "hair_colour_id",
    "skin_colour_id",
    "id",
    "superhero_name"
  ],
  "colour": [
    "id",
    "colour"
  ],
  "superpower": "drop_all",
  "publisher": "drop_all",
  "attribute": "drop_all",
  "hero_power": "drop_all",
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T1.eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue') THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Female'
=====================
Question: How many powers does Amazo hero have?
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": [
    "id",
    "power_name"
  ],
  "publisher": "drop_all",
  "superhero": [
    "id",
    "superhero_name",
    "full_name",
    "gender_id",
    "eye_colour_id",
    "hair_colour_id"
  ],
  "colour": "drop_all",
  "attribute": "drop_all",
  "hero_power": [
    "hero_id",
    "power_id"
  ],
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(T2.power_id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = "Amazo"
=====================
Question: Provide the heights of the heroes whose eye colours are amber.
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": "drop_all",
  "publisher": "drop_all",
  "superhero": [
    "height_cm",
    "id",
    "eye_colour_id",
    "superhero_name",
    "full_name",
    "gender_id"
  ],
  "colour": [
    "id",
    "colour"
  ],
  "attribute": "drop_all",
  "hero_power": "drop_all",
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'
=====================
Question: List the heroes' names whose eyes and hair colours are both black.
 db_id: superhero
Selector: ```json
{
  "superhero": [
    "superhero_name",
    "hair_colour_id",
    "eye_colour_id",
    "id",
    "full_name",
    "gender_id"
  ],
  "colour": [
    "colour",
    "id"
  ],
  "gender": "drop_all",
  "superpower": "drop_all",
  "publisher": "drop_all",
  "attribute": "drop_all",
  "hero_power": "drop_all",
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Black' AND T3.colour = 'Black'
=====================
Question: Describe the names of neutral alignment superheroes.
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": "drop_all",
  "publisher": "drop_all",
  "superhero": [
    "superhero_name",
    "id",
    "full_name",
    "gender_id",
    "eye_colour_id",
    "hair_colour_id"
  ],
  "colour": "drop_all",
  "attribute": "drop_all",
  "hero_power": "drop_all",
  "race": "drop_all",
  "alignment": [
    "alignment",
    "id"
  ],
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = "Neutral"
=====================
Question: How many heroes have the highest attribute value in strength?
 db_id: superhero
Selector: ```json
{
  "superhero": [
    "id",
    "superhero_name",
    "full_name",
    "gender_id",
    "eye_colour_id",
    "hair_colour_id"
  ],
  "attribute": [
    "id",
    "attribute_name"
  ],
  "hero_attribute": [
    "hero_id",
    "attribute_id",
    "attribute_value"
  ],
  "gender": "keep_all",
  "superpower": "drop_all",
  "publisher": "drop_all",
  "colour": "drop_all",
  "hero_power": "drop_all",
  "race": "drop_all",
  "alignment": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id  =  T2.id WHERE T2.attribute_name  =  'Strength' AND T1.attribute_value  =  (SELECT max(attribute_value) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id  =  T2.id WHERE T2.attribute_name  =  'Strength')
=====================
Question: How many percent of female heroes were published by Marvel Comics?
 db_id: superhero
Selector: ```json
{
  "gender": [
    "id",
    "gender"
  ],
  "superhero": [
    "gender_id",
    "publisher_id",
    "id",
    "superhero_name",
    "full_name",
    "eye_colour_id"
  ],
  "publisher": [
    "id",
    "publisher_name"
  ],
  "colour": "drop_all",
  "attribute": "drop_all",
  "hero_power": "drop_all",
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T1.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.id) FROM gender AS T1 INNER JOIN superhero AS T3 ON T1.id = T3.gender_id INNER JOIN publisher AS T2 ON T3.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics';
=====================
Question: Calculate the difference between Emil Blonsky's weight and Charles Chandler's weight.
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": "drop_all",
  "publisher": "drop_all",
  "superhero": [
    "weight_kg",
    "full_name",
    "id",
    "superhero_name",
    "gender_id",
    "eye_colour_id"
  ],
  "colour": "drop_all",
  "attribute": "drop_all",
  "hero_power": "drop_all",
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT (SELECT weight_kg FROM superhero WHERE full_name = 'Emil Blonsky') - (SELECT weight_kg FROM superhero WHERE full_name = 'Charles Chandler');
=====================
Question: Calculate the average height for all superhero.
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": "drop_all",
  "publisher": "drop_all",
  "superhero": [
    "height_cm",
    "weight_kg",
    "alignment_id",
    "publisher_id",
    "race_id",
    "skin_colour_id"
  ],
  "colour": "drop_all",
  "attribute": "drop_all",
  "hero_power": "drop_all",
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT AVG(height_cm) FROM superhero
=====================
Question: What is Abomination's superpower?
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": [
    "power_name",
    "id"
  ],
  "publisher": "drop_all",
  "superhero": [
    "superhero_name",
    "id"
  ],
  "colour": "drop_all",
  "attribute": "drop_all",
  "hero_power": [
    "power_id",
    "hero_id"
  ],
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.power_name FROM superpower AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.power_id INNER JOIN superhero AS T3 ON T2.hero_id = T3.id WHERE T3.superhero_name = "Abomination"
=====================
Question: Which hero was the fastest?
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": "drop_all",
  "publisher": "drop_all",
  "superhero": [
    "superhero_name",
    "id",
    "full_name",
    "gender_id",
    "eye_colour_id",
    "hair_colour_id"
  ],
  "colour": "drop_all",
  "attribute": [
    "id",
    "attribute_name"
  ],
  "hero_power": "drop_all",
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": [
    "hero_id",
    "attribute_id",
    "attribute_value"
  ]
}
```
Final SQL (attempt 1): SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = "Speed" ORDER BY T2.attribute_value DESC LIMIT 1
=====================
Question: State all of 3-D Man's attributes along with their values.
 db_id: superhero
Selector: ```json
{
  "superhero": [
    "superhero_name",
    "id",
    "full_name",
    "gender_id",
    "eye_colour_id",
    "hair_colour_id"
  ],
  "attribute": [
    "attribute_name",
    "id"
  ],
  "hero_attribute": [
    "attribute_value",
    "attribute_id",
    "hero_id"
  ],
  "gender": "drop_all",
  "superpower": "drop_all",
  "publisher": "drop_all",
  "colour": "drop_all",
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_power": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.attribute_name,
  T2.attribute_value
FROM attribute AS T1
INNER JOIN hero_attribute AS T2
  ON T1.id = T2.attribute_id
INNER JOIN superhero AS T3
  ON T2.hero_id = T3.id
WHERE
  T3.superhero_name = '3-D Man';
=====================
Question: Which superheroes have blue eyes with brown hair?
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": "drop_all",
  "publisher": "drop_all",
  "superhero": [
    "superhero_name",
    "id",
    "hair_colour_id",
    "eye_colour_id",
    "full_name",
    "gender_id"
  ],
  "colour": [
    "colour",
    "id"
  ],
  "attribute": "drop_all",
  "hero_power": "drop_all",
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT superhero_name FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = "Blue") AND hair_colour_id = (SELECT id FROM colour WHERE colour = "Brown")
=====================
Question: What is the publisher for Hawkman, Karate Kid and Speedy?
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": "drop_all",
  "publisher": [
    "id",
    "publisher_name"
  ],
  "superhero": [
    "id",
    "publisher_id",
    "superhero_name",
    "full_name",
    "gender_id",
    "eye_colour_id"
  ],
  "colour": "drop_all",
  "attribute": "drop_all",
  "hero_power": "drop_all",
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT T2.publisher_name FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')
=====================
Question: Calculate the percentage of superheroes with blue eyes.
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": "drop_all",
  "publisher": "drop_all",
  "superhero": [
    "eye_colour_id",
    "id",
    "superhero_name",
    "gender_id",
    "hair_colour_id",
    "skin_colour_id"
  ],
  "colour": [
    "colour",
    "id"
  ],
  "attribute": "drop_all",
  "hero_power": "drop_all",
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T2.colour = 'Blue' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id
=====================
Question: Find the ratio between male superheroes and female superheroes.
 db_id: superhero
Selector: ```json
{
  "gender": [
    "id",
    "gender"
  ],
  "superhero": [
    "gender_id",
    "id",
    "superhero_name",
    "full_name",
    "eye_colour_id",
    "hair_colour_id"
  ],
  "publisher": "keep_all",
  "superpower": "drop_all",
  "colour": "drop_all",
  "attribute": "drop_all",
  "hero_power": "drop_all",
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T1.gender_id = 2 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.gender_id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1
=====================
Question: Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": "drop_all",
  "publisher": "drop_all",
  "superhero": [
    "full_name",
    "id",
    "eye_colour_id",
    "superhero_name",
    "gender_id",
    "hair_colour_id"
  ],
  "colour": [
    "colour",
    "id"
  ],
  "attribute": "drop_all",
  "hero_power": "drop_all",
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT T2.colour FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = "Karen Beecher-Duncan"
=====================
Question: In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color.
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": "drop_all",
  "publisher": "drop_all",
  "superhero": [
    "weight_kg",
    "eye_colour_id",
    "id",
    "superhero_name",
    "full_name",
    "gender_id"
  ],
  "colour": [
    "id",
    "colour"
  ],
  "attribute": "drop_all",
  "hero_power": "drop_all",
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT SUM(CASE WHEN T1.eye_colour_id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.eye_colour_id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 WHERE T1.weight_kg IS NULL OR T1.weight_kg = 0
=====================
Question: How many green-skinned villains are there in the superhero universe?
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": "drop_all",
  "publisher": "drop_all",
  "superhero": [
    "skin_colour_id",
    "alignment_id",
    "id",
    "superhero_name",
    "full_name",
    "gender_id"
  ],
  "colour": [
    "colour",
    "id"
  ],
  "attribute": "drop_all",
  "hero_power": "drop_all",
  "race": "drop_all",
  "alignment": [
    "alignment",
    "id"
  ],
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T2.colour = 'Green' AND T3.alignment = 'bad'
=====================
Question: Identify superheroes who can control wind and list their names in alphabetical order.
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": [
    "id",
    "power_name"
  ],
  "publisher": "drop_all",
  "superhero": [
    "id",
    "superhero_name",
    "full_name",
    "gender_id",
    "eye_colour_id",
    "hair_colour_id"
  ],
  "colour": "drop_all",
  "attribute": "drop_all",
  "hero_power": [
    "hero_id",
    "power_id"
  ],
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Wind Control' ORDER BY T1.superhero_name
=====================
Question: Identify the gender of the superhero who has the ability of Phoenix Force.
 db_id: superhero
Selector: ```json
{
  "gender": [
    "id",
    "gender"
  ],
  "superpower": [
    "id",
    "power_name"
  ],
  "superhero": [
    "id",
    "gender_id",
    "superhero_name",
    "full_name"
  ],
  "publisher": "drop_all",
  "colour": "drop_all",
  "attribute": "drop_all",
  "hero_power": [
    "hero_id",
    "power_id"
  ],
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.gender
FROM gender AS T1
INNER JOIN superhero AS T2
  ON T1.id = T2.gender_id
INNER JOIN hero_power AS T3
  ON T2.id = T3.hero_id
INNER JOIN superpower AS T4
  ON T3.power_id = T4.id
WHERE
  T4.power_name = 'Phoenix Force';
=====================
Question: Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes.
 db_id: superhero
Selector: ```json
{
  "gender": "drop_all",
  "superpower": "drop_all",
  "publisher": [
    "id",
    "publisher_name"
  ],
  "superhero": [
    "publisher_id",
    "id",
    "superhero_name",
    "full_name",
    "gender_id",
    "eye_colour_id"
  ],
  "colour": "drop_all",
  "attribute": "drop_all",
  "hero_power": "drop_all",
  "race": "drop_all",
  "alignment": "drop_all",
  "hero_attribute": "drop_all"
}
```
Final SQL (attempt 1): SELECT (SELECT count(*) FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id  =  T2.id WHERE T2.publisher_name  =  'DC Comics') - (SELECT count(*) FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id  =  T2.id WHERE T2.publisher_name  =  'Marvel Comics');
=====================
Question: Which user has a higher reputation, Harlan or Jarrod Dixon?
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": "drop_all",
  "users": [
    "Reputation",
    "DisplayName",
    "Id",
    "CreationDate",
    "LastAccessDate",
    "WebsiteUrl"
  ],
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  CASE
    WHEN (
      SELECT
        Reputation
      FROM users
      WHERE
        DisplayName = 'Harlan'
    ) > (
      SELECT
        Reputation
      FROM users
      WHERE
        DisplayName = 'Jarrod Dixon'
    )
    THEN 'Harlan'
    ELSE 'Jarrod Dixon'
  END;
=====================
Question: Please list the display names of all the users whose accounts were created in the year 2011.
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": "drop_all",
  "users": [
    "CreationDate",
    "DisplayName",
    "Id",
    "Reputation",
    "LastAccessDate",
    "WebsiteUrl"
  ],
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": "drop_all"
}
```
Final SQL (attempt 1): SELECT DisplayName FROM users WHERE strftime('%Y', CreationDate) = '2011';
=====================
Question: How many users last accessed the website after 2014/9/1?
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": "drop_all",
  "users": [
    "LastAccessDate",
    "Id",
    "Reputation",
    "CreationDate",
    "DisplayName",
    "WebsiteUrl"
  ],
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(*) FROM users WHERE LastAccessDate > '2014-09-01'
=====================
Question: Who is the owner of the post "Eliciting priors from experts"?
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": [
    "Title",
    "OwnerUserId",
    "Id",
    "PostTypeId",
    "CreaionDate",
    "Score"
  ],
  "users": [
    "Id",
    "DisplayName",
    "Reputation",
    "CreationDate",
    "LastAccessDate",
    "WebsiteUrl"
  ],
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T2.DisplayName
FROM posts AS T1
INNER JOIN users AS T2
  ON T1.OwnerUserId = T2.Id
WHERE
  T1.Title = 'Eliciting priors from experts';
=====================
Question: How many posts does the user csgillespie own?
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": [
    "Id",
    "OwnerUserId",
    "PostTypeId",
    "CreaionDate",
    "Score",
    "ViewCount"
  ],
  "users": [
    "Id",
    "DisplayName",
    "Reputation",
    "CreationDate",
    "LastAccessDate",
    "WebsiteUrl"
  ],
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(p.Id)
FROM posts AS p
JOIN users AS u ON p.OwnerUserId = u.Id
WHERE u.DisplayName = 'csgillespie';
=====================
Question: What is the display name of the user who last edited the post "Examples for teaching: Correlation does not mean causation"?
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": [
    "Title",
    "LastEditorDisplayName",
    "LastEditorUserId",
    "Id",
    "CreaionDate",
    "Body"
  ],
  "users": [
    "DisplayName",
    "Id",
    "Reputation",
    "CreationDate",
    "LastAccessDate",
    "WebsiteUrl"
  ],
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.DisplayName
FROM Users AS T1
INNER JOIN Posts AS T2
  ON T1.Id = T2.LastEditorUserId
WHERE
  T2.Title = 'Examples for teaching: Correlation does not mean causation';
=====================
Question: Among the posts owned by an elder user, how many of them have a score of over 19?
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": [
    "Id",
    "Score",
    "OwnerUserId",
    "PostTypeId",
    "CreaionDate",
    "ViewCount"
  ],
  "users": [
    "Id",
    "Age",
    "Reputation",
    "CreationDate",
    "DisplayName",
    "LastAccessDate"
  ],
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(p.Id)
FROM posts AS p
JOIN users AS u ON p.OwnerUserId = u.Id
WHERE u.Age > 65 AND p.Score >= 20;
=====================
Question: From which post is the tag "bayesian" excerpted from? Please give the body of the post.
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": [
    "Id",
    "Body",
    "PostTypeId",
    "CreaionDate",
    "Score",
    "ViewCount"
  ],
  "users": "drop_all",
  "tags": [
    "TagName",
    "ExcerptPostId",
    "Id",
    "Count",
    "WikiPostId"
  ],
  "votes": "drop_all",
  "comments": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T2.Body
FROM tags AS T1
INNER JOIN posts AS T2
  ON T1.ExcerptPostId = T2.Id
WHERE
  T1.TagName = 'bayesian';
=====================
Question: What is the average score of the posts owned by the user csgillespie?
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": [
    "Score",
    "OwnerUserId",
    "Id",
    "PostTypeId",
    "CreaionDate",
    "ViewCount"
  ],
  "users": [
    "DisplayName",
    "Id",
    "Reputation",
    "CreationDate",
    "LastAccessDate",
    "WebsiteUrl"
  ],
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": "drop_all"
}
```
Final SQL (attempt 1): SELECT AVG(Score) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');
=====================
Question: Among the posts with a score of over 5, what is the percentage of them being owned by an elder user?
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": [
    "Id",
    "Score",
    "OwnerUserId",
    "PostTypeId",
    "CreaionDate",
    "ViewCount"
  ],
  "users": [
    "Id",
    "Age",
    "Reputation",
    "CreationDate",
    "DisplayName",
    "LastAccessDate"
  ],
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T2.Age > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score > 5
=====================
Question: User No.3025 gave a comment at 20:29:39 on 2014/4/23 to a post, how many favorite counts did that post get?
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": [
    "FavoriteCount",
    "Id",
    "CreaionDate",
    "PostTypeId",
    "AcceptedAnswerId",
    "Score"
  ],
  "users": [
    "Id",
    "Reputation",
    "CreationDate",
    "DisplayName",
    "LastAccessDate",
    "WebsiteUrl"
  ],
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": [
    "UserId",
    "CreationDate",
    "PostId",
    "Id",
    "Score",
    "Text"
  ]
}
```
Final SQL (attempt 1): SELECT T1.FavoriteCount FROM posts AS T1 JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.UserId = 3025 AND T2.CreationDate = '2014-04-23 20:29:39.0'
=====================
Question: User No.23853 gave a comment to a post at 9:08:18 on 2013/7/12, was that post well-finished?
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": [
    "Id",
    "PostTypeId",
    "CreaionDate",
    "OwnerUserId",
    "Body",
    "ClosedDate"
  ],
  "users": [
    "Id",
    "Reputation",
    "CreationDate",
    "DisplayName",
    "LastAccessDate",
    "WebsiteUrl"
  ],
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": [
    "Id",
    "PostId",
    "Text",
    "CreationDate",
    "UserId",
    "Score"
  ]
}
```
Final SQL (attempt 1): SELECT
  CASE WHEN T2.ClosedDate IS NULL THEN 'Yes' ELSE 'No' END
FROM comments AS T1
INNER JOIN posts AS T2
  ON T1.PostId = T2.Id
WHERE
  T1.UserId = 23853 AND T1.CreationDate = '2013-07-12 09:08:18.0';
=====================
Question: For the user with the display name of "Tiago Pasqualini", how many posts did he/she own?
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": [
    "Id",
    "OwnerUserId",
    "PostTypeId",
    "CreaionDate",
    "Score",
    "ViewCount"
  ],
  "users": [
    "DisplayName",
    "Id",
    "Reputation",
    "CreationDate",
    "LastAccessDate",
    "WebsiteUrl"
  ],
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(p.Id)
FROM Posts AS p
JOIN Users AS u ON p.OwnerUserId = u.Id
WHERE u.DisplayName = "Tiago Pasqualini"
=====================
Question: Provide the display name of the user who made the vote No.6347.
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": "drop_all",
  "users": [
    "Id",
    "DisplayName",
    "Reputation",
    "CreationDate",
    "LastAccessDate",
    "WebsiteUrl"
  ],
  "tags": "drop_all",
  "votes": [
    "Id",
    "UserId",
    "PostId",
    "VoteTypeId",
    "CreationDate",
    "BountyAmount"
  ],
  "comments": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T2.DisplayName
FROM votes AS T1
INNER JOIN users AS T2
  ON T1.UserId = T2.Id
WHERE
  T1.Id = 6347;
=====================
Question: For the user No.24, how many times is the number of his/her posts compared to his/her votes?
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": [
    "Id",
    "OwnerUserId",
    "PostTypeId",
    "CreaionDate",
    "Score",
    "ViewCount"
  ],
  "users": [
    "Id",
    "Reputation",
    "CreationDate",
    "DisplayName",
    "LastAccessDate",
    "WebsiteUrl"
  ],
  "tags": "drop_all",
  "votes": [
    "Id",
    "PostId",
    "VoteTypeId",
    "CreationDate",
    "UserId",
    "BountyAmount"
  ],
  "comments": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  CAST(SUM(CASE WHEN p.OwnerUserId = 24 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN v.UserId = 24 THEN 1 ELSE 0 END)
FROM posts AS p
JOIN votes AS v;
=====================
Question: How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": [
    "ViewCount",
    "Title",
    "Id",
    "CreaionDate",
    "Score",
    "Body"
  ],
  "users": "drop_all",
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": "drop_all"
}
```
Final SQL (attempt 1): SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';
=====================
Question: Write the contents of comments with a score of 17.
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": "drop_all",
  "users": "drop_all",
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": [
    "Text",
    "Score",
    "PostId",
    "Id",
    "CreationDate",
    "UserId"
  ]
}
```
Final SQL (attempt 1): SELECT Text FROM comments WHERE Score = 17
=====================
Question: Name the user that commented 'thank you user93!'
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": [
    "Id",
    "PostTypeId",
    "AcceptedAnswerId",
    "CreaionDate",
    "Score",
    "ViewCount"
  ],
  "users": [
    "Id",
    "Reputation",
    "CreationDate",
    "DisplayName",
    "LastAccessDate",
    "WebsiteUrl"
  ],
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": [
    "Id",
    "PostId",
    "Score",
    "Text",
    "CreationDate",
    "UserId",
    "UserDisplayName"
  ]
}
```
Final SQL (attempt 1): SELECT
  T2.DisplayName
FROM comments AS T1
INNER JOIN users AS T2
  ON T1.UserId = T2.Id
WHERE
  T1.Text = 'thank you user93!';
=====================
Question: Which user made a post titled 'Understanding what Dassault iSight is doing?' and how much is the reputation of the user?
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": [
    "Id",
    "Title",
    "OwnerUserId",
    "CreaionDate",
    "PostTypeId",
    "Score"
  ],
  "users": [
    "Reputation",
    "Id",
    "DisplayName",
    "CreationDate",
    "LastAccessDate",
    "WebsiteUrl"
  ],
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.DisplayName,
  T1.Reputation
FROM users AS T1
INNER JOIN posts AS T2
  ON T1.Id = T2.OwnerUserId
WHERE
  T2.Title = 'Understanding what Dassault iSight is doing?';
=====================
Question: Who is the owner of the post titled 'Open source tools for visualizing multi-dimensional data?'
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": [
    "Title",
    "OwnerDisplayName",
    "Id",
    "PostTypeId",
    "CreaionDate",
    "Score"
  ],
  "users": [
    "DisplayName",
    "Id",
    "Reputation",
    "CreationDate",
    "LastAccessDate",
    "WebsiteUrl"
  ],
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.DisplayName
FROM Users AS T1
INNER JOIN Posts AS T2
  ON T1.Id = T2.OwnerUserId
WHERE
  T2.Title = 'Open source tools for visualizing multi-dimensional data?';
=====================
Question: Write all the comments left by users who edited the post titled 'Why square the difference instead of taking the absolute value in standard deviation?'
 db_id: codebase_community
Selector: ```json
{
  "postHistory": [
    "Text",
    "UserId",
    "PostId",
    "CreationDate",
    "Id",
    "PostHistoryTypeId"
  ],
  "posts": [
    "Title",
    "Id",
    "OwnerUserId",
    "CreaionDate",
    "Body",
    "PostTypeId"
  ],
  "users": [
    "Id",
    "DisplayName",
    "CreationDate",
    "Reputation",
    "LastAccessDate",
    "WebsiteUrl"
  ],
  "badges": "drop_all",
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": [
    "Text",
    "PostId",
    "UserId",
    "CreationDate",
    "Id",
    "Score"
  ],
  "postLinks": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.Text FROM comments AS T1 JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = "Why square the difference instead of taking the absolute value in standard deviation?"
=====================
Question: Which user added a bounty amount of 50 to the post title mentioning variance?
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": [
    "Id",
    "Title",
    "CreaionDate",
    "OwnerUserId",
    "PostTypeId",
    "Score",
    "keep_all"
  ],
  "users": [
    "DisplayName",
    "Id",
    "Reputation",
    "CreationDate",
    "LastAccessDate",
    "WebsiteUrl",
    "keep_all"
  ],
  "tags": "drop_all",
  "votes": [
    "BountyAmount",
    "UserId",
    "PostId",
    "VoteTypeId",
    "CreationDate",
    "Id",
    "keep_all"
  ],
  "comments": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.DisplayName
FROM Users AS T1
INNER JOIN Posts AS T2
  ON T1.Id = T2.OwnerUserId
INNER JOIN Votes AS T3
  ON T2.Id = T3.PostId
WHERE
  T3.BountyAmount = 50 AND T2.Title LIKE '%variance%';
=====================
Question: Calculate the average view count of each post tagged as 'humor' and list the title and the comment of each post.
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": [
    "ViewCount",
    "Title",
    "Tags",
    "Id",
    "CreaionDate",
    "Score"
  ],
  "users": "drop_all",
  "tags": [
    "TagName",
    "Id",
    "Count",
    "ExcerptPostId",
    "WikiPostId"
  ],
  "votes": "drop_all",
  "comments": [
    "Text",
    "PostId",
    "Id",
    "Score",
    "CreationDate",
    "UserId"
  ]
}
```
Final SQL (attempt 1): SELECT
  AVG(CASE WHEN T1.Tags LIKE '%<humor>%' THEN T1.ViewCount ELSE NULL END),
  T1.Title,
  T2.Text
FROM posts AS T1
INNER JOIN comments AS T2
  ON T1.Id = T2.PostId;
=====================
Question: How many users are awarded with more than 5 badges?
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": [
    "UserId",
    "Id",
    "Name",
    "Date"
  ],
  "posts": "drop_all",
  "users": [
    "Id",
    "Reputation",
    "CreationDate",
    "DisplayName",
    "LastAccessDate",
    "WebsiteUrl"
  ],
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT UserId) FROM badges GROUP BY UserId HAVING COUNT(Name) > 5
=====================
Question: Which user have only one post history per post and having at least 1000 views?
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": [
    "UserId",
    "PostId",
    "Id",
    "PostHistoryTypeId",
    "RevisionGUID",
    "CreationDate"
  ],
  "badges": "drop_all",
  "posts": [
    "Id",
    "ViewCount",
    "OwnerUserId",
    "PostTypeId",
    "AcceptedAnswerId",
    "CreaionDate"
  ],
  "users": [
    "Id",
    "Views",
    "Reputation",
    "CreationDate",
    "DisplayName",
    "LastAccessDate"
  ],
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.OwnerUserId FROM Posts AS T1 INNER JOIN PostHistory AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount >= 1000 GROUP BY T1.OwnerUserId, T2.PostId HAVING COUNT(*) = 1
=====================
Question: What is the percentage difference of student badges given during 2010 and 2011?
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": [
    "Date",
    "Name",
    "UserId",
    "Id"
  ],
  "posts": "drop_all",
  "users": "drop_all",
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', Date) = '2010' THEN 1 ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', Date) = '2011' THEN 1 ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', Date) = '2010' OR STRFTIME('%Y', Date) = '2011' THEN 1 ELSE 0 END) FROM badges WHERE Name = 'Student'
=====================
Question: What is the average of the up votes and the average user age for users creating more than 10 posts?
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": [
    "OwnerUserId",
    "Id",
    "PostTypeId",
    "CreaionDate",
    "Score",
    "ViewCount"
  ],
  "users": [
    "UpVotes",
    "Age",
    "Id",
    "Reputation",
    "CreationDate",
    "DisplayName"
  ],
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": "drop_all"
}
```
Final SQL (attempt 1): SELECT AVG(T1.UpVotes), AVG(T1.Age) FROM users AS T1 JOIN posts AS T2 ON T1.Id = T2.OwnerUserId GROUP BY T2.OwnerUserId HAVING COUNT(T2.Id) > 10
=====================
Question: Calculate the ratio of votes in 2010 and 2011.
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": "drop_all",
  "users": "drop_all",
  "tags": "drop_all",
  "votes": [
    "Id",
    "CreationDate",
    "PostId",
    "VoteTypeId",
    "UserId",
    "BountyAmount"
  ],
  "comments": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  CAST(SUM(CASE WHEN STRFTIME('%Y', CreationDate) = '2010' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN STRFTIME('%Y', CreationDate) = '2011' THEN 1 ELSE 0 END)
FROM votes;
=====================
Question: Which post by slashnick has the most answers count? State the post ID.
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": [
    "Id",
    "AnswerCount",
    "OwnerUserId",
    "PostTypeId",
    "CreaionDate",
    "Score"
  ],
  "users": [
    "Id",
    "DisplayName",
    "Reputation",
    "CreationDate",
    "LastAccessDate",
    "WebsiteUrl"
  ],
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": "drop_all"
}
```
Final SQL (attempt 1): SELECT p.Id FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'slashnick' ORDER BY p.AnswerCount DESC LIMIT 1;
=====================
Question: Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": [
    "ViewCount",
    "Id",
    "OwnerUserId",
    "CreaionDate",
    "Score",
    "Body"
  ],
  "users": [
    "DisplayName",
    "Id",
    "Reputation",
    "CreationDate",
    "LastAccessDate",
    "WebsiteUrl"
  ],
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.Id, T1.ViewCount FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky' OR T2.DisplayName = 'Noah Snyder' ORDER BY T1.ViewCount DESC LIMIT 1
=====================
Question: State all the tags used by Mark Meckes in his posts that doesn't have comments.
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": [
    "Id",
    "Tags",
    "OwnerUserId",
    "PostTypeId",
    "CreaionDate",
    "Score"
  ],
  "users": [
    "Id",
    "DisplayName",
    "Reputation",
    "CreationDate",
    "LastAccessDate",
    "WebsiteUrl"
  ],
  "tags": "keep_all",
  "votes": "drop_all",
  "comments": [
    "Id",
    "PostId",
    "Score",
    "Text",
    "CreationDate",
    "UserId"
  ]
}
```
Final SQL (attempt 1): SELECT DISTINCT
  T1.Tags
FROM posts AS T1
INNER JOIN users AS T2
  ON T1.OwnerUserId = T2.Id
WHERE
  T2.DisplayName = 'Mark Meckes' AND T1.CommentCount = 0;
=====================
Question: Based on posts posted by Community, calculate the percentage of posts that use the R language.
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": [
    "Id",
    "OwnerUserId",
    "OwnerDisplayName",
    "Tags",
    "PostTypeId",
    "CreaionDate"
  ],
  "users": [
    "Id",
    "DisplayName",
    "Reputation",
    "CreationDate",
    "LastAccessDate",
    "WebsiteUrl"
  ],
  "tags": [
    "TagName",
    "Count",
    "Id",
    "ExcerptPostId",
    "WikiPostId"
  ],
  "votes": "drop_all",
  "comments": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T1.Tags LIKE '%<r>%' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 WHERE T1.OwnerDisplayName = 'Community'
=====================
Question: Calculate the difference in view count from post posted by Mornington and view count from posts posted by Amos.
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": [
    "ViewCount",
    "Id",
    "CreaionDate",
    "Score",
    "Body",
    "OwnerUserId"
  ],
  "users": [
    "DisplayName",
    "Id",
    "Reputation",
    "CreationDate",
    "LastAccessDate",
    "WebsiteUrl"
  ],
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  (
    SELECT
      SUM(ViewCount)
    FROM posts
    WHERE
      OwnerUserId = (
        SELECT
          Id
        FROM users
        WHERE
          DisplayName = 'Mornington'
      )
  ) - (
    SELECT
      SUM(ViewCount)
    FROM posts
    WHERE
      OwnerUserId = (
        SELECT
          Id
        FROM users
        WHERE
          DisplayName = 'Amos'
      )
  );
=====================
Question: What is the average monthly number of links created in 2010 for posts that have no more than 2 answers?
 db_id: codebase_community
Selector: ```json
{
  "postLinks": [
    "CreationDate",
    "Id",
    "PostId",
    "RelatedPostId",
    "LinkTypeId"
  ],
  "posts": [
    "AnswerCount",
    "CreaionDate",
    "Id",
    "PostTypeId",
    "AcceptedAnswerId",
    "Score"
  ],
  "postHistory": "drop_all",
  "badges": "drop_all",
  "users": "drop_all",
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(COUNT(T1.Id) AS REAL) / 12.0 FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.AnswerCount <= 2 AND STRFTIME('%Y', T1.CreationDate) = '2010'
=====================
Question: When did 'chl' cast its first vote in a post?
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": "drop_all",
  "users": [
    "Id",
    "DisplayName",
    "Reputation",
    "CreationDate",
    "LastAccessDate",
    "WebsiteUrl"
  ],
  "tags": "drop_all",
  "votes": [
    "CreationDate",
    "UserId",
    "PostId",
    "VoteTypeId",
    "Id",
    "BountyAmount"
  ],
  "comments": "drop_all"
}
```
Final SQL (attempt 1): SELECT MIN(T1.CreationDate) FROM Votes AS T1 INNER JOIN Users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'chl'
=====================
Question: What is the display name of the user who acquired the first Autobiographer badge?
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": [
    "Date",
    "Name",
    "UserId",
    "Id"
  ],
  "posts": "drop_all",
  "users": [
    "DisplayName",
    "Id",
    "Reputation",
    "CreationDate",
    "LastAccessDate",
    "WebsiteUrl"
  ],
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.DisplayName
FROM users AS T1
INNER JOIN badges AS T2
  ON T1.Id = T2.UserId
WHERE
  T2.Name = 'Autobiographer'
ORDER BY
  T2.Date
LIMIT 1;
=====================
Question: Among the users located in United Kingdom, how many users whose post have a total favorite amount of 4 or more?
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": [
    "FavoriteCount",
    "Id",
    "OwnerUserId",
    "PostTypeId",
    "CreaionDate",
    "Score"
  ],
  "users": [
    "Location",
    "Id",
    "Reputation",
    "CreationDate",
    "DisplayName",
    "LastAccessDate"
  ],
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.OwnerUserId) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.Location = 'United Kingdom' AND T1.FavoriteCount >= 4
=====================
Question: Which post by Harvey Motulsky has the most views? Please give the id and title of this post.
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": [
    "Id",
    "ViewCount",
    "OwnerUserId",
    "Title",
    "CreaionDate",
    "PostTypeId"
  ],
  "users": [
    "Id",
    "DisplayName",
    "Reputation",
    "CreationDate",
    "LastAccessDate",
    "WebsiteUrl"
  ],
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  p.Id,
  p.Title
FROM posts AS p
JOIN users AS u
  ON p.OwnerUserId = u.Id
WHERE
  u.DisplayName = 'Harvey Motulsky'
ORDER BY
  p.ViewCount DESC
LIMIT 1;
=====================
Question: Which is the most valuable post in 2010? Please give its id and the owner's display name.
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": [
    "Id",
    "CreaionDate",
    "FavoriteCount",
    "OwnerUserId",
    "Title",
    "PostTypeId"
  ],
  "users": [
    "Id",
    "DisplayName",
    "Reputation",
    "CreationDate",
    "LastAccessDate",
    "Views"
  ],
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  p.Id,
  u.DisplayName
FROM Posts AS p
JOIN Users AS u
  ON p.OwnerUserId = u.Id
WHERE
  STRFTIME('%Y', p.CreaionDate) = '2010'
ORDER BY
  p.FavoriteCount DESC
LIMIT 1;
=====================
Question: What is the percentage of posts whose owners had a reputation of over 1000 in 2011?
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": [
    "Id",
    "CreaionDate",
    "PostTypeId",
    "Score",
    "ViewCount",
    "Body"
  ],
  "users": [
    "Reputation",
    "Id",
    "CreationDate",
    "DisplayName",
    "LastAccessDate",
    "WebsiteUrl"
  ],
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T2.Reputation > 1000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM Posts AS T1 INNER JOIN Users AS T2 ON T1.OwnerUserId = T2.Id WHERE STRFTIME('%Y', T1.CreaionDate) = '2011'
=====================
Question: Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": [
    "Id",
    "PostId",
    "UserId",
    "CreationDate",
    "PostHistoryTypeId",
    "RevisionGUID"
  ],
  "badges": "drop_all",
  "posts": [
    "ViewCount",
    "Id",
    "OwnerUserId",
    "CreaionDate",
    "PostTypeId",
    "Score"
  ],
  "users": [
    "DisplayName",
    "Id",
    "Reputation",
    "LastAccessDate",
    "CreationDate",
    "WebsiteUrl"
  ],
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": "keep_all"
}
```
Final SQL (attempt 1): SELECT
  SUM(p.ViewCount),
  (
    SELECT
      u.DisplayName
    FROM users AS u
    JOIN posts AS p2
      ON u.Id = p2.OwnerUserId
    WHERE
      p2.Title = 'Computer Game Datasets'
    ORDER BY
      p2.CreaionDate DESC
    LIMIT 1
  )
FROM posts AS p
WHERE
  p.Title = 'Computer Game Datasets';
=====================
Question: How many comments were added to the post with the highest score?
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": [
    "Score",
    "Id",
    "PostTypeId",
    "CreaionDate",
    "ViewCount",
    "Body"
  ],
  "users": "drop_all",
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": [
    "PostId",
    "Id",
    "Score",
    "Text",
    "CreationDate",
    "UserId"
  ]
}
```
Final SQL (attempt 1): SELECT T1.CommentCount FROM posts AS T1 ORDER BY T1.Score DESC LIMIT 1
=====================
Question: Provide the text of the latest 10 comments to the post with the title 'Analysing wind data with R' and the display name of the user who left it.
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": [
    "Id",
    "Title",
    "CreaionDate",
    "PostTypeId",
    "AcceptedAnswerId",
    "Score"
  ],
  "users": [
    "Id",
    "DisplayName",
    "Reputation",
    "CreationDate",
    "LastAccessDate",
    "WebsiteUrl"
  ],
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": [
    "Id",
    "PostId",
    "Text",
    "CreationDate",
    "UserId",
    "UserDisplayName"
  ]
}
```
Final SQL (attempt 1): SELECT
  T1.Text,
  T2.DisplayName
FROM Comments AS T1
INNER JOIN Users AS T2
  ON T1.UserId = T2.Id
INNER JOIN Posts AS T3
  ON T1.PostId = T3.Id
WHERE
  T3.Title = 'Analysing wind data with R'
ORDER BY
  T1.CreationDate DESC
LIMIT 10;
=====================
Question: Among all the posts posted by the most influential user, identify the percentage with a score above 50.
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": [
    "Id",
    "Score",
    "OwnerUserId",
    "PostTypeId",
    "CreaionDate",
    "ViewCount"
  ],
  "users": [
    "Reputation",
    "Id",
    "CreationDate",
    "DisplayName",
    "LastAccessDate",
    "WebsiteUrl"
  ],
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN p.Score > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(p.Id)
FROM posts AS p
JOIN users AS u ON p.OwnerUserId = u.Id
WHERE u.Id = (SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1);
=====================
Question: What is the excerpt post ID and wiki post ID of the tag named sample?
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": "drop_all",
  "users": "drop_all",
  "tags": [
    "TagName",
    "ExcerptPostId",
    "WikiPostId",
    "Id",
    "Count"
  ],
  "votes": "drop_all",
  "comments": "drop_all"
}
```
Final SQL (attempt 1): SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'
=====================
Question: Give the user's reputation and up vote number of the user that commented "fine, you win :)".
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": "drop_all",
  "users": [
    "Id",
    "Reputation",
    "UpVotes",
    "DownVotes",
    "CreationDate",
    "DisplayName"
  ],
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": [
    "UserId",
    "Text",
    "Id",
    "PostId",
    "Score",
    "CreationDate"
  ]
}
```
Final SQL (attempt 1): SELECT
  T1.Reputation,
  T1.UpVotes
FROM users AS T1
INNER JOIN comments AS T2
  ON T1.Id = T2.UserId
WHERE
  T2.Text = 'fine, you win :)';
=====================
Question: Among the posts with views ranging from 100 to 150, what is the comment with the highest score?
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": [
    "ViewCount",
    "Id",
    "CreaionDate",
    "Score",
    "Body",
    "OwnerUserId"
  ],
  "users": "drop_all",
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": [
    "Score",
    "Text",
    "PostId",
    "Id",
    "CreationDate",
    "UserId"
  ]
}
```
Final SQL (attempt 1): SELECT
  T2.Text
FROM posts AS T1
INNER JOIN comments AS T2
  ON T1.Id = T2.PostId
WHERE
  T1.ViewCount BETWEEN 100 AND 150
ORDER BY
  T2.Score DESC
LIMIT 1;
=====================
Question: In posts with 1 comment, how many of the comments have 0 score?
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": [
    "Id",
    "CommentCount",
    "PostTypeId",
    "AcceptedAnswerId",
    "CreaionDate",
    "Score"
  ],
  "users": "drop_all",
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": [
    "Score",
    "PostId",
    "Id",
    "Text",
    "CreationDate",
    "UserId"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(T1.Id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CommentCount = 1 AND T1.Score = 0
=====================
Question: Among the comments with scores between 5 to 10, what is the percentage of the users with 0 up votes?
 db_id: codebase_community
Selector: ```json
{
  "postLinks": "drop_all",
  "postHistory": "drop_all",
  "badges": "drop_all",
  "posts": "drop_all",
  "users": [
    "Id",
    "UpVotes",
    "Reputation",
    "CreationDate",
    "DisplayName",
    "LastAccessDate"
  ],
  "tags": "drop_all",
  "votes": "drop_all",
  "comments": [
    "UserId",
    "Score",
    "Id",
    "PostId",
    "Text",
    "CreationDate"
  ]
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T2.UpVotes = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.UserId) FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 5 AND 10
=====================
Question: Which are the cards that have incredibly powerful foils.
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": [
    "cardKingdomFoilId",
    "cardKingdomId",
    "id",
    "name",
    "uuid",
    "artist"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": "keep_all",
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT name FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;
=====================
Question: What are the borderless cards available without powerful foils?
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": [
    "borderColor",
    "cardKingdomFoilId",
    "cardKingdomId",
    "name",
    "uuid",
    "id"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": "drop_all",
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT name
FROM cards
WHERE borderColor = 'borderless'
  AND cardKingdomId IS NULL;
=====================
Question: List all the mythic rarity print cards banned in gladiator format.
 db_id: card_games
Selector: ```json
{
  "legalities": [
    "status",
    "format",
    "uuid",
    "id"
  ],
  "cards": [
    "rarity",
    "uuid",
    "name",
    "text",
    "artist",
    "asciiName"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": "drop_all",
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T2.format = 'gladiator' AND T2.status = 'Banned'
=====================
Question: For artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.
 db_id: card_games
Selector: ```json
{
  "legalities": [
    "status",
    "format",
    "uuid",
    "id"
  ],
  "cards": [
    "types",
    "type",
    "uuid",
    "layout",
    "side",
    "name"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": "drop_all",
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.status
FROM legalities AS T1
INNER JOIN cards AS T2
  ON T1.uuid = T2.uuid
WHERE
  T2.types = 'Artifact' AND T2.side IS NULL AND T1.format = 'vintage';
=====================
Question: List all the card id and artist with unknown power which are legal for commander play format.
 db_id: card_games
Selector: ```json
{
  "legalities": [
    "status",
    "format",
    "uuid",
    "id"
  ],
  "cards": [
    "artist",
    "power",
    "uuid",
    "id",
    "asciiName",
    "name"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": "drop_all",
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.id, T1.artist FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal' AND (T1.power IS NULL OR T1.power = '*')
=====================
Question: Find all cards illustrated by Stephen Daniel and describe the text of the ruling of these cards. State if these cards have missing or degraded properties and values.
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": [
    "artist",
    "text",
    "hasContentWarning",
    "id",
    "name",
    "uuid"
  ],
  "rulings": [
    "text",
    "uuid",
    "date",
    "id"
  ],
  "set_translations": "drop_all",
  "sets": "drop_all",
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.uuid,
  T1.text,
  T1.hasContentWarning
FROM cards AS T1
INNER JOIN rulings AS T2
  ON T1.uuid = T2.uuid
WHERE
  T1.artist = 'Stephen Daniele';
=====================
Question: Name the card and artist with the most ruling information. Also state if the card is a promotional printing.
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": [
    "name",
    "artist",
    "isPromo",
    "uuid",
    "borderColor",
    "asciiName"
  ],
  "rulings": [
    "uuid",
    "text",
    "date",
    "id"
  ],
  "set_translations": "drop_all",
  "sets": "drop_all",
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.name,
  T1.artist,
  T1.isPromo
FROM cards AS T1
INNER JOIN (
  SELECT
    uuid,
    COUNT(uuid) AS ruling_count
  FROM rulings
  GROUP BY
    uuid
  ORDER BY
    ruling_count DESC
  LIMIT 1
) AS T2
  ON T1.uuid = T2.uuid;
=====================
Question: Calculate the percentage of the cards availabe in Chinese Simplified.
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": [
    "id",
    "uuid",
    "name",
    "text",
    "type",
    "types"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": "drop_all",
  "foreign_data": [
    "language",
    "id",
    "uuid",
    "name",
    "text",
    "type"
  ]
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM foreign_data
=====================
Question: How many cards have infinite power?
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": [
    "power",
    "id",
    "name",
    "uuid",
    "text",
    "type"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": "drop_all",
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(*) FROM cards WHERE power = '*'
=====================
Question: What is the border color of card "Ancestor's Chosen"?
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": [
    "borderColor",
    "name",
    "artist",
    "asciiName",
    "availability",
    "cardKingdomFoilId"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": "keep_all",
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT borderColor FROM cards WHERE name = 'Ancestor''s Chosen'
=====================
Question: What is the rule of playing card "Benalish Knight"?
 db_id: card_games
Selector: ```json
{
  "legalities": [
    "uuid",
    "status",
    "format",
    "id"
  ],
  "cards": [
    "text",
    "name",
    "uuid",
    "id",
    "asciiName",
    "setCode"
  ],
  "rulings": [
    "text",
    "uuid",
    "date",
    "id"
  ],
  "sets": "drop_all",
  "set_translations": "drop_all",
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.text FROM rulings AS T1 JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = "Benalish Knight"
=====================
Question: What is the percentage of borderless cards?
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": [
    "borderColor",
    "id",
    "artist",
    "asciiName",
    "availability",
    "cardKingdomFoilId"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": "drop_all",
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards
=====================
Question: What is the percentage of cards whose language is French among the Story Spotlight cards?
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": [
    "isStorySpotlight",
    "uuid",
    "id",
    "name",
    "text",
    "flavorText"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": "drop_all",
  "foreign_data": [
    "language",
    "uuid",
    "id",
    "name",
    "text",
    "flavorText"
  ]
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isStorySpotlight = 1
=====================
Question: How many cards with original type of "Summon - Angel" have subtype other than "Angel"?
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": [
    "originalType",
    "subtypes",
    "uuid",
    "name",
    "type",
    "text"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": "drop_all",
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(uuid) FROM cards WHERE originalType = "Summon - Angel" AND subtypes NOT LIKE '%Angel%'
=====================
Question: What are the cards belong to duel deck a? List the ID.
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": [
    "duelDeck",
    "id",
    "name",
    "uuid",
    "text",
    "type"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": "drop_all",
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT id FROM cards WHERE duelDeck = 'a'
=====================
Question: How many of the banned cards are white border?
 db_id: card_games
Selector: ```json
{
  "legalities": [
    "status",
    "uuid",
    "format",
    "id"
  ],
  "cards": [
    "borderColor",
    "uuid",
    "name",
    "availability",
    "artist",
    "asciiName"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": "drop_all",
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(T1.uuid) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' AND T1.borderColor = 'white'
=====================
Question: Among the Artifact cards, which are black color and comes with foreign languague translation?
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": [
    "uuid",
    "originalType",
    "colors",
    "name",
    "text",
    "type"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": "drop_all",
  "foreign_data": [
    "uuid",
    "language",
    "name",
    "text",
    "flavorText",
    "multiverseid"
  ]
}
```
Final SQL (attempt 1): SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B' AND T2.language != 'en'
=====================
Question: What is the mana cost of cards with a normal layout, a 2003 frame version, with a black border color, and available in paper and mtgo?
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": [
    "manaCost",
    "layout",
    "frameVersion",
    "borderColor",
    "availability",
    "name"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": "drop_all",
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT manaCost FROM cards WHERE layout = 'normal' AND frameVersion = '2003' AND borderColor = 'black' AND availability = 'mtgo,paper';
=====================
Question: What is the percentage of Story Spotlight cards that do not have a text box? List them by their ID.
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": [
    "id",
    "isStorySpotlight",
    "isTextless",
    "text",
    "name",
    "uuid"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": "drop_all",
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  CAST(SUM(CASE WHEN isStorySpotlight = 1 AND isTextless = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN isStorySpotlight = 1 THEN 1 ELSE 0 END)
FROM cards;
=====================
Question: How many Brazilian Portuguese translated sets are inside the Commander block?
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": "drop_all",
  "rulings": "drop_all",
  "set_translations": [
    "id",
    "language",
    "setCode",
    "translation"
  ],
  "sets": [
    "id",
    "name",
    "code",
    "block",
    "type",
    "releaseDate",
    "baseSetSize",
    "totalSetSize"
  ],
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.setCode) FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.language = 'Portuguese (Brasil)' AND T2.block = 'Commander'
=====================
Question: Lists all types of cards in German.
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": [
    "types",
    "subtypes",
    "supertypes",
    "name",
    "uuid",
    "id"
  ],
  "rulings": "drop_all",
  "set_translations": "keep_all",
  "sets": "drop_all",
  "foreign_data": [
    "language",
    "type",
    "name",
    "text",
    "multiverseid",
    "flavorText"
  ]
}
```
Final SQL (attempt 1): SELECT DISTINCT type FROM foreign_data WHERE language = 'German'
=====================
Question: How many unknown power cards contain info about the triggered ability
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": [
    "text",
    "power",
    "name",
    "uuid",
    "type",
    "types"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": "drop_all",
  "foreign_data": [
    "text",
    "name",
    "language",
    "uuid",
    "type",
    "multiverseid"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(*) FROM cards WHERE (power IS NULL OR power = '*') AND text LIKE '%triggered ability%';
=====================
Question: Indicates the number of cards with pre-modern format, ruling text "This is a triggered mana ability." that do not have multiple faces.
 db_id: card_games
Selector: ```json
{
  "legalities": [
    "format",
    "status",
    "uuid",
    "id",
    "keep_all"
  ],
  "cards": [
    "side",
    "uuid",
    "name",
    "layout",
    "id",
    "text"
  ],
  "rulings": [
    "text",
    "uuid",
    "date",
    "id",
    "keep_all"
  ],
  "sets": "drop_all",
  "set_translations": "drop_all",
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(T1.uuid) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN rulings AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'premodern' AND T3.text = 'This is a triggered mana ability.' AND T1.side IS NULL
=====================
Question: What is the foreign name of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson?
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": [
    "artist",
    "borderColor",
    "layout",
    "type",
    "name",
    "uuid"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": "drop_all",
  "foreign_data": [
    "language",
    "name",
    "type",
    "flavorText",
    "text",
    "uuid"
  ]
}
```
Final SQL (attempt 1): SELECT T1.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.type = 'Creature' AND T2.layout = 'normal' AND T2.borderColor = 'black' AND T2.artist = 'Matthew D. Wilson' AND T1.language = 'French'
=====================
Question: What language is the set of 180 cards that belongs to the Ravnica block translated into?
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": "drop_all",
  "rulings": "drop_all",
  "set_translations": [
    "id",
    "language",
    "setCode",
    "translation"
  ],
  "sets": [
    "id",
    "name",
    "code",
    "block",
    "baseSetSize",
    "releaseDate",
    "type",
    "totalSetSize",
    "isFoilOnly",
    "isForeignOnly",
    "isNonFoilOnly",
    "isOnlineOnly",
    "isPartialPreview",
    "keyruneCode",
    "mcmId",
    "mcmIdExtras",
    "mcmName",
    "mtgoCode",
    "parentCode",
    "tcgplayerGroupId",
    "booster"
  ],
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.language FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.baseSetSize = 180 AND T2.block = "Ravnica"
=====================
Question: What percentage of cards with format commander and legal status do not have a content warning?
 db_id: card_games
Selector: ```json
{
  "legalities": [
    "uuid",
    "status",
    "format",
    "id"
  ],
  "cards": [
    "uuid",
    "hasContentWarning",
    "name",
    "id",
    "availability",
    "borderColor"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": "drop_all",
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'legal'
=====================
Question: What percentage of cards without power are in French?
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": [
    "uuid",
    "name",
    "text",
    "power",
    "type",
    "types"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": "drop_all",
  "foreign_data": [
    "language",
    "uuid",
    "name",
    "text",
    "type",
    "multiverseid"
  ]
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T1.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.power) FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.power IS NULL OR T2.power = '*';
=====================
Question: What is the language of the card with the multiverse number 149934?
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": [
    "multiverseId",
    "name",
    "uuid",
    "type",
    "types",
    "text"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": "drop_all",
  "foreign_data": [
    "multiverseid",
    "language",
    "name",
    "uuid",
    "type",
    "text"
  ]
}
```
Final SQL (attempt 1): SELECT language FROM foreign_data WHERE multiverseid = 149934;
=====================
Question: What proportion of cards do not have a text box with a normal layout?
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": [
    "isTextless",
    "layout",
    "uuid",
    "name",
    "id",
    "text"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": "drop_all",
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout != 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards
=====================
Question: What languages are available in the set known as Archenemy on the magic card market and having the code ARC?
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": "drop_all",
  "rulings": "drop_all",
  "set_translations": [
    "id",
    "language",
    "setCode",
    "translation"
  ],
  "sets": [
    "mcmName",
    "code",
    "id",
    "name",
    "block",
    "releaseDate"
  ],
  "foreign_data": [
    "language",
    "name",
    "uuid",
    "id",
    "multiverseid",
    "text"
  ]
}
```
Final SQL (attempt 1): SELECT DISTINCT T1.language FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.mcmName = 'Archenemy' AND T2.code = 'ARC'
=====================
Question: Which foreign language used by "A Pedra Fellwar"?
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": [
    "name",
    "uuid",
    "artist",
    "asciiName",
    "availability",
    "borderColor"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": "drop_all",
  "foreign_data": [
    "name",
    "language",
    "uuid",
    "flavorText",
    "multiverseid",
    "text"
  ]
}
```
Final SQL (attempt 1): SELECT T1.language FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'A Pedra Fellwar'
=====================
Question: Which card costs more converted mana, "Serra Angel" or "Shrine Keeper"?
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": [
    "name",
    "convertedManaCost",
    "uuid",
    "text",
    "type",
    "types"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": "drop_all",
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  CASE
    WHEN (
      SELECT
        convertedManaCost
      FROM cards
      WHERE
        name = 'Serra Angel'
    ) > (
      SELECT
        convertedManaCost
      FROM cards
      WHERE
        name = 'Shrine Keeper'
    )
    THEN 'Serra Angel'
    ELSE 'Shrine Keeper'
  END;
=====================
Question: What's the Italian name of the set of cards with "Ancestor's Chosen" is in?
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": [
    "name",
    "uuid",
    "artist",
    "asciiName",
    "availability",
    "borderColor"
  ],
  "rulings": "drop_all",
  "set_translations": [
    "language",
    "translation",
    "setCode",
    "id"
  ],
  "sets": [
    "name",
    "code",
    "releaseDate",
    "block",
    "baseSetSize",
    "booster"
  ],
  "foreign_data": [
    "language",
    "name",
    "uuid",
    "flavorText",
    "multiverseid",
    "text"
  ]
}
```
Final SQL (attempt 1): SELECT
  T1.name
FROM sets AS T1
JOIN set_translations AS T2
  ON T1.code = T2.setCode
JOIN cards AS T3
  ON T3.setCode = T2.setCode
WHERE
  T2.language = 'Italian' AND T3.name = "Ancestor's Chosen";
=====================
Question: For the set of cards with "Ancestor's Chosen" in it, is there a Korean version of it?
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": [
    "name",
    "uuid",
    "id",
    "artist",
    "asciiName",
    "availability"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": "drop_all",
  "foreign_data": [
    "language",
    "name",
    "uuid",
    "id",
    "flavorText",
    "multiverseid"
  ]
}
```
Final SQL (attempt 1): SELECT CASE WHEN EXISTS (SELECT 1 FROM foreign_data WHERE language = 'Korean' AND uuid IN (SELECT uuid FROM cards WHERE name = 'Ancestor''s Chosen')) THEN 'Yes' ELSE 'No' END;
=====================
Question: Among the cards in the set "Hauptset Zehnte Edition", how many of them are designed by Adam Rex?
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": [
    "artist",
    "name",
    "setCode",
    "uuid",
    "id",
    "text"
  ],
  "rulings": "drop_all",
  "set_translations": [
    "translation",
    "setCode",
    "language",
    "id"
  ],
  "sets": [
    "code",
    "name",
    "totalSetSize",
    "releaseDate",
    "type",
    "baseSetSize"
  ],
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(T1.uuid) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.translation = 'Hauptset Zehnte Edition' AND T1.artist = 'Adam Rex'
=====================
Question: What is the Simplified Chinese translation of the name of the set "Eighth Edition"?
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": "drop_all",
  "rulings": "drop_all",
  "set_translations": [
    "translation",
    "language",
    "setCode",
    "id"
  ],
  "sets": [
    "name",
    "code",
    "id",
    "releaseDate",
    "type",
    "totalSetSize"
  ],
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.translation FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = "Eighth Edition" AND T1.language = "Chinese Simplified"
=====================
Question: Did the set of cards with "Angel of Mercy" appear on Magic: The Gathering Online?
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": [
    "name",
    "mtgoId",
    "uuid",
    "tcgplayerProductId",
    "setCode",
    "scryfallOracleId"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": [
    "mtgoCode",
    "name",
    "code",
    "type",
    "releaseDate",
    "totalSetSize"
  ],
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  CASE
    WHEN T1.mtgoCode IS NOT NULL
    THEN 'Yes'
    ELSE 'No'
  END
FROM sets AS T1
INNER JOIN cards AS T2
  ON T1.code = T2.setCode
WHERE
  T2.name = 'Angel of Mercy'
LIMIT 1;
=====================
Question: Among the sets in the block "Ice Age", how many of them have an Italian translation?
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": "drop_all",
  "rulings": "drop_all",
  "set_translations": [
    "language",
    "translation",
    "setCode",
    "id"
  ],
  "sets": [
    "block",
    "code",
    "name",
    "id",
    "releaseDate",
    "type"
  ],
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.code) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ice Age' AND T2.language = 'Italian' AND T2.translation IS NOT NULL
=====================
Question: Is the set of cards with Adarkar Valkyrie only available outside the United States?
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": [
    "name",
    "uuid",
    "availability",
    "borderColor",
    "artist",
    "asciiName"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": [
    "isForeignOnly",
    "name",
    "code",
    "type",
    "releaseDate",
    "totalSetSize"
  ],
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT CASE WHEN EXISTS (SELECT 1 FROM cards c JOIN sets s ON c.setCode = s.code WHERE c.name = 'Adarkar Valkyrie' AND s.isForeignOnly = 1) THEN 'Yes' ELSE 'No' END;
=====================
Question: Among the sets of cards that have an Italian translation, how many of them have a base set number of under 100?
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": "drop_all",
  "rulings": "drop_all",
  "set_translations": [
    "id",
    "language",
    "setCode",
    "translation"
  ],
  "sets": [
    "id",
    "baseSetSize",
    "code",
    "name",
    "totalSetSize",
    "type"
  ],
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.code) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = "Italian" AND T1.baseSetSize < 100
=====================
Question: Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy?
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": [
    "artist",
    "name",
    "setCode",
    "uuid",
    "id",
    "flavorText"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": [
    "name",
    "code",
    "id",
    "releaseDate",
    "type",
    "totalSetSize"
  ],
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT DISTINCT artist
FROM cards
WHERE setCode = (SELECT code FROM sets WHERE name = 'Coldsnap')
  AND artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy');
=====================
Question: Among the cards with converted mana cost higher than 5 in the set Coldsnap, how many of them have unknown power?
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": [
    "convertedManaCost",
    "power",
    "setCode",
    "name",
    "uuid",
    "text"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": [
    "name",
    "code",
    "releaseDate",
    "type",
    "totalSetSize",
    "baseSetSize"
  ],
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5 AND (T1.power = '*' OR T1.power IS NULL)
=====================
Question: What is the Italian flavor text of the card "Ancestor's Chosen"?
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": [
    "name",
    "flavorText",
    "artist",
    "asciiName",
    "availability",
    "borderColor"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": "drop_all",
  "foreign_data": [
    "language",
    "flavorText",
    "name",
    "text",
    "type",
    "multiverseid"
  ]
}
```
Final SQL (attempt 1): SELECT
  fd.flavorText
FROM foreign_data AS fd
JOIN cards AS c
  ON fd.uuid = c.uuid
WHERE
  c.name = 'Ancestor''s Chosen' AND fd.language = 'Italian';
=====================
Question: Please list the Italian text ruling of all the cards in the set Coldsnap.
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": [
    "name",
    "uuid",
    "artist",
    "asciiName",
    "availability",
    "borderColor"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": [
    "name",
    "code",
    "releaseDate",
    "type",
    "totalSetSize",
    "tcgplayerGroupId"
  ],
  "foreign_data": [
    "text",
    "language",
    "uuid",
    "name",
    "type",
    "flavorText"
  ]
}
```
Final SQL (attempt 1): SELECT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T3 ON T2.setCode = T3.code WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'
=====================
Question: Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": [
    "convertedManaCost",
    "name",
    "setCode",
    "uuid",
    "id",
    "artist"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": [
    "name",
    "code",
    "id",
    "releaseDate",
    "type",
    "totalSetSize"
  ],
  "foreign_data": [
    "name",
    "language",
    "uuid",
    "id",
    "flavorText",
    "multiverseid"
  ]
}
```
Final SQL (attempt 1): SELECT T1.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T3 ON T2.setCode = T3.code WHERE T1.language = "Italian" AND T3.name = "Coldsnap" AND T2.convertedManaCost = (SELECT MAX(T1.convertedManaCost) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = "Coldsnap")
=====================
Question: What is the percentage of the cards with a converted mana cost of 7 in the set Coldsnap?
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": [
    "convertedManaCost",
    "setCode",
    "name",
    "uuid",
    "text",
    "type"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": [
    "name",
    "code",
    "totalSetSize",
    "releaseDate",
    "type",
    "baseSetSize"
  ],
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.convertedManaCost) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = "Coldsnap"
=====================
Question: What is the percentage of incredibly powerful cards in the set Coldsnap?
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": [
    "cardKingdomId",
    "cardKingdomFoilId",
    "setCode",
    "name",
    "uuid",
    "artist"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": [
    "name",
    "code",
    "totalSetSize",
    "releaseDate",
    "type",
    "baseSetSize"
  ],
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.uuid) FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = "Coldsnap"
=====================
Question: Which of the play format has the highest number of banned status? Indicate the play format and the names of all the card meet the condition.
 db_id: card_games
Selector: ```json
{
  "legalities": [
    "status",
    "format",
    "uuid",
    "id"
  ],
  "cards": [
    "uuid",
    "name",
    "id",
    "availability",
    "artist",
    "setCode"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": "drop_all",
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  T1.name,
  T2.format
FROM cards AS T1
INNER JOIN legalities AS T2
  ON T1.uuid = T2.uuid
WHERE
  T2.format = (
    SELECT
      format
    FROM legalities
    WHERE
      status = 'Banned'
    GROUP BY
      format
    ORDER BY
      COUNT(*) DESC
    LIMIT 1
  )
  AND T2.status = 'Banned';
=====================
Question: Which cards are ranked 1st on EDHRec? List all of the cards name and its banned play format.
 db_id: card_games
Selector: ```json
{
  "legalities": [
    "status",
    "format",
    "uuid",
    "id"
  ],
  "cards": [
    "name",
    "edhrecRank",
    "uuid",
    "artist",
    "asciiName",
    "availability"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": "drop_all",
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned'
=====================
Question: List the names of all the cards in the set Hour of Devastation and find the formats in which these cards are legal.
 db_id: card_games
Selector: ```json
{
  "legalities": [
    "status",
    "format",
    "uuid",
    "id"
  ],
  "cards": [
    "name",
    "uuid",
    "setCode",
    "id",
    "asciiName",
    "artist"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "sets": [
    "name",
    "code",
    "releaseDate",
    "type",
    "totalSetSize",
    "baseSetSize"
  ],
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T3 ON T1.setCode = T3.code WHERE T3.name = 'Hour of Devastation' AND T2.status = 'Legal'
=====================
Question: Find and list the names of sets which doesn't have Japanese translation but have Korean translation.
 db_id: card_games
Selector: ```json
{
  "legalities": "drop_all",
  "cards": "drop_all",
  "rulings": "drop_all",
  "set_translations": [
    "translation",
    "setCode",
    "language",
    "id"
  ],
  "sets": [
    "name",
    "code",
    "releaseDate",
    "type",
    "totalSetSize",
    "tcgplayerGroupId",
    "baseSetSize",
    "id",
    "block",
    "booster",
    "isFoilOnly",
    "isForeignOnly",
    "isNonFoilOnly",
    "isOnlineOnly",
    "isPartialPreview",
    "keyruneCode",
    "mcmId",
    "mcmIdExtras",
    "mcmName",
    "mtgoCode",
    "parentCode"
  ],
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT s.name
FROM sets AS s
WHERE s.code IN (SELECT st.setCode FROM set_translations AS st WHERE st.language = 'Korean'
EXCEPT
SELECT st.setCode FROM set_translations AS st WHERE st.language LIKE '%Japanese%');
=====================
Question: List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.
 db_id: card_games
Selector: ```json
{
  "legalities": [
    "status",
    "uuid",
    "format",
    "id"
  ],
  "cards": [
    "artist",
    "frameVersion",
    "name",
    "uuid",
    "id",
    "text"
  ],
  "sets": [
    "name",
    "code",
    "releaseDate",
    "type",
    "totalSetSize",
    "tcgplayerGroupId"
  ],
  "rulings": "drop_all",
  "set_translations": "drop_all",
  "foreign_data": "drop_all"
}
```
Final SQL (attempt 1): SELECT DISTINCT T1.frameVersion,
       T2.name
FROM cards AS T1
LEFT JOIN legalities AS T3 ON T1.uuid = T3.uuid
LEFT JOIN cards AS T2 ON T3.uuid = T2.uuid
WHERE T1.artist = 'Allen Williams' AND T3.status = 'Banned';
=====================
Question: What is the most common bond type?
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "bond_type",
    "molecule_id",
    "bond_id"
  ],
  "molecule": [
    "molecule_id",
    "label"
  ],
  "atom": [
    "atom_id",
    "molecule_id",
    "element"
  ],
  "connected": "drop_all"
}
```
Final SQL (attempt 1): SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(*) DESC LIMIT 1
=====================
Question: Calculate the average number of oxygen atoms in single-bonded molecules.
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "bond_id",
    "molecule_id",
    "bond_type"
  ],
  "molecule": [
    "molecule_id",
    "label"
  ],
  "atom": [
    "atom_id",
    "molecule_id",
    "element"
  ],
  "connected": [
    "atom_id2",
    "atom_id",
    "bond_id"
  ]
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T1.element = 'O' THEN 1 ELSE 0 END) AS REAL) / COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-'
=====================
Question: On average how many carcinogenic molecules are single bonded?
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "bond_type",
    "molecule_id",
    "bond_id"
  ],
  "molecule": [
    "label",
    "molecule_id"
  ],
  "atom": [
    "molecule_id",
    "atom_id",
    "element"
  ],
  "connected": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T1.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) / COUNT(DISTINCT T1.molecule_id) FROM bond AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'
=====================
Question: Find the triple-bonded molecules which are carcinogenic.
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "bond_type",
    "molecule_id",
    "bond_id"
  ],
  "molecule": [
    "label",
    "molecule_id"
  ],
  "atom": [
    "molecule_id",
    "atom_id",
    "element"
  ],
  "connected": [
    "bond_id",
    "atom_id2",
    "atom_id"
  ]
}
```
Final SQL (attempt 1): SELECT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '+'
=====================
Question: What is the percentage of carbon in double-bond molecules?
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "bond_type",
    "molecule_id",
    "bond_id"
  ],
  "molecule": [
    "molecule_id",
    "label"
  ],
  "atom": [
    "element",
    "molecule_id",
    "atom_id"
  ],
  "connected": [
    "atom_id2",
    "bond_id",
    "atom_id"
  ]
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T1.element = 'c' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '='
=====================
Question: What elements are in the TR004_8_9 bond atoms?
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "bond_id",
    "molecule_id",
    "bond_type"
  ],
  "molecule": [
    "molecule_id",
    "label"
  ],
  "atom": [
    "element",
    "molecule_id",
    "atom_id"
  ],
  "connected": [
    "bond_id",
    "atom_id2",
    "atom_id"
  ]
}
```
Final SQL (attempt 1): SELECT T1.element FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9' UNION SELECT T1.element FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id2 WHERE T2.bond_id = 'TR004_8_9'
=====================
Question: What elements are in a double type bond?
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "bond_type",
    "molecule_id",
    "bond_id"
  ],
  "molecule": [
    "molecule_id",
    "label"
  ],
  "atom": [
    "element",
    "molecule_id",
    "atom_id"
  ],
  "connected": [
    "bond_id",
    "atom_id2",
    "atom_id"
  ]
}
```
Final SQL (attempt 1): SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = "="
UNION
SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id2 INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = "="
=====================
Question: Which type of label is the most numerous in atoms with hydrogen?
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "bond_id",
    "molecule_id",
    "bond_type"
  ],
  "molecule": [
    "molecule_id",
    "label"
  ],
  "atom": [
    "element",
    "molecule_id",
    "atom_id"
  ],
  "connected": [
    "atom_id",
    "atom_id2",
    "bond_id"
  ]
}
```
Final SQL (attempt 1): SELECT T1.label FROM molecule AS T1 JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'h' GROUP BY T1.label ORDER BY COUNT(T1.label) DESC LIMIT 1
=====================
Question: Which element is the least numerous in non-carcinogenic molecules?
 db_id: toxicology
Selector: ```json
{
  "bond": "drop_all",
  "molecule": [
    "molecule_id",
    "label"
  ],
  "atom": [
    "element",
    "molecule_id",
    "atom_id"
  ],
  "connected": "drop_all"
}
```
Final SQL (attempt 1): SELECT element FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '-') GROUP BY element ORDER BY count(*) ASC LIMIT 1
=====================
Question: What type of bond is there between the atoms TR004_8 and TR004_20?
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "bond_type",
    "molecule_id",
    "bond_id"
  ],
  "molecule": "drop_all",
  "atom": "drop_all",
  "connected": [
    "bond_id",
    "atom_id2",
    "atom_id"
  ]
}
```
Final SQL (attempt 1): SELECT
  T1.bond_type
FROM bond AS T1
INNER JOIN connected AS T2
  ON T1.bond_id = T2.bond_id
WHERE
  (
    T2.atom_id = 'TR004_8' AND T2.atom_id2 = 'TR004_20'
  ) OR (
    T2.atom_id = 'TR004_20' AND T2.atom_id2 = 'TR004_8'
  );
=====================
Question: How many atoms with iodine and with sulfur type elements are there in single bond molecules?
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "bond_type",
    "molecule_id",
    "bond_id"
  ],
  "molecule": [
    "molecule_id",
    "label"
  ],
  "atom": [
    "element",
    "molecule_id",
    "atom_id"
  ],
  "connected": [
    "bond_id",
    "atom_id2",
    "atom_id"
  ]
}
```
Final SQL (attempt 1): SELECT SUM(CASE WHEN T1.element = 'i' THEN 1 ELSE 0 END), SUM(CASE WHEN T1.element = 's' THEN 1 ELSE 0 END) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-'
=====================
Question: What percentage of carcinogenic-type molecules does not contain fluorine?
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "bond_id",
    "molecule_id",
    "bond_type"
  ],
  "molecule": [
    "molecule_id",
    "label"
  ],
  "atom": [
    "element",
    "molecule_id",
    "atom_id"
  ],
  "connected": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T1.element = 'F' THEN 0 ELSE 1 END) AS REAL) * 100 / COUNT(T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'
=====================
Question: What is the percentage of carcinogenic molecules in triple type bonds?
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "bond_type",
    "molecule_id",
    "bond_id"
  ],
  "molecule": [
    "label",
    "molecule_id"
  ],
  "atom": "drop_all",
  "connected": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.bond_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'
=====================
Question: Please list top three elements of the toxicology of the molecule TR000 in alphabetical order.
 db_id: toxicology
Selector: ```json
{
  "bond": "drop_all",
  "molecule": [
    "molecule_id",
    "label"
  ],
  "atom": [
    "molecule_id",
    "element",
    "atom_id"
  ],
  "connected": "keep_all"
}
```
Final SQL (attempt 1): SELECT element FROM atom WHERE molecule_id = 'TR000' GROUP BY element ORDER BY element ASC LIMIT 3
=====================
Question: What is the percentage of double bonds in the molecule TR008? Please provide your answer as a percentage with five decimal places.
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "bond_type",
    "molecule_id",
    "bond_id"
  ],
  "molecule": [
    "molecule_id",
    "label"
  ],
  "atom": "drop_all",
  "connected": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(bond_id) FROM bond WHERE molecule_id = 'TR008';
=====================
Question: What is the percentage of molecules that are carcinogenic? Please provide your answer as a percentage with three decimal places.
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "bond_id",
    "molecule_id",
    "bond_type"
  ],
  "molecule": [
    "label",
    "molecule_id"
  ],
  "atom": "drop_all",
  "connected": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(molecule_id) FROM molecule
=====================
Question: How much of the hydrogen in molecule TR206 is accounted for? Please provide your answer as a percentage with four decimal places.
 db_id: toxicology
Selector: ```json
{
  "bond": "drop_all",
  "molecule": [
    "molecule_id",
    "label"
  ],
  "atom": [
    "element",
    "molecule_id",
    "atom_id"
  ],
  "connected": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN element = 'H' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM atom WHERE molecule_id = 'TR206'
=====================
Question: What are the elements of the toxicology and label of molecule TR060?
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "molecule_id",
    "bond_type",
    "bond_id"
  ],
  "molecule": [
    "molecule_id",
    "label"
  ],
  "atom": [
    "molecule_id",
    "element",
    "atom_id"
  ],
  "connected": [
    "bond_id",
    "atom_id2",
    "atom_id"
  ]
}
```
Final SQL (attempt 1): SELECT T1.element, T2.label FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR060'
=====================
Question: Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic?
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "bond_type",
    "molecule_id",
    "bond_id"
  ],
  "molecule": [
    "molecule_id",
    "label"
  ],
  "atom": "drop_all",
  "connected": "drop_all"
}
```
Final SQL (attempt 1): SELECT b.bond_type, m.label FROM bond AS b JOIN molecule AS m ON b.molecule_id = m.molecule_id WHERE b.molecule_id = "TR010" GROUP BY b.bond_type ORDER BY COUNT(b.bond_type) DESC LIMIT 1
=====================
Question: Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order.
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "bond_type",
    "molecule_id",
    "bond_id"
  ],
  "molecule": [
    "label",
    "molecule_id"
  ],
  "atom": "drop_all",
  "connected": [
    "bond_id",
    "atom_id2",
    "atom_id"
  ]
}
```
Final SQL (attempt 1): SELECT T1.molecule_id FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' AND T2.bond_type = '-' GROUP BY T1.molecule_id ORDER BY T1.molecule_id ASC LIMIT 3
=====================
Question: How many bonds which involved atom 12 does molecule TR009 have?
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "molecule_id",
    "bond_id",
    "bond_type"
  ],
  "molecule": [
    "molecule_id",
    "label"
  ],
  "atom": [
    "molecule_id",
    "atom_id",
    "element"
  ],
  "connected": [
    "bond_id",
    "atom_id2",
    "atom_id"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.bond_id)
FROM bond AS T1
INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id
WHERE
    T1.molecule_id = 'TR009'
    AND (T2.atom_id = 'TR009_12' OR T2.atom_id2 = 'TR009_12');
=====================
Question: What are the bond type and the atoms of the bond ID of TR001_6_9?
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "bond_type",
    "molecule_id",
    "bond_id"
  ],
  "molecule": [
    "molecule_id",
    "label"
  ],
  "atom": [
    "molecule_id",
    "element",
    "atom_id"
  ],
  "connected": [
    "bond_id",
    "atom_id2",
    "atom_id"
  ]
}
```
Final SQL (attempt 1): SELECT
  T1.bond_type,
  T2.atom_id,
  T2.atom_id2
FROM bond AS T1
INNER JOIN connected AS T2
  ON T1.bond_id = T2.bond_id
WHERE
  T1.bond_id = "TR001_6_9";
=====================
Question: How many connections does the atom 19 have?
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "bond_id",
    "molecule_id",
    "bond_type"
  ],
  "molecule": [
    "molecule_id",
    "label"
  ],
  "atom": "keep_all",
  "connected": "keep_all"
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT bond_id) FROM connected WHERE atom_id LIKE 'TR%_19'
=====================
Question: List all the elements of the toxicology of the molecule "TR004".
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "molecule_id",
    "bond_id",
    "bond_type"
  ],
  "molecule": [
    "molecule_id",
    "label"
  ],
  "atom": [
    "molecule_id",
    "element",
    "atom_id"
  ],
  "connected": [
    "bond_id",
    "atom_id",
    "atom_id2"
  ]
}
```
Final SQL (attempt 1): SELECT T1.element FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id  =  T2.molecule_id WHERE T2.label  =  "TR004"
=====================
Question: Among all the atoms from 21 to 25, list all the molecules that are carcinogenic.
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "bond_id",
    "molecule_id",
    "bond_type"
  ],
  "molecule": [
    "molecule_id",
    "label"
  ],
  "atom": [
    "atom_id",
    "molecule_id",
    "element"
  ],
  "connected": "drop_all"
}
```
Final SQL (attempt 1): SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTR(T1.atom_id, 7, 2) BETWEEN '21' AND '25' AND T2.label = '+'
=====================
Question: What are the bonds that have phosphorus and nitrogen as their atom elements?
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "bond_id",
    "molecule_id",
    "bond_type"
  ],
  "molecule": [
    "molecule_id",
    "label"
  ],
  "atom": [
    "element",
    "molecule_id",
    "atom_id"
  ],
  "connected": "keep_all"
}
```
Final SQL (attempt 1): SELECT DISTINCT T1.bond_type FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id  =  T2.molecule_id WHERE T2.element  =  'p' INTERSECT SELECT DISTINCT T1.bond_type FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id  =  T2.molecule_id WHERE T2.element  =  'n'
=====================
Question: Is the molecule with the most double bonds carcinogenic?
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "bond_type",
    "molecule_id",
    "bond_id"
  ],
  "molecule": [
    "label",
    "molecule_id"
  ],
  "atom": "drop_all",
  "connected": "drop_all"
}
```
Final SQL (attempt 1): SELECT CASE WHEN T1.label = '+' THEN 'Yes' ELSE 'No' END FROM molecule AS T1 JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = ' = ' GROUP BY T1.molecule_id ORDER BY COUNT(*) DESC LIMIT 1
=====================
Question: What is the average number of bonds the atoms with the element iodine have?
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "bond_id",
    "molecule_id",
    "bond_type"
  ],
  "molecule": [
    "molecule_id",
    "label"
  ],
  "atom": [
    "element",
    "atom_id",
    "molecule_id"
  ],
  "connected": [
    "atom_id",
    "atom_id2",
    "bond_id"
  ]
}
```
Final SQL (attempt 1): SELECT CAST(COUNT(T1.bond_id) AS REAL) / COUNT(DISTINCT T2.atom_id) FROM connected AS T1 JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T2.element = 'i'
=====================
Question: List all the elements of atoms that can not bond with any other atoms.
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "bond_id",
    "molecule_id",
    "bond_type"
  ],
  "molecule": [
    "molecule_id",
    "label"
  ],
  "atom": [
    "atom_id",
    "molecule_id",
    "element"
  ],
  "connected": [
    "atom_id2",
    "atom_id",
    "bond_id"
  ]
}
```
Final SQL (attempt 1): SELECT DISTINCT T1.element FROM atom AS T1 WHERE T1.atom_id NOT IN (SELECT atom_id FROM connected)
=====================
Question: What are the atoms of the triple bond with the molecule "TR041"?
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "bond_type",
    "molecule_id",
    "bond_id"
  ],
  "molecule": [
    "molecule_id",
    "label"
  ],
  "atom": [
    "molecule_id",
    "atom_id",
    "element"
  ],
  "connected": [
    "bond_id",
    "atom_id2",
    "atom_id"
  ]
}
```
Final SQL (attempt 1): SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T4 ON T1.atom_id = T4.atom_id INNER JOIN bond AS T3 ON T4.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND T1.molecule_id = 'TR041'
UNION
SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T4 ON T1.atom_id = T4.atom_id2 INNER JOIN bond AS T3 ON T4.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND T1.molecule_id = 'TR041'
=====================
Question: What are the elements of the atoms of TR144_8_19?
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "bond_id",
    "molecule_id",
    "bond_type"
  ],
  "molecule": [
    "molecule_id",
    "label"
  ],
  "atom": [
    "element",
    "molecule_id",
    "atom_id"
  ],
  "connected": "keep_all"
}
```
Final SQL (attempt 1): SELECT T1.element FROM atom AS T1 JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_id = "TR144_8_19"
=====================
Question: List the elements of all the triple bonds.
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "bond_type",
    "molecule_id",
    "bond_id"
  ],
  "molecule": [
    "molecule_id",
    "label"
  ],
  "atom": [
    "element",
    "molecule_id",
    "atom_id"
  ],
  "connected": [
    "bond_id",
    "atom_id2",
    "atom_id"
  ]
}
```
Final SQL (attempt 1): SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id  =  T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id  =  T3.bond_id WHERE T3.bond_type  =  '#'
=====================
Question: What proportion of single bonds are carcinogenic? Please provide your answer as a percentage with five decimal places.
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "bond_type",
    "bond_id",
    "molecule_id"
  ],
  "molecule": [
    "label",
    "molecule_id"
  ],
  "atom": "drop_all",
  "connected": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.bond_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-'
=====================
Question: Calculate the total atoms with triple-bond molecules containing the element phosphorus or bromine.
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "bond_type",
    "molecule_id",
    "bond_id"
  ],
  "molecule": [
    "molecule_id",
    "label"
  ],
  "atom": [
    "element",
    "molecule_id",
    "atom_id"
  ],
  "connected": [
    "bond_id",
    "atom_id2",
    "atom_id"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND (T1.element = 'p' OR T1.element = 'br')
=====================
Question: What is the composition of element chlorine in percentage among the single bond molecules?
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "bond_type",
    "molecule_id",
    "bond_id"
  ],
  "molecule": [
    "molecule_id",
    "label"
  ],
  "atom": [
    "element",
    "molecule_id",
    "atom_id"
  ],
  "connected": [
    "bond_id",
    "atom_id2",
    "atom_id"
  ]
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T1.element = 'Cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-'
=====================
Question: What are the elements for bond id TR001_10_11?
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "bond_id",
    "molecule_id",
    "bond_type"
  ],
  "molecule": [
    "molecule_id",
    "label"
  ],
  "atom": [
    "atom_id",
    "molecule_id",
    "element"
  ],
  "connected": "keep_all"
}
```
Final SQL (attempt 1): SELECT T2.element FROM bond AS T1 JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = "TR001_10_11"
=====================
Question: What is the percentage of element chlorine in carcinogenic molecules?
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "bond_id",
    "molecule_id",
    "bond_type"
  ],
  "molecule": [
    "molecule_id",
    "label"
  ],
  "atom": [
    "element",
    "molecule_id",
    "atom_id"
  ],
  "connected": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T1.element = 'Cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.element) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'
=====================
Question: Tally the toxicology element of the 4th atom of each molecule that was carcinogenic.
 db_id: toxicology
Selector: ```json
{
  "bond": "drop_all",
  "molecule": [
    "molecule_id",
    "label"
  ],
  "atom": [
    "element",
    "molecule_id",
    "atom_id"
  ],
  "connected": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.element, COUNT(T1.element) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, 7, 1) = '4' GROUP BY T1.element
=====================
Question: What is the ratio of Hydrogen elements in molecule ID TR006? List the ratio with its label.
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "bond_id",
    "molecule_id",
    "bond_type"
  ],
  "molecule": [
    "molecule_id",
    "label"
  ],
  "atom": [
    "element",
    "molecule_id",
    "atom_id"
  ],
  "connected": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T1.element = 'H' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.element), T2.label FROM atom AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR006' GROUP BY T2.label
=====================
Question: Which non-carcinogenic molecules consisted more than 5 atoms?
 db_id: toxicology
Selector: ```json
{
  "bond": [
    "bond_id",
    "molecule_id",
    "bond_type"
  ],
  "molecule": [
    "molecule_id",
    "label"
  ],
  "atom": "keep_all",
  "connected": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.molecule_id FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T2.atom_id) > 5
=====================
Question: How many schools with an average score in Math greater than 400 in the SAT test are exclusively virtual?
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "Virtual",
    "School",
    "District",
    "County",
    "City",
    "CDSCode"
  ],
  "satscores": [
    "AvgScrMath",
    "sname",
    "dname",
    "cname",
    "enroll12",
    "NumTstTakr"
  ],
  "frpm": [
    "School Name",
    "District Name",
    "County Name",
    "CDSCode",
    "Academic Year",
    "District Code"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.School = T2.sname WHERE T1.Virtual = 'F' AND T2.AvgScrMath > 400
=====================
Question: Please list the codes of the schools with a total enrollment of over 500.
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "CDSCode",
    "NCESDist",
    "NCESSchool",
    "School",
    "District",
    "County"
  ],
  "satscores": "drop_all",
  "frpm": [
    "Enrollment (K-12)",
    "Enrollment (Ages 5-17)",
    "School Name",
    "District Name",
    "County Name",
    "CDSCode"
  ]
}
```
Final SQL (attempt 1): SELECT CDSCode FROM frpm WHERE `Enrollment (K-12)` + `Enrollment (Ages 5-17)` > 500
=====================
Question: Among the schools with an SAT excellence rate of over 0.3, what is the highest eligible free rate for students aged 5-17?
 db_id: california_schools
Selector: ```json
{
  "schools": "drop_all",
  "satscores": [
    "NumGE1500",
    "NumTstTakr",
    "sname",
    "dname",
    "cname",
    "enroll12"
  ],
  "frpm": [
    "Percent (%) Eligible Free (Ages 5-17)",
    "Free Meal Count (Ages 5-17)",
    "Enrollment (Ages 5-17)",
    "School Name",
    "District Name",
    "County Name"
  ]
}
```
Final SQL (attempt 1): SELECT MAX(T1.`Free Meal Count (Ages 5-17)` / T1.`Enrollment (Ages 5-17)`) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.`School Name` = T2.sname WHERE CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr > 0.3
=====================
Question: Rank schools by their average score in Writing where the score is greater than 499, showing their charter numbers.
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "CharterNum",
    "School",
    "District",
    "County",
    "CDSCode",
    "NCESDist"
  ],
  "satscores": [
    "AvgScrWrite",
    "sname",
    "dname",
    "cname",
    "enroll12",
    "NumTstTakr"
  ],
  "frpm": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.CharterNum
FROM schools AS T1
INNER JOIN satscores AS T2 ON T1.School = T2.sname
WHERE T2.AvgScrWrite > 499 AND T1.charterNum IS NOT NULL
ORDER BY T2.AvgScrWrite DESC;
=====================
Question: List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools.
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "School",
    "Street",
    "City",
    "State",
    "Zip",
    "CDSCode"
  ],
  "satscores": "drop_all",
  "frpm": [
    "School Name",
    "Enrollment (K-12)",
    "Enrollment (Ages 5-17)",
    "CDSCode",
    "Academic Year",
    "County Name"
  ]
}
```
Final SQL (attempt 1): SELECT T2.School, T2.Street
FROM frpm AS T1
INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode
WHERE T1."Enrollment (K-12)" - T1."Enrollment (Ages 5-17)" > 30;
=====================
Question: Give the names of the schools with the percent eligible for free meals in K-12 is more than 0.1 and test takers whose test score is greater than or equal to 1500?
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "School",
    "County",
    "District",
    "City",
    "CDSCode",
    "NCESDist"
  ],
  "satscores": [
    "NumGE1500",
    "sname",
    "cname",
    "dname",
    "enroll12",
    "NumTstTakr"
  ],
  "frpm": [
    "Percent (%) Eligible Free (K-12)",
    "School Name",
    "Enrollment (K-12)",
    "Free Meal Count (K-12)",
    "CDSCode",
    "Academic Year"
  ]
}
```
Final SQL (attempt 1): SELECT T1."School" FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode INNER JOIN satscores AS T3 ON T1.School = T3.sname WHERE T2."Percent (%) Eligible Free (K-12)" > 0.1 AND T3.NumGE1500 > 0
=====================
Question: Name schools in Riverside which the average of average math score for SAT is grater than 400, what is the funding type of these schools?
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "School",
    "FundingType",
    "County",
    "District",
    "City",
    "CDSCode"
  ],
  "satscores": [
    "AvgScrMath",
    "cname",
    "sname",
    "dname",
    "cds",
    "enroll12"
  ],
  "frpm": [
    "School Name",
    "District Name",
    "County Name",
    "CDSCode",
    "Academic Year",
    "District Code"
  ]
}
```
Final SQL (attempt 1): SELECT T1.FundingType FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.School = T2.sname WHERE T1.County = "Riverside" AND T2.AvgScrMath > 400
=====================
Question: State the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17?
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "School",
    "Street",
    "City",
    "State",
    "Zip",
    "County"
  ],
  "satscores": "drop_all",
  "frpm": [
    "FRPM Count (Ages 5-17) (real)",
    "School Name",
    "County Name",
    "High Grade",
    "Low Grade",
    "CDSCode"
  ]
}
```
Final SQL (attempt 1): SELECT T1.School, T1.Street, T1.City, T1.State, T1.Zip FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.County = "Monterey" AND T2."FRPM Count (Ages 5-17)" > 800 AND T2."High Grade" = "12"
=====================
Question: What is the average score in writing for the schools that were opened after 1991 or closed before 2000? List the school names along with the score. Also, list the communication number of the schools if there is any.
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "Phone",
    "School",
    "OpenDate",
    "ClosedDate",
    "City",
    "District"
  ],
  "satscores": [
    "AvgScrWrite",
    "sname",
    "AvgScrRead",
    "AvgScrMath",
    "enroll12",
    "NumTstTakr"
  ],
  "frpm": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.sname, T1.AvgScrWrite, T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.sname = T2.School WHERE strftime('%Y', T2.OpenDate) > '1991' OR strftime('%Y', T2.ClosedDate) < '2000'
=====================
Question: Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average.
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "DOC",
    "School",
    "DOCType",
    "FundingType",
    "GSoffered",
    "GSserved"
  ],
  "satscores": "drop_all",
  "frpm": [
    "Enrollment (K-12)",
    "Enrollment (Ages 5-17)",
    "School Name",
    "Charter Funding Type",
    "School Type",
    "District Name"
  ]
}
```
Final SQL (attempt 1): SELECT T1."School Name", T2.DOCType
FROM frpm AS T1
INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode
WHERE T1."Enrollment (K-12)" IS NOT NULL AND T1."Enrollment (Ages 5-17)" IS NOT NULL
AND T1."Enrollment (K-12)" - T1."Enrollment (Ages 5-17)" > (
    SELECT avg(T1."Enrollment (K-12)" - T1."Enrollment (Ages 5-17)")
    FROM frpm AS T1
    INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode
    WHERE T2.FundingType = "Local" AND T1."Enrollment (K-12)" IS NOT NULL AND T1."Enrollment (Ages 5-17)" IS NOT NULL
)
=====================
Question: What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12?
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "School",
    "District",
    "County",
    "NCESSchool",
    "NCESDist",
    "CDSCode"
  ],
  "satscores": "drop_all",
  "frpm": [
    "Percent (%) Eligible Free (K-12)",
    "Free Meal Count (K-12)",
    "Enrollment (K-12)",
    "School Name",
    "District Name",
    "County Name"
  ]
}
```
Final SQL (attempt 1): SELECT CAST("Free Meal Count (K-12)" AS REAL) / "Enrollment (K-12)" FROM frpm WHERE "Enrollment (K-12)" IS NOT NULL ORDER BY "Enrollment (K-12)" DESC LIMIT 2 OFFSET 9
=====================
Question: What is the eligible free or reduced price meal rate for the top 5 schools in grades 1-12 with the highest free or reduced price meal count of the schools with the ownership code 66?
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "SOC",
    "SOCType",
    "School",
    "District",
    "County",
    "CDSCode"
  ],
  "satscores": "drop_all",
  "frpm": [
    "FRPM Count (K-12)",
    "Enrollment (K-12)",
    "Percent (%) Eligible FRPM (K-12)",
    "School Name",
    "District Name",
    "County Name"
  ]
}
```
Final SQL (attempt 1): SELECT CAST(T1."FRPM Count (K-12)" AS REAL) / T1."Enrollment (K-12)" AS eligible_free_or_reduced_price_meal_rate FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDScode WHERE T2.SOC = '66' ORDER BY T1."FRPM Count (K-12)" DESC LIMIT 5
=====================
Question: What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State.
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "School",
    "Street",
    "StreetAbr",
    "City",
    "Zip",
    "State"
  ],
  "satscores": [
    "NumGE1500",
    "NumTstTakr",
    "sname",
    "cname",
    "dname",
    "cds"
  ],
  "frpm": [
    "School Name",
    "County Name",
    "District Name",
    "CDSCode",
    "Academic Year",
    "County Code"
  ]
}
```
Final SQL (attempt 1): SELECT T1.Street, T1.City, T1.Zip, T1.State
FROM schools AS T1
INNER JOIN satscores AS T2 ON T1.School = T2.sname
ORDER BY CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr ASC
LIMIT 1;
=====================
Question: Under whose administration is the school with the highest number of students scoring 1500 or more on the SAT? Indicate their full names.
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "School",
    "AdmFName1",
    "AdmLName1",
    "AdmFName2",
    "AdmLName2",
    "AdmFName3",
    "keep_all"
  ],
  "satscores": [
    "NumGE1500",
    "sname",
    "cname",
    "dname",
    "enroll12",
    "AvgScrRead",
    "keep_all"
  ],
  "frpm": [
    "School Name",
    "County Name",
    "District Name",
    "Academic Year",
    "CDSCode",
    "District Code",
    "keep_all"
  ]
}
```
Final SQL (attempt 1): SELECT T1.AdmFName1, T1.AdmLName1, T1.AdmFName2, T1.AdmLName2, T1.AdmFName3, T1.AdmLName3 FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.School = T2.sname ORDER BY T2.NumGE1500 DESC LIMIT 1
=====================
Question: What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980?
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "OpenDate",
    "School",
    "County",
    "District",
    "City",
    "CDSCode",
    "NCESDist",
    "NCESSchool",
    "StatusType",
    "Street",
    "StreetAbr",
    "Zip",
    "State",
    "MailStreet",
    "MailStrAbr",
    "MailCity",
    "MailZip",
    "MailState",
    "Phone",
    "Ext",
    "Website",
    "ClosedDate",
    "Charter",
    "CharterNum",
    "FundingType",
    "DOC",
    "DOCType",
    "SOC",
    "SOCType",
    "EdOpsCode",
    "EdOpsName",
    "EILCode",
    "EILName",
    "GSoffered",
    "GSserved",
    "Virtual",
    "Magnet",
    "Latitude",
    "Longitude",
    "AdmFName1",
    "AdmLName1",
    "AdmEmail1",
    "AdmFName2",
    "AdmLName2",
    "AdmEmail2",
    "AdmFName3",
    "AdmLName3",
    "AdmEmail3",
    "LastUpdate"
  ],
  "satscores": [
    "NumTstTakr",
    "sname",
    "cname",
    "cds",
    "rtype",
    "dname",
    "enroll12",
    "AvgScrRead",
    "AvgScrMath",
    "AvgScrWrite",
    "NumGE1500"
  ],
  "frpm": "drop_all"
}
```
Final SQL (attempt 1): SELECT AVG(T1.NumTstTakr) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.City = "Fresno" AND STRFTIME('%Y', T2.OpenDate) = '1980'
=====================
Question: What is the telephone number for the school with the lowest average score in reading in Fresno Unified?
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "Phone",
    "School",
    "District",
    "County",
    "City",
    "Street"
  ],
  "satscores": [
    "dname",
    "AvgScrRead",
    "sname",
    "cname",
    "enroll12",
    "NumTstTakr"
  ],
  "frpm": [
    "District Name",
    "School Name",
    "County Name",
    "CDSCode",
    "Academic Year",
    "County Code"
  ]
}
```
Final SQL (attempt 1): SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.School = T2.sname WHERE T2.dname = "Fresno Unified" ORDER BY T2.AvgScrRead ASC LIMIT 1
=====================
Question: List the names of virtual schools that are among the top 5 in their respective counties based on average reading scores.
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "Virtual",
    "County",
    "School",
    "City",
    "District",
    "School",
    "keep_all"
  ],
  "satscores": [
    "cname",
    "sname",
    "AvgScrRead",
    "enroll12",
    "NumTstTakr",
    "AvgScrMath",
    "keep_all"
  ],
  "frpm": [
    "County Name",
    "District Name",
    "School Name",
    "County Code",
    "District Code",
    "School Code",
    "drop_all"
  ]
}
```
Final SQL (attempt 1): SELECT T1.sname FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.sname = T2.School WHERE T2.Virtual = 'F' AND T1.cname IN (SELECT T3.cname FROM satscores AS T3 GROUP BY T3.cname HAVING COUNT(*) >= 5)
=====================
Question: What is the average writing score of each of the schools managed by Ricci Ulrich? List the schools and the corresponding average writing scores.
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "AdmLName1",
    "School",
    "AdmFName1",
    "City",
    "County",
    "District"
  ],
  "satscores": [
    "AvgScrWrite",
    "sname",
    "cname",
    "dname",
    "enroll12",
    "NumTstTakr"
  ],
  "frpm": [
    "School Name",
    "District Name",
    "County Name",
    "Academic Year",
    "CDSCode",
    "District Code"
  ]
}
```
Final SQL (attempt 1): SELECT T1.School, AVG(T2.AvgScrWrite) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.School = T2.sname WHERE T1.AdmFName1 = 'Ricci' AND T1.AdmLName1 = 'Ulrich' GROUP BY T1.School
=====================
Question: Which state special schools have the highest number of enrollees from grades 1 through 12?
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "DOC",
    "SOCType",
    "School",
    "District",
    "County",
    "NCESSchool"
  ],
  "satscores": "drop_all",
  "frpm": [
    "Enrollment (K-12)",
    "School Name",
    "District Name",
    "County Name",
    "District Type",
    "School Type"
  ]
}
```
Final SQL (attempt 1): SELECT T1."School Name" FROM frpm AS T1 INNER JOIN schools AS T2 ON T1."School Name" = T2.School WHERE T2.DOC = '31' ORDER BY T1."Enrollment (K-12)" DESC LIMIT 1
=====================
Question: What is the monthly average number of schools that opened in Alameda County under the jurisdiction of the Elementary School District in 1980?
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "OpenDate",
    "County",
    "DOC",
    "District",
    "School",
    "StatusType"
  ],
  "satscores": "drop_all",
  "frpm": [
    "County Name",
    "District Name",
    "School Name",
    "School Code",
    "District Code",
    "County Code"
  ]
}
```
Final SQL (attempt 1): SELECT CAST(COUNT(CASE WHEN STRFTIME('%Y', OpenDate) = '1980' THEN CDSCode ELSE NULL END) AS REAL) / 12
FROM schools
WHERE County = 'Alameda' AND DOC = '52'
=====================
Question: What is the ratio of merged Unified School District schools in Orange County to merged Elementary School District schools?
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "DOC",
    "County",
    "District",
    "StatusType",
    "School",
    "CDSCode"
  ],
  "satscores": "drop_all",
  "frpm": [
    "District Type",
    "County Name",
    "District Name",
    "School Name",
    "CDSCode",
    "Academic Year"
  ]
}
```
Final SQL (attempt 1): SELECT
  CAST(SUM(CASE WHEN County = 'Orange' AND DOC = '54' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN County = 'Orange' AND DOC = '52' THEN 1 ELSE 0 END)
FROM schools;
=====================
Question: What is the postal street address for the school with the 7th highest Math average? Indicate the school's name.
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "School",
    "Street",
    "City",
    "State",
    "Zip",
    "CDSCode"
  ],
  "satscores": [
    "AvgScrMath",
    "sname",
    "enroll12",
    "NumTstTakr",
    "AvgScrRead",
    "AvgScrWrite"
  ],
  "frpm": [
    "School Name",
    "District Name",
    "County Name",
    "CDSCode",
    "School Code",
    "District Code"
  ]
}
```
Final SQL (attempt 1): SELECT T1.Street, T1.School FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.School = T2.sname ORDER BY T2.AvgScrMath DESC LIMIT 6, 1
=====================
Question: What is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%?
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "Charter",
    "County",
    "School",
    "District",
    "City",
    "CDSCode"
  ],
  "satscores": "drop_all",
  "frpm": [
    "Percent (%) Eligible Free (K-12)",
    "Free Meal Count (K-12)",
    "Enrollment (K-12)",
    "County Name",
    "Charter School (Y/N)",
    "School Name"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(T1.CDSCode) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.Charter = 0 AND T2.County = "Los Angeles" AND T1."Free Meal Count (K-12)" * 100 / T1."Enrollment (K-12)" < 0.18
=====================
Question: How many students from the ages of 5 to 17 are enrolled at the State Special School school in Fremont for the 2014-2015 academic year?
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "School",
    "EdOpsCode",
    "City",
    "County",
    "District",
    "CDSCode"
  ],
  "satscores": "drop_all",
  "frpm": [
    "School Name",
    "Academic Year",
    "Enrollment (Ages 5-17)",
    "District Name",
    "County Name",
    "District Code"
  ]
}
```
Final SQL (attempt 1): SELECT SUM(T1."Enrollment (Ages 5-17)") FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.City = "Fremont" AND T2.EdOpsCode = "SSS" AND T1."Academic Year" = 2015
=====================
Question: Which schools served a grade span of Kindergarten to 9th grade in the county of Los Angeles and what is its Percent (%) Eligible FRPM (Ages 5-17)?
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "County",
    "GSoffered",
    "School",
    "District",
    "City",
    "CDSCode"
  ],
  "satscores": "drop_all",
  "frpm": [
    "Percent (%) Eligible FRPM (Ages 5-17)",
    "FRPM Count (Ages 5-17)",
    "Enrollment (Ages 5-17)",
    "School Name",
    "County Name",
    "High Grade"
  ]
}
```
Final SQL (attempt 1): SELECT T1.School, T2."Percent (%) Eligible FRPM (Ages 5-17)" FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.County = "Los Angeles" AND T1.GSoffered = "K-9"
=====================
Question: Between San Diego and Santa Barbara, which county offers the most number of schools that does not offer physical building? Indicate the amount.
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "Virtual",
    "County",
    "School",
    "District",
    "City",
    "CDSCode"
  ],
  "satscores": "drop_all",
  "frpm": "drop_all"
}
```
Final SQL (attempt 1): SELECT County, COUNT(*) AS school_count
FROM schools
WHERE Virtual = 'F' AND County IN ('San Diego', 'Santa Barbara')
GROUP BY County
ORDER BY school_count DESC
LIMIT 1;
=====================
Question: What is the grade span offered in the school with the highest longitude?
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "Longitude",
    "GSoffered",
    "County",
    "District",
    "School",
    "City"
  ],
  "satscores": "drop_all",
  "frpm": "drop_all"
}
```
Final SQL (attempt 1): SELECT GSoffered FROM schools ORDER BY Longitude DESC LIMIT 1
=====================
Question: Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city.
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "Magnet",
    "GSoffered",
    "City",
    "School",
    "NCESSchool",
    "NCESDist",
    "keep_all"
  ],
  "satscores": "drop_all",
  "frpm": [
    "NSLP Provision Status",
    "School Name",
    "School Type",
    "School Code",
    "Percent (%) Eligible FRPM (K-12)",
    "FRPM Count (K-12) (real)",
    "Percent (%) Eligible Free (K-12) (real)"
  ]
}
```
Final SQL (attempt 3): SELECT COUNT(DISTINCT T1.School)
FROM schools AS T1
INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode
WHERE T1.GSoffered = 'K-8'
AND T1.Magnet = 1
AND T2."NSLP Provision Status" = 'Multiple Provision Types';

SELECT City, COUNT(*)
FROM schools
WHERE GSoffered = 'K-8'
GROUP BY City;
Final Error: You can only execute one statement at a time.
=====================
Question: Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city.
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "Magnet",
    "GSoffered",
    "City",
    "School",
    "NCESSchool",
    "NCESDist"
  ],
  "satscores": "drop_all",
  "frpm": [
    "NSLP Provision Status",
    "Low Grade",
    "High Grade",
    "School Name",
    "District Name",
    "County Name"
  ]
}
```
Final SQL (attempt 3): SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.Magnet = 1 AND T2."Low Grade" = 'K' AND T2."High Grade" = '8' AND T2."NSLP Provision Status" = 'Multiple Provision Types';

SELECT T1.City, COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2."Low Grade" = 'K' AND T2."High Grade" = '8' GROUP BY T1.City;
Final Error: You can only execute one statement at a time.
=====================
Question: Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city.
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "Magnet",
    "GSoffered",
    "City",
    "School",
    "County",
    "District"
  ],
  "satscores": "drop_all",
  "frpm": [
    "NSLP Provision Status",
    "School Name",
    "School Type",
    "District Name",
    "District Type",
    "County Name"
  ]
}
```
Final SQL (attempt 3): SELECT COUNT(DISTINCT T1.City) AS Number_of_Cities, SUM(CASE WHEN T1.Magnet = 1 AND T2."NSLP Provision Status" = 'Multiple Provision Types' THEN 1 ELSE 0 END) AS Number_of_Schools_with_Multiple_Provision_Types FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.GSoffered = 'K-8';

SELECT T1.City, COUNT(*) AS Number_of_Schools FROM schools AS T1 WHERE T1.GSoffered = 'K-8' GROUP BY T1.City;
Final Error: You can only execute one statement at a time.
=====================
Question: Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city.
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "Magnet",
    "GSoffered",
    "City",
    "School",
    "County",
    "District"
  ],
  "satscores": "drop_all",
  "frpm": [
    "NSLP Provision Status",
    "School Name",
    "District Name",
    "County Name",
    "School Code",
    "District Code"
  ]
}
```
Final SQL (attempt 3): SELECT COUNT(DISTINCT T1.CDSCode) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.Magnet = 1 AND T1.GSoffered = 'K-8' AND T2."NSLP Provision Status" = 'Multiple Provision Types';

SELECT COUNT(DISTINCT City) FROM schools WHERE GSoffered = 'K-8';

SELECT City, COUNT(*) FROM schools WHERE GSoffered = 'K-8' GROUP BY City;
Final Error: You can only execute one statement at a time.
=====================
Question: What is the grade span offered in the school with the highest longitude?
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "Longitude",
    "GSoffered",
    "School",
    "County",
    "District",
    "City"
  ],
  "satscores": "drop_all",
  "frpm": "drop_all"
}
```
Final SQL (attempt 1): SELECT GSoffered FROM schools ORDER BY Longitude DESC LIMIT 1
=====================
Question: What is the grade span offered in the school with the highest longitude?
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "Longitude",
    "GSoffered",
    "Latitude",
    "School",
    "District",
    "County"
  ],
  "satscores": "drop_all",
  "frpm": "drop_all"
}
```
Final SQL (attempt 1): SELECT GSoffered FROM schools ORDER BY Longitude DESC LIMIT 1
=====================
Question: Between San Diego and Santa Barbara, which county offers the most number of schools that does not offer physical building? Indicate the amount.
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "Virtual",
    "County",
    "School",
    "District",
    "City",
    "CDSCode"
  ],
  "satscores": "drop_all",
  "frpm": "drop_all"
}
```
Final SQL (attempt 1): SELECT County, COUNT(*) AS num FROM schools WHERE Virtual = 'F' AND County IN ('San Diego', 'Santa Barbara') GROUP BY County ORDER BY num DESC LIMIT 1
=====================
Question: Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city.
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "Magnet",
    "GSoffered",
    "City",
    "School",
    "County",
    "District"
  ],
  "satscores": "drop_all",
  "frpm": [
    "NSLP Provision Status",
    "School Name",
    "School Type",
    "District Name",
    "District Type",
    "County Name"
  ]
}
```
Final SQL (attempt 3): SELECT COUNT(DISTINCT T1.City) AS Number_of_Cities, COUNT(T1.School) AS Number_of_Schools FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.GSoffered = 'K-8';
SELECT COUNT(*) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.Magnet = 1 AND T1.GSoffered = 'K-8' AND T2."NSLP Provision Status" = 'Multiple Provision Types';
SELECT T1.City, COUNT(T1.School) FROM schools AS T1 WHERE T1.GSoffered = 'K-8' GROUP BY T1.City;
Final Error: You can only execute one statement at a time.
=====================
Question: Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city.
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "Magnet",
    "GSoffered",
    "City",
    "School",
    "Longitude",
    "Latitude"
  ],
  "satscores": "drop_all",
  "frpm": [
    "NSLP Provision Status",
    "High Grade",
    "Low Grade",
    "School Name",
    "District Name",
    "County Name"
  ]
}
```
Final SQL (attempt 1): SELECT
  COUNT(DISTINCT CASE WHEN T1.Magnet = 1 THEN T1.City ELSE NULL END),
  COUNT(CASE WHEN T1.Magnet = 1 THEN T1.School ELSE NULL END)
FROM schools AS T1
INNER JOIN frpm AS T2
  ON T1.School = T2."School Name"
WHERE
  T2."NSLP Provision Status" = 'Multiple Provision Types'
  AND T1.GSoffered = 'K-8';
=====================
Question: Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city.
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "GSoffered",
    "Magnet",
    "City",
    "School",
    "District",
    "State"
  ],
  "satscores": "drop_all",
  "frpm": [
    "NSLP Provision Status",
    "School Name",
    "District Name",
    "District Type",
    "School Type",
    "Educational Option Type"
  ]
}
```
Final SQL (attempt 3): SELECT COUNT(DISTINCT T1.School) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.Magnet = 1 AND T1.GSoffered = 'K-8' AND T2.`NSLP Provision Status` = 'Multiple Provision Types'; SELECT COUNT(DISTINCT City) FROM schools WHERE GSoffered = 'K-8'; SELECT City, COUNT(*) FROM schools WHERE GSoffered = 'K-8' GROUP BY City
Final Error: You can only execute one statement at a time.
=====================
Question: Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city.
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "GSoffered",
    "Magnet",
    "City",
    "School",
    "District",
    "County"
  ],
  "satscores": "drop_all",
  "frpm": [
    "NSLP Provision Status",
    "Low Grade",
    "High Grade",
    "School Name",
    "District Name",
    "County Name"
  ]
}
```
Final SQL (attempt 3): SELECT COUNT(DISTINCT T1.School) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.School = T2."School Name" WHERE T1.Magnet = 1 AND T1.GSoffered = 'K-8' AND T2."NSLP Provision Status" = 'Multiple Provision Types';

SELECT City, COUNT(*) FROM schools WHERE GSoffered = 'K-8' GROUP BY City;
Final Error: You can only execute one statement at a time.
=====================
Question: Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city.
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "Magnet",
    "GSoffered",
    "City",
    "School",
    "County",
    "District"
  ],
  "satscores": "drop_all",
  "frpm": [
    "NSLP Provision Status",
    "School Name",
    "District Name",
    "County Name",
    "Low Grade",
    "High Grade"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT CASE WHEN T1.Magnet = 1 AND T2.`NSLP Provision Status` = 'Multiple Provision Types' THEN T1.CDSCode ELSE NULL END), COUNT(DISTINCT T1.City), T1.City, COUNT(T1.School) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.GSoffered = 'K-8' GROUP BY T1.City
=====================
Question: What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "AdmFName1",
    "District",
    "CDSCode",
    "County",
    "School",
    "City"
  ],
  "satscores": "drop_all",
  "frpm": [
    "Percent (%) Eligible Free (K-12)",
    "Enrollment (K-12)",
    "Free Meal Count (K-12)",
    "District Code",
    "School Name",
    "District Name"
  ]
}
```
Final SQL (attempt 1): SELECT T1.`Percent (%) Eligible Free (K-12)`, T1.`District Code` FROM frpm AS T1 JOIN schools AS T2 ON T1.`School Name` = T2.School WHERE T2.AdmFName1 = "Alusine"
=====================
Question: What are the valid e-mail addresses of the administrator of the school located in the San Bernardino county, City of San Bernardino City Unified that opened between 1/1/2009 to 12/31/2010 whose school types are public Intermediate/Middle Schools and Unified Schools?
 db_id: california_schools
Selector: ```json
{
  "schools": [
    "AdmEmail1",
    "County",
    "District",
    "School",
    "OpenDate",
    "SOCType"
  ],
  "satscores": "drop_all",
  "frpm": [
    "School Name",
    "County Name",
    "District Name",
    "School Type",
    "Educational Option Type",
    "CDSCode"
  ]
}
```
Final SQL (attempt 1): SELECT AdmEmail1
FROM schools
WHERE County = "San Bernardino"
AND District = "San Bernardino City Unified"
AND OpenDate BETWEEN "2009-01-01" AND "2010-12-31"
AND SOC = "62"
AND DOC = "54";
=====================
Question: How many accounts who choose issuance after transaction are staying in East Bohemia region?
 db_id: financial
Selector: ```json
{
  "account": [
    "account_id",
    "district_id",
    "frequency",
    "date"
  ],
  "client": [
    "district_id",
    "client_id",
    "gender",
    "birth_date"
  ],
  "district": [
    "district_id",
    "A3",
    "A2",
    "A4",
    "A5",
    "A6"
  ],
  "loan": "drop_all",
  "trans": "drop_all",
  "card": "drop_all",
  "order": "drop_all",
  "disp": [
    "disp_id",
    "client_id",
    "account_id",
    "type"
  ]
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = "East Bohemia" AND T1.frequency = "POPLATEK PO OBRATU"
=====================
Question: List out the no. of districts that have female average salary is more than 6000 but less than 10000?
 db_id: financial
Selector: ```json
{
  "loan": "drop_all",
  "client": [
    "client_id",
    "gender",
    "birth_date",
    "district_id"
  ],
  "district": [
    "district_id",
    "A11",
    "A2",
    "A3",
    "A4",
    "A5"
  ],
  "trans": "drop_all",
  "account": "keep_all",
  "card": "drop_all",
  "order": "drop_all",
  "disp": [
    "disp_id",
    "client_id",
    "account_id",
    "type"
  ]
}
```
Final SQL (attempt 1): SELECT count(DISTINCT T1.district_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A11 > 6000 AND T1.A11 < 10000 AND T2.gender = 'F'
=====================
Question: How many male customers who are living in North Bohemia have average salary greater than 8000?
 db_id: financial
Selector: ```json
{
  "loan": "drop_all",
  "client": [
    "client_id",
    "gender",
    "birth_date",
    "district_id"
  ],
  "district": [
    "district_id",
    "A11",
    "A3",
    "A2",
    "A4",
    "A5"
  ],
  "trans": "drop_all",
  "account": [
    "account_id",
    "district_id",
    "frequency",
    "date"
  ],
  "card": "drop_all",
  "order": "drop_all",
  "disp": [
    "disp_id",
    "client_id",
    "account_id",
    "type"
  ]
}
```
Final SQL (attempt 1): SELECT count(T1.client_id) FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'North Bohemia' AND T2.A11 > 8000
=====================
Question: List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary?
 db_id: financial
Selector: ```json
{
  "account": [
    "account_id",
    "district_id",
    "date",
    "frequency"
  ],
  "client": [
    "client_id",
    "gender",
    "birth_date",
    "district_id"
  ],
  "district": [
    "A11",
    "district_id",
    "A2",
    "A3",
    "A10",
    "A12"
  ],
  "loan": "drop_all",
  "trans": "drop_all",
  "card": "drop_all",
  "order": "drop_all",
  "disp": [
    "disp_id",
    "client_id",
    "account_id",
    "type"
  ]
}
```
Final SQL (attempt 1): SELECT T1.account_id,
       (SELECT MAX(A11) FROM district) - (SELECT MIN(A11) FROM district)
FROM disp AS T1
INNER JOIN client AS T2 ON T1.client_id = T2.client_id
INNER JOIN district AS T3 ON T2.district_id = T3.district_id
WHERE T2.gender = 'F'
  AND T2.birth_date = (SELECT MIN(birth_date) FROM client WHERE gender = 'F')
ORDER BY T3.A11
LIMIT 1;
=====================
Question: List out the account numbers of clients who are youngest and have highest average salary?
 db_id: financial
Selector: ```json
{
  "account": [
    "account_id",
    "district_id",
    "date",
    "frequency"
  ],
  "client": [
    "client_id",
    "birth_date",
    "district_id",
    "gender"
  ],
  "district": [
    "district_id",
    "A11",
    "A2",
    "A3",
    "A4",
    "A5"
  ],
  "loan": "drop_all",
  "trans": "drop_all",
  "card": "drop_all",
  "order": "drop_all",
  "disp": "keep_all"
}
```
Final SQL (attempt 1): SELECT T1.account_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 ON T1.district_id = T4.district_id WHERE T3.birth_date = ( SELECT min(birth_date) FROM client ) AND T4.A11 = ( SELECT max(A11) FROM district )
=====================
Question: Among the accounts who have approved loan date in 1997, list out the accounts that have the lowest approved amount and choose weekly issuance statement.
 db_id: financial
Selector: ```json
{
  "loan": [
    "date",
    "amount",
    "account_id",
    "loan_id",
    "duration",
    "payments"
  ],
  "account": [
    "account_id",
    "frequency",
    "district_id",
    "date"
  ],
  "client": [
    "client_id",
    "district_id",
    "gender",
    "birth_date"
  ],
  "district": [
    "district_id",
    "A2",
    "A3",
    "A4",
    "A5",
    "A6"
  ],
  "trans": "drop_all",
  "card": "drop_all",
  "order": "drop_all",
  "disp": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.account_id
FROM account AS T1
INNER JOIN loan AS T2 ON T1.account_id = T2.account_id
WHERE T1.frequency = 'POPLATEK TYDNE'
AND T2.amount = (SELECT MIN(amount) FROM loan WHERE SUBSTR(date, 1, 4) = '1997')
AND SUBSTR(T2.date, 1, 4) = '1997';
=====================
Question: Among the accounts who have loan validity more than 12 months, list out the accounts that have the highest approved amount and have account opening date in 1993.
 db_id: financial
Selector: ```json
{
  "loan": [
    "loan_id",
    "amount",
    "account_id",
    "date",
    "duration",
    "payments"
  ],
  "account": [
    "account_id",
    "date",
    "district_id",
    "frequency"
  ],
  "client": [
    "client_id",
    "district_id",
    "birth_date",
    "gender"
  ],
  "district": [
    "district_id",
    "A2",
    "A3",
    "A4",
    "A5",
    "A6"
  ],
  "trans": "drop_all",
  "card": "drop_all",
  "order": "drop_all",
  "disp": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.account_id
FROM loan AS T1
INNER JOIN account AS T2
ON T1.account_id = T2.account_id
WHERE
  T1.duration > 12 AND SUBSTR(T2.date, 1, 4) = '1993'
ORDER BY
  T1.amount DESC
LIMIT 1;
=====================
Question: Among the account opened, how many female customers who were born before 1950 and stayed in Sokolov?
 db_id: financial
Selector: ```json
{
  "account": "keep_all",
  "client": [
    "client_id",
    "gender",
    "birth_date",
    "district_id"
  ],
  "district": [
    "district_id",
    "A2",
    "A3",
    "A4",
    "A5",
    "A6"
  ],
  "loan": "drop_all",
  "trans": "drop_all",
  "card": "drop_all",
  "order": "drop_all",
  "disp": "drop_all"
}
```
Final SQL (attempt 1): SELECT count(*) FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T1.birth_date LIKE '194%' AND T2.A2 = 'Sokolov'
=====================
Question: For the female client who was born in 1976/1/29, which district did she opened her account?
 db_id: financial
Selector: ```json
{
  "loan": "drop_all",
  "client": [
    "client_id",
    "gender",
    "birth_date",
    "district_id"
  ],
  "district": [
    "district_id",
    "A2",
    "A3",
    "A4",
    "A5",
    "A6"
  ],
  "trans": "drop_all",
  "account": [
    "account_id",
    "district_id",
    "date",
    "frequency"
  ],
  "card": "drop_all",
  "order": "drop_all",
  "disp": [
    "disp_id",
    "client_id",
    "account_id",
    "type"
  ]
}
```
Final SQL (attempt 1): SELECT T2.A2 FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T1.birth_date = '1976-01-29'
=====================
Question: For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?
 db_id: financial
Selector: ```json
{
  "loan": "drop_all",
  "client": [
    "client_id",
    "gender",
    "birth_date",
    "district_id"
  ],
  "district": [
    "district_id",
    "A3",
    "A4",
    "A2",
    "A5",
    "A6"
  ],
  "trans": "drop_all",
  "account": [
    "account_id",
    "district_id",
    "frequency",
    "date"
  ],
  "card": "drop_all",
  "order": "drop_all",
  "disp": [
    "disp_id",
    "client_id",
    "account_id",
    "type"
  ]
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' AND T2.district_id = (SELECT district_id FROM district WHERE A3 = 'south Bohemia' ORDER BY A4 DESC LIMIT 1)
=====================
Question: For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27?
 db_id: financial
Selector: ```json
{
  "loan": [
    "date",
    "account_id",
    "loan_id",
    "amount",
    "duration",
    "payments"
  ],
  "trans": [
    "date",
    "account_id",
    "trans_id",
    "amount",
    "balance",
    "type"
  ],
  "client": [
    "client_id",
    "birth_date",
    "district_id",
    "gender"
  ],
  "account": [
    "account_id",
    "district_id",
    "frequency",
    "date"
  ],
  "district": [
    "district_id",
    "A11",
    "A12",
    "A13",
    "A14",
    "A15"
  ],
  "card": "drop_all",
  "order": "drop_all",
  "disp": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  CAST(SUM(CASE WHEN T1.date = '1998-12-27' THEN T1.balance ELSE 0 END) - SUM(CASE WHEN T1.date = '1993-03-22' THEN T1.balance ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.date = '1993-03-22' THEN T1.balance ELSE 1 END)
FROM trans AS T1
INNER JOIN loan AS T2
  ON T1.account_id = T2.account_id
WHERE
  T2.date = '1993-07-05';
=====================
Question: What is the percentage of loan amount that has been fully paid with no issue.
 db_id: financial
Selector: ```json
{
  "loan": [
    "status",
    "amount",
    "loan_id",
    "account_id",
    "date",
    "duration"
  ],
  "client": "drop_all",
  "district": "drop_all",
  "trans": "drop_all",
  "account": "drop_all",
  "card": "drop_all",
  "order": "drop_all",
  "disp": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100 / SUM(amount) FROM loan
=====================
Question: For loan amount less than USD100,000, what is the percentage of accounts that is still running with no issue.
 db_id: financial
Selector: ```json
{
  "loan": [
    "amount",
    "status",
    "loan_id",
    "account_id",
    "date",
    "duration"
  ],
  "client": "drop_all",
  "district": "drop_all",
  "trans": "drop_all",
  "account": [
    "account_id",
    "district_id",
    "frequency",
    "date"
  ],
  "card": "drop_all",
  "order": "drop_all",
  "disp": [
    "account_id",
    "disp_id",
    "client_id",
    "type"
  ]
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN status = 'C' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM loan WHERE amount < 100000;
=====================
Question: For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996.
 db_id: financial
Selector: ```json
{
  "loan": [
    "status",
    "loan_id",
    "payments",
    "duration",
    "amount",
    "date"
  ],
  "client": [
    "district_id",
    "client_id",
    "gender",
    "birth_date"
  ],
  "district": [
    "district_id",
    "A13",
    "A12",
    "A2",
    "A3",
    "A4"
  ],
  "trans": "drop_all",
  "account": "drop_all",
  "card": "drop_all",
  "order": "drop_all",
  "disp": "drop_all"
}
```
Final SQL (attempt 1): SELECT D.district_id, ((D.A13 - D.A12) * 100 / D.A12) AS unemployment_rate_increment
FROM district AS D
JOIN client AS C ON D.district_id = C.district_id
JOIN loan AS L ON C.client_id = L.account_id
WHERE L.status = 'D'
GROUP BY D.district_id, D.A13, D.A12
=====================
Question: List the top nine districts, by descending order, from the highest to the lowest, the number of female account holders.
 db_id: financial
Selector: ```json
{
  "loan": "drop_all",
  "client": [
    "client_id",
    "gender",
    "birth_date",
    "district_id"
  ],
  "district": [
    "district_id",
    "A2",
    "A3",
    "A4",
    "A5",
    "A6"
  ],
  "trans": "drop_all",
  "account": [
    "account_id",
    "district_id",
    "frequency",
    "date"
  ],
  "card": "drop_all",
  "order": "drop_all",
  "disp": [
    "disp_id",
    "client_id",
    "account_id",
    "type"
  ]
}
```
Final SQL (attempt 1): SELECT T2.A2 FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T2.A2 ORDER BY COUNT(T1.client_id) DESC LIMIT 9
=====================
Question: Between 1/1/1995 and 12/31/1997, how many loans in the amount of at least 250,000 per account that chose monthly statement issuance were approved?
 db_id: financial
Selector: ```json
{
  "loan": [
    "amount",
    "date",
    "account_id",
    "loan_id",
    "duration",
    "payments"
  ],
  "account": [
    "frequency",
    "account_id",
    "district_id",
    "date"
  ],
  "client": "drop_all",
  "district": "drop_all",
  "trans": "drop_all",
  "card": "drop_all",
  "order": "drop_all",
  "disp": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(l.loan_id)
FROM loan AS l
JOIN account AS a ON l.account_id = a.account_id
WHERE a.frequency = 'POPLATEK MESICNE'
  AND l.date BETWEEN '1995-01-01' AND '1997-12-31'
  AND l.amount >= 250000;
=====================
Question: How many accounts have running contracts in Branch location 1?
 db_id: financial
Selector: ```json
{
  "loan": [
    "status",
    "account_id",
    "loan_id",
    "date",
    "amount",
    "duration"
  ],
  "account": [
    "district_id",
    "account_id",
    "frequency",
    "date"
  ],
  "client": "drop_all",
  "district": [
    "district_id",
    "A2",
    "A3",
    "A4",
    "A5",
    "A6"
  ],
  "trans": "drop_all",
  "card": "drop_all",
  "order": "drop_all",
  "disp": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T1.district_id = 1 AND (T2.status = "C" OR T2.status = "D")
=====================
Question: In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?
 db_id: financial
Selector: ```json
{
  "client": [
    "client_id",
    "gender",
    "district_id",
    "birth_date"
  ],
  "district": [
    "district_id",
    "A15",
    "A2",
    "A3",
    "A4",
    "A5"
  ],
  "account": [
    "account_id",
    "district_id",
    "frequency",
    "date"
  ],
  "loan": "drop_all",
  "trans": "drop_all",
  "card": "drop_all",
  "order": "drop_all",
  "disp": "keep_all"
}
```
Final SQL (attempt 1): SELECT count(T1.client_id) FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.district_id = (SELECT district_id FROM district ORDER BY A15 DESC LIMIT 1 OFFSET 1) AND T1.gender = 'M'
=====================
Question: Which are the top ten withdrawals (non-credit card) by district names for the month of January 1996?
 db_id: financial
Selector: ```json
{
  "loan": "drop_all",
  "client": [
    "client_id",
    "district_id",
    "gender",
    "birth_date"
  ],
  "district": [
    "A2",
    "district_id",
    "A3",
    "A4",
    "A5",
    "A6"
  ],
  "trans": [
    "amount",
    "date",
    "account_id",
    "trans_id",
    "type",
    "operation"
  ],
  "account": [
    "account_id",
    "district_id",
    "date",
    "frequency"
  ],
  "card": "drop_all",
  "order": "drop_all",
  "disp": "keep_all"
}
```
Final SQL (attempt 1): SELECT T3.A2 FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.type = 'VYDAJ' AND T1.date LIKE '1996-01%' ORDER BY T1.amount DESC LIMIT 10
=====================
Question: How many accounts have running contracts in Branch location 1?
 db_id: financial
Selector: ```json
{
  "loan": [
    "status",
    "account_id",
    "loan_id",
    "date",
    "amount",
    "duration"
  ],
  "client": "drop_all",
  "district": [
    "district_id",
    "A2",
    "A3",
    "A4",
    "A5",
    "A6"
  ],
  "trans": "drop_all",
  "account": [
    "district_id",
    "account_id",
    "frequency",
    "date"
  ],
  "card": "drop_all",
  "order": "drop_all",
  "disp": "drop_all"
}
```
Final SQL (attempt 1): SELECT COUNT(DISTINCT A.account_id)
FROM account AS A
JOIN loan AS L ON A.account_id = L.account_id
WHERE A.district_id = 1 AND (L.status = 'C' OR L.status = 'D');
=====================
Question: In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?
 db_id: financial
Selector: ```json
{
  "client": [
    "client_id",
    "gender",
    "district_id",
    "birth_date"
  ],
  "district": [
    "district_id",
    "A15",
    "A2",
    "A3",
    "A4",
    "A5"
  ],
  "account": [
    "account_id",
    "district_id",
    "frequency",
    "date"
  ],
  "loan": "drop_all",
  "trans": "drop_all",
  "card": "drop_all",
  "order": "drop_all",
  "disp": "keep_all"
}
```
Final SQL (attempt 1): SELECT count(T1.client_id) FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A15 = (SELECT max(A15) FROM district WHERE A15 < (SELECT max(A15) FROM district)) AND T1.gender = 'M'
=====================
Question: Who are the account holder identification numbers whose who have transactions on the credit card with the amount is less than the average, in 1998?
 db_id: financial
Selector: ```json
{
  "loan": "drop_all",
  "client": "drop_all",
  "district": "drop_all",
  "trans": [
    "trans_id",
    "account_id",
    "date",
    "type",
    "operation",
    "amount"
  ],
  "account": [
    "account_id",
    "district_id",
    "frequency",
    "date"
  ],
  "card": [
    "card_id",
    "disp_id",
    "type",
    "issued"
  ],
  "order": "drop_all",
  "disp": [
    "disp_id",
    "client_id",
    "account_id",
    "type"
  ]
}
```
Final SQL (attempt 1): SELECT DISTINCT T1.client_id FROM disp AS T1 JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.type = 'OWNER' AND T2.operation = 'VYBER KARTOU' AND T2.amount < (SELECT avg(amount) FROM trans WHERE strftime('%Y', date) = '1998') AND strftime('%Y', T2.date) = '1998'
=====================
Question: Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000.
 db_id: financial
Selector: ```json
{
  "account": [
    "account_id",
    "district_id",
    "frequency",
    "date"
  ],
  "client": "drop_all",
  "loan": "drop_all",
  "district": [
    "district_id",
    "A11",
    "A2",
    "A3",
    "A4",
    "A5"
  ],
  "trans": "drop_all",
  "card": "drop_all",
  "order": "drop_all",
  "disp": [
    "disp_id",
    "client_id",
    "account_id",
    "type"
  ]
}
```
Final SQL (attempt 1): SELECT DISTINCT T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id WHERE T3.TYPE != 'OWNER' AND T2.A11 > 8000 AND T2.A11 <= 9000
=====================
Question: What is the average number of crimes committed in 1995 in regions where the number exceeds 4000 and the region has accounts that are opened starting from the year 1997?
 db_id: financial
Selector: ```json
{
  "loan": "drop_all",
  "client": "drop_all",
  "district": [
    "district_id",
    "A15",
    "A3",
    "A2",
    "A4",
    "A5"
  ],
  "trans": "drop_all",
  "account": [
    "account_id",
    "district_id",
    "date",
    "frequency"
  ],
  "card": "drop_all",
  "order": "drop_all",
  "disp": "drop_all"
}
```
Final SQL (attempt 1): SELECT avg(T1.A15) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A15 > 4000 AND T2.date LIKE '1997%'
=====================
Question: List all the withdrawals in cash transactions that the client with the id 3356 makes.
 db_id: financial
Selector: ```json
{
  "loan": "drop_all",
  "client": [
    "client_id",
    "gender",
    "birth_date",
    "district_id"
  ],
  "district": "drop_all",
  "trans": [
    "trans_id",
    "account_id",
    "date",
    "type",
    "operation",
    "amount"
  ],
  "account": [
    "account_id",
    "district_id",
    "frequency",
    "date"
  ],
  "card": "drop_all",
  "order": "drop_all",
  "disp": [
    "disp_id",
    "client_id",
    "account_id",
    "type"
  ]
}
```
Final SQL (attempt 1): SELECT T1.trans_id FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.client_id = 3356 AND T1.operation = 'VYBER'
=====================
Question: What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women?
 db_id: financial
Selector: ```json
{
  "loan": "drop_all",
  "client": [
    "client_id",
    "gender",
    "birth_date",
    "district_id"
  ],
  "district": [
    "district_id",
    "A11",
    "A2",
    "A3",
    "A4",
    "A5"
  ],
  "trans": "drop_all",
  "account": [
    "account_id",
    "district_id",
    "date",
    "frequency"
  ],
  "card": "drop_all",
  "order": "drop_all",
  "disp": [
    "disp_id",
    "client_id",
    "account_id",
    "type"
  ]
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 JOIN account AS T2 ON T1.client_id = T2.account_id JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T3.A11 > 10000
=====================
Question: What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997?
 db_id: financial
Selector: ```json
{
  "loan": [
    "amount",
    "date",
    "account_id",
    "loan_id",
    "duration",
    "payments"
  ],
  "client": [
    "gender",
    "client_id",
    "birth_date",
    "district_id"
  ],
  "district": [
    "district_id",
    "A11",
    "A12",
    "A13",
    "A14",
    "A15"
  ],
  "trans": "drop_all",
  "account": "keep_all",
  "card": "drop_all",
  "order": "drop_all",
  "disp": "keep_all"
}
```
Final SQL (attempt 1): SELECT (SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) * 100.0 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id JOIN disp AS T3 ON T2.account_id = T3.account_id JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T4.gender = 'M' AND (STRFTIME('%Y', T1.date) = '1996' OR STRFTIME('%Y', T1.date) = '1997')
=====================
Question: How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total?
 db_id: financial
Selector: ```json
{
  "account": [
    "account_id",
    "district_id",
    "frequency",
    "date"
  ],
  "order": [
    "k_symbol",
    "account_id",
    "order_id",
    "bank_to",
    "account_to",
    "amount"
  ],
  "loan": "drop_all",
  "client": "drop_all",
  "district": "drop_all",
  "trans": "drop_all",
  "card": "drop_all",
  "disp": "drop_all"
}
```
Final SQL (attempt 2): SELECT
  COUNT(CASE WHEN T1.account_id = 3 AND T1.operation = 'VYBER SLUZBY' THEN 1 ELSE NULL END),
  T2.k_symbol
FROM trans AS T1
INNER JOIN `order` AS T2
  ON T2.amount = 3539;
=====================
Question: What percentage of male clients request for weekly statements to be issued?
 db_id: financial
Selector: ```json
{
  "loan": "drop_all",
  "client": [
    "client_id",
    "gender",
    "birth_date",
    "district_id"
  ],
  "district": [
    "district_id",
    "A2",
    "A3",
    "A4",
    "A5",
    "A6"
  ],
  "trans": "drop_all",
  "account": [
    "account_id",
    "district_id",
    "frequency",
    "date"
  ],
  "card": "drop_all",
  "order": "drop_all",
  "disp": [
    "disp_id",
    "client_id",
    "account_id",
    "type"
  ]
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T3.frequency = 'POPLATEK TYDNE'
=====================
Question: Name the account numbers of female clients who are oldest and have lowest average salary?
 db_id: financial
Selector: ```json
{
  "account": [
    "account_id",
    "district_id",
    "date",
    "frequency"
  ],
  "client": [
    "client_id",
    "gender",
    "birth_date",
    "district_id"
  ],
  "district": [
    "district_id",
    "A11",
    "A2",
    "A3",
    "A10",
    "A12"
  ],
  "loan": "drop_all",
  "trans": "drop_all",
  "card": "drop_all",
  "order": "drop_all",
  "disp": "drop_all"
}
```
Final SQL (attempt 1): SELECT T1.account_id FROM account AS T1 JOIN disp AS T4 ON T1.account_id = T4.account_id JOIN client AS T2 ON T4.client_id = T2.client_id JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T2.gender = 'F' AND T3.A11 = (SELECT min(A11) FROM district) ORDER BY T2.birth_date LIMIT 1
=====================
Question: What is the average amount of loan which are still on running contract with statement issuance after each transaction?
 db_id: financial
Selector: ```json
{
  "loan": [
    "amount",
    "loan_id",
    "account_id",
    "date",
    "duration",
    "payments"
  ],
  "account": [
    "account_id",
    "district_id",
    "frequency",
    "date"
  ],
  "client": "drop_all",
  "district": "drop_all",
  "trans": "drop_all",
  "card": "drop_all",
  "order": "drop_all",
  "disp": "drop_all"
}
```
Final SQL (attempt 1): SELECT AVG(T1.amount) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.status IN ('C', 'D') AND T2.frequency = 'POPLATEK PO OBRATU'
=====================
Question: Provide the IDs and age of the client with high level credit card, which is eligible for loans.
 db_id: financial
Selector: ```json
{
  "loan": [
    "loan_id",
    "account_id",
    "date",
    "amount",
    "duration",
    "payments"
  ],
  "client": [
    "client_id",
    "birth_date",
    "gender",
    "district_id"
  ],
  "district": [
    "district_id",
    "A2",
    "A3",
    "A4",
    "A5",
    "A6"
  ],
  "trans": "drop_all",
  "account": [
    "account_id",
    "district_id",
    "frequency",
    "date"
  ],
  "card": [
    "card_id",
    "disp_id",
    "type",
    "issued"
  ],
  "order": "drop_all",
  "disp": [
    "disp_id",
    "client_id",
    "account_id",
    "type"
  ]
}
```
Final SQL (attempt 1): SELECT c.client_id, CAST(strftime('%Y', 'now') - strftime('%Y', c.birth_date) AS INTEGER) AS age FROM client AS c JOIN disp AS d ON c.client_id = d.client_id JOIN card AS ca ON d.disp_id = ca.disp_id WHERE ca.type = 'gold' AND d.type = 'OWNER'
=====================
Question: What is the ratio of customers who pay in EUR against customers who pay in CZK?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "Currency",
    "CustomerID",
    "Segment"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": "drop_all",
  "transactions_1k": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) FROM customers
=====================
Question: In 2012, who had the least consumption in LAM?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "CustomerID",
    "Segment",
    "Currency"
  ],
  "gasstations": [
    "GasStationID",
    "ChainID",
    "Country",
    "Segment"
  ],
  "products": [
    "ProductID",
    "Description"
  ],
  "yearmonth": [
    "Consumption",
    "Date",
    "CustomerID"
  ],
  "transactions_1k": [
    "CustomerID",
    "Date",
    "TransactionID",
    "Time",
    "CardID",
    "GasStationID"
  ]
}
```
Final SQL (attempt 1): SELECT CustomerID FROM yearmonth WHERE substr(Date, 1, 4) = '2012' AND substr(CustomerID, 1, 3) = 'LAM' ORDER BY Consumption ASC LIMIT 1
=====================
Question: What was the average monthly consumption of customers in SME for the year 2013?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "Segment",
    "CustomerID",
    "Currency"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": [
    "Consumption",
    "Date",
    "CustomerID"
  ],
  "transactions_1k": "drop_all"
}
```
Final SQL (attempt 1): SELECT AVG(Consumption) / 12 FROM yearmonth WHERE substr(Date, 1, 4) = "2013" AND CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = "SME")
=====================
Question: What was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "Currency",
    "CustomerID",
    "Segment"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": [
    "Consumption",
    "Date",
    "CustomerID"
  ],
  "transactions_1k": [
    "CustomerID",
    "Date",
    "TransactionID",
    "Time",
    "CardID",
    "GasStationID"
  ]
}
```
Final SQL (attempt 1): SELECT
  (
    SELECT
      SUM(T1.Consumption)
    FROM yearmonth AS T1
    JOIN customers AS T2
      ON T1.CustomerID = T2.CustomerID
    WHERE
      T2.Currency = 'CZK' AND T1.Date BETWEEN '201201' AND '201212'
  ) - (
    SELECT
      SUM(T1.Consumption)
    FROM yearmonth AS T1
    JOIN customers AS T2
      ON T1.CustomerID = T2.CustomerID
    WHERE
      T2.Currency = 'EUR' AND T1.Date BETWEEN '201201' AND '201212'
  );
=====================
Question: Which year recorded the most consumption of gas paid in CZK?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "Currency",
    "CustomerID",
    "Segment"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": [
    "Consumption",
    "Date",
    "CustomerID"
  ],
  "transactions_1k": [
    "Date",
    "CustomerID",
    "Amount",
    "Price",
    "TransactionID",
    "Time"
  ]
}
```
Final SQL (attempt 1): SELECT substr(Date, 1, 4) AS year FROM yearmonth WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = "CZK") GROUP BY year ORDER BY sum(Consumption) DESC LIMIT 1
=====================
Question: What was the gas consumption peak month for SME customers in 2013?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "CustomerID",
    "Segment",
    "Currency"
  ],
  "gasstations": [
    "GasStationID",
    "ChainID",
    "Country",
    "Segment"
  ],
  "products": [
    "ProductID",
    "Description"
  ],
  "yearmonth": [
    "Consumption",
    "Date",
    "CustomerID"
  ],
  "transactions_1k": "drop_all"
}
```
Final SQL (attempt 1): SELECT
  SUBSTR(Date, 5, 2)
FROM yearmonth AS T1
INNER JOIN customers AS T2
  ON T1.CustomerID = T2.CustomerID
WHERE
  T2.Segment = 'SME' AND SUBSTR(Date, 1, 4) = '2013'
GROUP BY
  SUBSTR(Date, 5, 2)
ORDER BY
  SUM(T1.Consumption) DESC
LIMIT 1;
=====================
Question: What is the ratio of customers who pay in EUR against customers who pay in CZK?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "Currency",
    "CustomerID",
    "Segment"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": "drop_all",
  "transactions_1k": "drop_all"
}
```
Final SQL (attempt 1): SELECT CAST(SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) FROM customers;
=====================
Question: In 2012, who had the least consumption in LAM?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "CustomerID",
    "Segment",
    "Currency"
  ],
  "gasstations": [
    "GasStationID",
    "ChainID",
    "Country",
    "Segment"
  ],
  "products": [
    "ProductID",
    "Description"
  ],
  "yearmonth": [
    "Consumption",
    "CustomerID",
    "Date"
  ],
  "transactions_1k": "drop_all"
}
```
Final SQL (attempt 1): SELECT CustomerID FROM YearMonth WHERE substr(Date, 1, 4) = '2012' AND CustomerID IN (SELECT CustomerID FROM Customers WHERE Segment = 'LAM') ORDER BY Consumption ASC LIMIT 1
=====================
Question: What was the average monthly consumption of customers in SME for the year 2013?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "CustomerID",
    "Segment",
    "Currency"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": [
    "Consumption",
    "Date",
    "CustomerID"
  ],
  "transactions_1k": [
    "CustomerID",
    "Date",
    "TransactionID",
    "Time",
    "CardID",
    "GasStationID"
  ]
}
```
Final SQL (attempt 1): SELECT AVG(Consumption) / 12.0 FROM yearmonth WHERE substr(Date, 1, 4) = '2013' AND CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'SME');
=====================
Question: What was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "Currency",
    "CustomerID",
    "Segment"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": [
    "Consumption",
    "Date",
    "CustomerID"
  ],
  "transactions_1k": [
    "CustomerID",
    "Date",
    "TransactionID",
    "Time",
    "CardID",
    "GasStationID"
  ]
}
```
Final SQL (attempt 1): SELECT
  (
    SELECT
      SUM(T1.Consumption)
    FROM yearmonth AS T1
    INNER JOIN customers AS T2
      ON T1.CustomerID = T2.CustomerID
    WHERE
      T2.Currency = 'CZK' AND T1.Date BETWEEN '201201' AND '201212'
  ) - (
    SELECT
      SUM(T1.Consumption)
    FROM yearmonth AS T1
    INNER JOIN customers AS T2
      ON T1.CustomerID = T2.CustomerID
    WHERE
      T2.Currency = 'EUR' AND T1.Date BETWEEN '201201' AND '201212'
  );
=====================
Question: Which year recorded the most consumption of gas paid in CZK?
 db_id: debit_card_specializing
Selector: ```json
{
  "customers": [
    "Currency",
    "CustomerID",
    "Segment"
  ],
  "gasstations": "drop_all",
  "products": "drop_all",
  "yearmonth": [
    "Date",
    "Consumption",
    "CustomerID"
  ],
  "transactions_1k": [
    "CustomerID",
    "Date",
    "Amount",
    "Price",
    "GasStationID",
    "ProductID"
  ]
}
```
Final SQL (attempt 1): SELECT substr(Date, 1, 4) FROM yearmonth WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = "CZK") GROUP BY substr(Date, 1, 4) ORDER BY sum(Consumption) DESC LIMIT 1
