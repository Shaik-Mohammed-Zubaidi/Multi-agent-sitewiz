{
  "0": "SELECT \n    (SELECT COUNT(*) FROM Customers WHERE Currency = 'EUR') / \n    (SELECT COUNT(*) FROM Customers WHERE Currency = 'CZK') AS ratio \nFROM Customers \nLIMIT 1;\t----- bird -----\tdebit_card_specializing",
  "1": "Apologies but I could not provide the exact SQL query without knowing the actual database schema, especially the names of the tables and their respective columns. Below is a generalized query according to your plan and assuming that there's a single table:\n\n```\nSELECT ConsumerIdentifier\nFROM consumption_table\nWHERE YearMonth BETWEEN '201201' AND '201212' AND Region = 'LAM'\nGROUP BY ConsumerIdentifier\nORDER BY SUM(Consumption) ASC\nLIMIT 1;\n```\n\nIn the above query, please replace 'consumption_table', 'YearMonth', 'Region', 'ConsumerIdentifier', and 'Consumption' with the actual table and column names in your database schema.\n\nIf there are two different tables for consumption and year, then a JOIN operation can be used to combine those two tables.\n\nFeel free to provide the actual schema for a more precise query.\t----- bird -----\tdebit_card_specializing",
  "2": "SELECT AVG(consumption_table.consumption)/12 FROM \ncustomers_table \nJOIN consumption_table ON customers_table.customer_id = consumption_table.customer_id \nJOIN yearmonth_table ON yearmonth_table.date = consumption_table.date \nWHERE \ncustomers_table.category = \"SME\" AND \nSUBSTR(yearmonth_table.date,1,4) = \"2013\"\t----- bird -----\tdebit_card_specializing",
  "3": "SELECT \n    (SELECT SUM(GasConsumption.amount)\n    FROM Customers\n    JOIN GasConsumption ON Customers.customerID = GasConsumption.customerID\n    JOIN YearMonth ON GasConsumption.date = YearMonth.date\n    WHERE Customers.currency = 'CZK'\n    AND substr(YearMonth.date,1,4) = '2012') -\n    (SELECT SUM(GasConsumption.amount)\n    FROM Customers\n    JOIN GasConsumption ON Customers.customerID = GasConsumption.customerID\n    JOIN YearMonth ON GasConsumption.date = YearMonth.date\n    WHERE Customers.currency = 'EUR'\n    AND substr(YearMonth.date,1,4) = '2012') \nAS difference_in_gas_consumption\t----- bird -----\tdebit_card_specializing",
  "4": "SELECT SUBSTR(yearmonth.Date, 1, 4) AS \"Year\", SUM(sales.Consumption) AS \"Total Consumption\"\nFROM sales \nJOIN yearmonth ON sales.Date = yearmonth.Date\nWHERE sales.Product = 'Gas' AND sales.Currency = 'CZK'\nGROUP BY Year\nORDER BY \"Total Consumption\" DESC\nLIMIT 1;\t----- bird -----\tdebit_card_specializing",
  "5": "SELECT SUBSTRING(gas_consumption.date, 5, 2) AS month, \n       SUM(gas_consumption.consumption_value) AS total_consumption\nFROM gas_consumption \nWHERE gas_consumption.customer_type = 'SME' \n  AND SUBSTRING(gas_consumption.date, 1, 4) = '2013'\nGROUP BY month\nORDER BY total_consumption DESC\nLIMIT 1\t----- bird -----\tdebit_card_specializing",
  "6": "Assuming there are tables `customers` and `transactions`, and associated `segments`, `consumption`, `amount_paid_czk` and `date` columns. Since the schema is not provided, this is a hypothetical SQL query:\n\n```sql\nWITH \nconsumption_in_2013 AS (\n    SELECT \n        segment,\n        AVG(consumption) AS avg_annual_consumption\n    FROM \n        transactions t\n    JOIN \n        customers c ON t.customer_id = c.customer_id\n    WHERE\n        amount_paid_czk = (SELECT MIN(amount_paid_czk) FROM transactions WHERE strftime('%Y', date) = '2013') \n        AND strftime('%Y', date) = '2013'\n    GROUP BY \n        segment\n),\nAAC_SME AS (\n    SELECT avg_annual_consumption FROM consumption_in_2013 WHERE segment = 'SME'\n),\nAAC_LAM AS (\n    SELECT avg_annual_consumption FROM consumption_in_2013 WHERE segment = 'LAM'\n),\nAAC_KAM AS (\n    SELECT avg_annual_consumption FROM consumption_in_2013 WHERE segment = 'KAM'\n)\nSELECT \n    (SELECT * FROM AAC_SME) - (SELECT * FROM AAC_LAM) AS diff_SME_LAM,\n    (SELECT * FROM AAC_LAM) - (SELECT * FROM AAC_KAM) AS diff_LAM_KAM,\n    (SELECT * FROM AAC_KAM) - (SELECT * FROM AAC_SME) AS diff_KAM_SME\n;\n```\n\nThis query first calculates the annual average consumption for customers with the least amount of consumption in CZK for each segment (SME, LAM, KAM) in year 2013. Then it calculates the difference between SME and LAM, LAM and KAM, and KAM and SME.\t----- bird -----\tdebit_card_specializing",
  "7": "Assuming that the relevant column names from the 'consumption' table are 'segment', 'sales_eur', and 'yearmonth', the SQL Query following your plan would be:\n\n```sql\nWITH consumption_2012 AS (\n    SELECT segment, SUM(sales_eur) AS sales_2012 FROM consumption WHERE substr(yearmonth, 1, 4) = '2012' GROUP BY segment\n), consumption_2013 AS (\n    SELECT segment, SUM(sales_eur) AS sales_2013 FROM consumption WHERE substr(yearmonth, 1, 4) = '2013' GROUP BY segment\n)\nSELECT t2012.segment, \n    ((t2013.sales_2013 - t2012.sales_2012) / t2012.sales_2012)*100 AS percentage_increase \nFROM consumption_2012 t2012\nINNER JOIN consumption_2013 t2013 ON t2012.segment = t2013.segment\nWHERE t2012.segment IN ('SME', 'LAM', 'KAM')\nORDER BY percentage_increase ASC\n```\n\nThis query provides a list of the three segments with their respective percentage increases sorted in ascending order. The first row will be the segment with the lowest increase and the last row will be the segment with the highest increase.\t----- bird -----\tdebit_card_specializing",
  "8": "SELECT SUM(Products.price * OrderDetails.quantity) as total_consumption\nFROM Customers\nJOIN Orders ON Customers.customer_id = Orders.customer_id\nJOIN OrderDetails ON Orders.order_id = OrderDetails.order_id\nJOIN Products ON OrderDetails.product_id = Products.product_id\nJOIN YearMonth ON Orders.order_date = YearMonth.date\nWHERE Customers.customer_id = 6 AND SUBSTR(YearMonth.date, 1, 6) BETWEEN '201308' AND '201311'\t----- bird -----\tdebit_card_specializing",
  "9": "SELECT \n    (SELECT COUNT(*) FROM gas_stations \n     WHERE Country = 'CZE' AND DiscountFlag = 1)\n     -\n    (SELECT COUNT(*) FROM gas_stations \n     WHERE Country = 'SVK' AND DiscountFlag = 1)\nAS difference;\t----- bird -----\tdebit_card_specializing",
  "10": "Schema: SMEs(sme_id, payment_currency)\n\nSELECT \n    (SELECT COUNT(*) FROM SMEs WHERE payment_currency = 'CZK') - \n    (SELECT COUNT(*) FROM SMEs WHERE payment_currency = 'EUR')\nAS difference;\t----- bird -----\tdebit_card_specializing",
  "11": "Database Schema: \nCustomers(customer_id, customer_type, ...)\nConsumption(customer_id, consumption_value, ...)\n\nSQL Query:\nSELECT \n    CAST((SELECT COUNT(*) FROM Customers \n          JOIN Consumption ON Customers.customer_id = Consumption.customer_id \n          WHERE Customers.customer_type = 'LAM' AND Consumption.consumption_value > 46.73) \n    AS FLOAT) /\n    \n    CAST((SELECT COUNT(*) FROM Customers \n          WHERE customer_type = 'LAM') \n    AS FLOAT) * 100 AS 'Percentage'\t----- bird -----\tdebit_card_specializing",
  "12": "SELECT \n    (CAST((SELECT COUNT(*) \n           FROM Customers \n           JOIN Orders ON Customers.ID = Orders.CustomerID \n           JOIN YearMonth ON YearMonth.Date = Orders.Date \n           WHERE SUBSTR(YearMonth.Date, 1, 6) = '201202' AND Orders.Consumption > 528.3) AS FLOAT) / \n     CAST((SELECT COUNT(*) \n           FROM Customers) AS FLOAT)) * 100 \nAS Percentage\t----- bird -----\tdebit_card_specializing",
  "13": "SELECT SUBSTR(YearMonth.date, 6, 2) as month, SUM(Consumption.consumption) as total_consumption \nFROM Consumption \nJOIN YearMonth ON Consumption.date_id = YearMonth.date_id\nWHERE SUBSTR(YearMonth.date, 1, 4) = '2012'\nGROUP BY month \nORDER BY total_consumption DESC\nLIMIT 1;\t----- bird -----\tdebit_card_specializing",
  "14": "SELECT products.description\nFROM orders\nJOIN products ON orders.product_id = products.product_id\nJOIN yearmonth ON orders.orderdate = yearmonth.date\nWHERE substr(yearmonth.date, 1, 6) = '201309'\t----- bird -----\tdebit_card_specializing",
  "15": "SELECT DISTINCT gas_stations.country \nFROM transactions \nJOIN yearmonth ON transactions.transaction_date = yearmonth.id\nJOIN gas_stations ON transactions.gas_station_id = gas_stations.id \nWHERE substr(yearmonth.id, 1, 6) = '201306'\t----- bird -----\tdebit_card_specializing",
  "16": "SELECT COUNT(DISTINCT Customers.Customer_ID)\nFROM Customers\nJOIN Payments ON Customers.Customer_ID = Payments.Customer_ID\nJOIN Consumption ON Customers.Customer_ID = Consumption.Customer_ID\nWHERE Payments.Currency = 'EUR' AND Consumption.Monthly_Consumption > 1000\t----- bird -----\tdebit_card_specializing",
  "17": "SELECT transactions.product_description\nFROM transactions\nINNER JOIN gas_stations\nON transactions.station_id = gas_stations.station_id\nWHERE gas_stations.country = 'CZE'\t----- bird -----\tdebit_card_specializing",
  "18": "SELECT DISTINCT transactions.time \nFROM transactions \nJOIN gas_stations \nON transactions.station_id = gas_stations.station_id \nWHERE gas_stations.chain_no = 11;\t----- bird -----\tdebit_card_specializing",
  "19": "SELECT COUNT(*) \nFROM transactions \nJOIN gasstations \nON transactions.gas_station_id = gasstations.id \nWHERE gasstations.Country = 'CZE' \nAND transactions.transaction_date > '2012-01-01';\t----- bird -----\tdebit_card_specializing",
  "20": "SELECT Payments.currency \nFROM Payments \nJOIN Customers ON Payments.customer_id = Customers.customer_id \nWHERE Payments.payment_time = '2012-08-24 16:25:00';\t----- bird -----\tdebit_card_specializing",
  "21": "SELECT s.segment_name \nFROM customers c \nJOIN segments s \nON c.segment_id = s.id \nWHERE c.timestamp = '2012-08-23 21:20:00';\t----- bird -----\tdebit_card_specializing",
  "22": "SELECT COUNT(*)\nFROM Transactions T\nJOIN Gasstations G ON T.GasStationId = G.GasStationId\nWHERE G.Country = 'CZE' AND \n      DATE(T.Time) = '2012-08-26' AND \n      TIME(T.Time) BETWEEN '08:00:00' AND '09:00:00'\t----- bird -----\tdebit_card_specializing",
  "23": "SELECT Customers.Nationality\nFROM Customers\nJOIN Orders ON Customers.CustomerID = Orders.CustomerID\nJOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID\nWHERE Orders.OrderDate = '2012-08-24' AND OrderDetails.TotalAmount = 548.4\t----- bird -----\tdebit_card_specializing",
  "24": "SELECT \n  (CAST(COUNT(DISTINCT Transaction.customer_id) AS FLOAT)/(SELECT COUNT(DISTINCT customer_id) FROM Customer)) * 100 AS percentage\nFROM \n  Transaction \nINNER JOIN \n  Customer \nON \n  Transaction.customer_id = Customer.customer_id \nWHERE \n  Transaction.transaction_date = '2012-08-25' AND Transaction.currency = 'EUR'\t----- bird -----\tdebit_card_specializing",
  "25": "SELECT \n    ((c1.consumption - c2.consumption) / c1.consumption) AS consumption_decrease_rate\nFROM \n    payments p\nJOIN \n    customers cu ON p.customer_id = cu.customer_id\nJOIN \n    consumption c1 ON cu.customer_id = c1.customer_id\nJOIN \n    consumption c2 ON cu.customer_id = c2.customer_id\nWHERE \n    p.payment_amount = 634.8 \n    AND p.payment_date = '2012-08-25' \n    AND c1.year = 2012 \n    AND c2.year = 2013\t----- bird -----\tdebit_card_specializing",
  "26": "Database Schema: \n- sales_data (id, Segment, Country, Product_ID, Sales)\n\nAssuming that the \"premium\" refers to a type of Segment in the provided schema, the SQL query is:\n\n```sql\nSELECT \n    (CAST(SUM(CASE WHEN Segment = 'premium' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*)) * 100 AS premium_percentage\nFROM \n    sales_data\nWHERE\n    Country = 'SVK';\n```\t----- bird -----\tdebit_card_specializing",
  "27": "SELECT \n  SUM(CASE \n        WHEN strftime('%Y%m', Transactions.date) = '201201' THEN Transactions.amount \n        ELSE 0 \n      END) AS Spent_in_January_2012,\n  SUM(Transactions.amount) AS Total_spent \nFROM \n  Customers \n  JOIN Transactions ON Customers.customer_id = Transactions.customer_id \n  JOIN Locations ON Transactions.location_id = Locations.location_id \nWHERE \n  Customers.customer_id = '38508' AND Locations.type = 'Gas Station';\t----- bird -----\tdebit_card_specializing",
  "28": "SELECT \n    customers.customer_id, \n    customers.customer_name, \n    SUM(order_details.amount * order_details.price) / SUM(order_details.amount) AS average_price_per_item,\n    orders.currency\nFROM \n    customers\nJOIN \n    orders ON customers.customer_id = orders.customer_id\nJOIN \n    order_details ON orders.order_id = order_details.order_id\nGROUP BY \n    customers.customer_id \nORDER BY \n    SUM(order_details.amount * order_details.price) DESC\nLIMIT 1;\t----- bird -----\tdebit_card_specializing",
  "29": "SELECT consumption_status \nFROM transactions t \nJOIN products p ON t.product_id = p.product_id \nWHERE t.product_id = 5 AND (t.price / t.amount) > 29 AND strftime('%Y%m', t.date) = '201208'\t----- bird -----\tdebit_card_specializing",
  "30": "SELECT majors.major_name \nFROM students \nJOIN majors ON students.student_id = majors.student_id \nWHERE students.first_name = 'Angela' AND students.last_name = 'Sanders';\t----- bird -----\tstudent_club",
  "31": "SELECT COUNT(DISTINCT Student_Club.student_id)\nFROM Student_Club\nINNER JOIN Events ON Student_Club.event_id = Events.event_id\nINNER JOIN Orders ON Student_Club.student_id = Orders.student_id\nWHERE Events.event_name = 'Women's Soccer' AND Orders.t_shirt_size = 'Medium';\t----- bird -----\tstudent_club",
  "32": "SELECT COUNT(*) \nFROM (\n    SELECT Events.event_id, Events.type \n    FROM Events\n    JOIN (\n        SELECT event_id, COUNT(member_id) AS member_count\n        FROM Attendance\n        GROUP BY event_id\n        HAVING member_count > 10\n        ) AS Meeting_Attendance\n    ON Events.event_id = Meeting_Attendance.event_id\n    WHERE Events.type = 'Meeting'\n);\t----- bird -----\tstudent_club",
  "33": "SELECT events.event_name\nFROM events\nJOIN attendance ON events.event_id = attendance.event_id\nWHERE attendance.num_attendees > 20 AND events.event_type != 'fundraiser'\t----- bird -----\tstudent_club",
  "34": "Assuming the schema is as follows:\n\n`StudentClubMembers(MemberID, Position)`\n\n`FinancialTransactions(TransactionID, MemberID, AmountReceived)`\n\nWe can implement the plan as this SQL query:\n\n```sql\nSELECT SUM(FinancialTransactions.AmountReceived)\nFROM FinancialTransactions \nJOIN StudentClubMembers \nON FinancialTransactions.MemberID = StudentClubMembers.MemberID\nWHERE StudentClubMembers.Position = 'Vice President';\n```\nNote: This is assuming that the \"MemberID\" columns in both tables are the ids of the members responsible for each transaction, and that the AmountReceived column in the FinancialTransactions table contains the amounts of funds received in each transaction.\t----- bird -----\tstudent_club",
  "35": "SELECT Students.first_name, Students.last_name\nFROM Students\nJOIN Student_Club\nON Students.student_id = Student_Club.student_id\nWHERE Students.state = 'Illinois'\t----- bird -----\tstudent_club",
  "36": "SELECT expenses.expense_id, expenses.approved\nFROM expenses\nJOIN events ON expenses.event_id = events.event_id\nWHERE events.event_name = 'October Meeting' AND events.event_date = '2019-10-08'\t----- bird -----\tstudent_club",
  "37": "SELECT AVG(expenses.amount) as total_average_cost\nFROM expenses\nJOIN users ON expenses.user_id = users.id\nWHERE (users.first_name = 'Elijah' AND users.last_name = 'Allen') \nAND (strftime('%m', expenses.expense_date) = '09' OR strftime('%m', expenses.expense_date) = '10')\t----- bird -----\tstudent_club",
  "38": "SELECT \n    (SELECT SUM(spent) FROM events WHERE organizer = 'Student_Club' AND strftime('%Y', event_date) = '2019') \n    - \n    (SELECT SUM(spent) FROM events WHERE organizer = 'Student_Club' AND strftime('%Y', event_date) = '2020')\nFROM events;\t----- bird -----\tstudent_club",
  "39": "SELECT note_text \nFROM fundraising_notes \nWHERE source = 'Fundraising' \nAND date_received = '2019-09-14'\t----- bird -----\tstudent_club",
  "40": "SELECT phone_number \nFROM employees \nWHERE first_name = \"Carlo\" \nAND last_name = \"Jacobs\";\t----- bird -----\tstudent_club",
  "41": "SELECT Events.event_status\nFROM Expenses\nJOIN Events ON Expenses.event_id = Events.event_id\nWHERE Expenses.expense_description = 'Post Cards, Posters' AND Expenses.expense_date = '2019-8-20'\t----- bird -----\tstudent_club",
  "42": "SELECT majors.major_name\nFROM students\nJOIN majors ON students.major_id = majors.major_id\nWHERE students.first_name = \"Brent\" AND students.last_name = \"Thomason\";\t----- bird -----\tstudent_club",
  "43": "SELECT COUNT(*) \nFROM members \nJOIN t_shirt_info ON members.member_id = t_shirt_info.member_id \nWHERE members.major = 'Business' AND t_shirt_info.t_shirt_size = 'Medium'\t----- bird -----\tstudent_club",
  "44": "SELECT d.department_name\nFROM ClubPositions cp\nJOIN Members m ON cp.member_id = m.member_id\nJOIN Departments d ON m.department_id = d.department_id\nWHERE cp.position = 'President'\t----- bird -----\tstudent_club",
  "45": "SELECT FinancialTransactions.date_received\nFROM Members\nJOIN FinancialTransactions ON Members.member_id = FinancialTransactions.member_id\nWHERE Members.first_name = 'Connor' AND Members.last_name = 'Hilton' AND FinancialTransactions.source = 'Dues';\t----- bird -----\tstudent_club",
  "46": "The provided SQL query does not answer the question. It calculates the ratio of the total advertisement budget for the 'Yearly Kickoff' event to the 'October Meeting' event, but doesn't count the number of times the 'Yearly Kickoff' budget was more than the 'October Meeting' budget. \n\nCorrected SQL:\n\n```SQL\nSELECT COUNT(*) \nFROM (\n    SELECT YEAR(date) AS Year\n    FROM budget \n    WHERE category = 'Advertisement' \n    GROUP BY Year\n    HAVING SUM(CASE WHEN event_name = 'Yearly Kickoff' THEN amount ELSE 0 END) > SUM(CASE WHEN event_name = 'October Meeting' THEN amount ELSE 0 END)\n) AS Subquery;\n```\n\nPlease note that this query assumes that each 'Yearly Kickoff' and 'October Meeting' event happens once per year and 'date' column represents the date of the event. If these assumptions are not valid, the query might need more adjustments.\t----- bird -----\tstudent_club",
  "47": "SELECT SUM(cost) \nFROM expenses \nWHERE expense_description = 'Pizza'\t----- bird -----\tstudent_club",
  "48": "SELECT COUNT(DISTINCT c.city_id)\nFROM Cities c\nJOIN Counties co ON c.county_id = co.county_id\nWHERE co.county_name = 'Orange County' AND co.state_name = 'Virginia'\t----- bird -----\tstudent_club",
  "49": "Database Schema: \n\nPeople: people_id, name, phone_number, birthday, hometown\nMajor: major_id, people_id, major_name\n\nSQL Query:\n\n```sql\nSELECT Major.major_name\nFROM People\nJOIN Major\nON People.people_id = Major.people_id\nWHERE People.phone_number = '809-555-3360';\n```\t----- bird -----\tstudent_club",
  "50": "SELECT COUNT(*) \nFROM Attendance \nJOIN Events ON Attendance.event_id = Events.event_id \nWHERE Events.event_name = 'Women's Soccer';\t----- bird -----\tstudent_club",
  "51": "SELECT employees.first_name, employees.last_name\nFROM departments\nJOIN employee_departments ON departments.department_id = employee_departments.department_id\nJOIN employees ON employee_departments.employee_id = employees.employee_id\nWHERE departments.department_name = 'School of Applied Sciences, Technology and Education';\t----- bird -----\tstudent_club",
  "52": "SELECT event_name, spent / amount AS ratio\nFROM events\nWHERE status = 'Closed'\nORDER BY ratio DESC\nLIMIT 1\t----- bird -----\tstudent_club",
  "53": "SELECT MAX(spent) FROM event_budgets;\t----- bird -----\tstudent_club",
  "54": "SELECT SUM(amount) \nFROM expenses \nWHERE category = 'Food'\t----- bird -----\tstudent_club",
  "55": "SELECT students.first_name || ' ' || students.last_name AS full_name\nFROM students\nJOIN events_attendance ON students.student_id = events_attendance.student_id\nGROUP BY full_name\nHAVING COUNT(events_attendance.link_to_event) > 7\t----- bird -----\tstudent_club",
  "56": "SELECT students.first_name, students.last_name\nFROM students\nJOIN events ON students.student_id = events.student_id\nJOIN budgets ON events.event_id = budgets.event_id\nWHERE events.event_name = 'Yearly Kickoff' AND budgets.is_manager = 1;\t----- bird -----\tstudent_club",
  "57": "SELECT Events.event_name\nFROM Events\nJOIN Costs ON Events.event_id = Costs.event_id\nORDER BY Costs.cost ASC\nLIMIT 1;\t----- bird -----\tstudent_club",
  "58": "SELECT \n  (SUM(CASE WHEN event_name = 'Yearly Kickoff' THEN cost ELSE 0 END) / SUM(cost)) * 100 \nAS Percentage \nFROM Events\t----- bird -----\tstudent_club",
  "59": "Database Schema: \n  finance_log ( id, source, date_received, amount )\n\nSQL Query: \n```sql\nSELECT source \nFROM finance_log \nWHERE date_received BETWEEN '2019-09-01' and '2019-09-30' \nGROUP BY source \nORDER BY SUM(amount) DESC\nLIMIT 1;\n```\t----- bird -----\tstudent_club",
  "60": "SELECT COUNT(*) \nFROM Students s\nJOIN Majors m ON s.major_id = m.major_id\nJOIN Student_Club sc ON s.student_id = sc.student_id \nWHERE m.major_name = 'Physics Teaching'\t----- bird -----\tstudent_club",
  "61": "SELECT Events.event_name\nFROM Events\nJOIN Expenditure ON Events.event_id = Expenditure.event_id\nWHERE Expenditure.category = 'Advertisement'\nORDER BY Expenditure.spent DESC\nLIMIT 1;\t----- bird -----\tstudent_club",
  "62": "SELECT COUNT(*) \nFROM Attendees AS A \nJOIN Attendance AS AT \nON A.attendee_id=AT.attendee_id \nJOIN Events AS E \nON AT.event_id=E.event_id \nWHERE A.first_name='Maya' AND A.last_name='Mclean' AND E.event_name='Women's Soccer';\t----- bird -----\tstudent_club",
  "63": "SELECT expenses.cost\nFROM expenses\nJOIN events ON expenses.event_id = events.event_id\nWHERE expenses.description = 'Posters' AND events.event_name = 'September Speaker'\t----- bird -----\tstudent_club",
  "64": "SELECT e.event_name\nFROM events e \nJOIN budgets b ON e.event_key = b.event_key\nWHERE e.status = 'Closed' AND b.remaining < 0\nORDER BY b.remaining ASC\nLIMIT 1;\t----- bird -----\tstudent_club",
  "65": "SELECT E.expense_type, SUM(E.cost) AS Total_Value\nFROM Expenses E \nJOIN Event_Expenses EE ON E.expense_id = EE.expense_id\nWHERE EE.event_id = (SELECT event_id FROM Events WHERE event_name = 'October Meeting')\nGROUP BY E.expense_type\t----- bird -----\tstudent_club",
  "66": "SELECT B.category, SUM(B.amount) as Budgeted\nFROM Events E\nJOIN Budget B ON E.id = B.event_id\nWHERE E.event_name = 'April Speaker'\nGROUP BY B.category\nORDER BY Budgeted ASC;\t----- bird -----\tstudent_club",
  "67": "SELECT SUM(cost) \nFROM expenses \nWHERE expense_date = '2019-08-20'\t----- bird -----\tstudent_club",
  "68": "SELECT members_table.first_name, members_table.last_name, SUM(costs_table.total_cost) as total_cost\nFROM members_table \nJOIN costs_table\nON members_table.member_id = costs_table.member_id\nWHERE members_table.member_id = 'rec4BLdZHS2Blfp4v'\t----- bird -----\tstudent_club",
  "69": "SELECT expenses.expense_description\nFROM expenses\nINNER JOIN users ON expenses.user_id = users.id\nWHERE users.first_name = \"Sacha\" AND users.last_name = \"Harrison\";\t----- bird -----\tstudent_club",
  "70": "SELECT categories.category \nFROM events \nJOIN event_details ON events.event_id = event_details.event_id \nJOIN categories ON events.category_id = categories.category_id \nWHERE event_details.location = 'MU 215'\t----- bird -----\tstudent_club",
  "71": "SELECT members.last_name, departments.department_name, colleges.college_name\nFROM members\nINNER JOIN majors ON members.major_id = majors.major_id\nINNER JOIN departments ON majors.department_id = departments.department_id\nINNER JOIN colleges ON departments.college_id = colleges.college_id\nWHERE majors.major_name = 'Environmental Engineering'\nGROUP BY members.last_name;\t----- bird -----\tstudent_club",
  "72": "SELECT budget_category \nFROM events \nWHERE location = 'MU 215' AND type = 'Guest Speaker' AND spent = 0\t----- bird -----\tstudent_club",
  "73": "SELECT \n    (COUNT(case when Transactions.amount = 50 then 1 end) * 100.0 / COUNT(Members.member_id)) as percentage\nFROM \n    Members\nJOIN \n    Transactions ON Members.member_id = Transactions.member_id\nWHERE \n    Members.t_shirt_size = 'Medium' \n    AND Members.position = 'Member'\t----- bird -----\tstudent_club",
  "74": "SELECT event_name\nFROM events\nWHERE type = 'Game'\nAND status = 'Closed'\nAND event_date BETWEEN '2019-03-15' AND '2020-03-20';\t----- bird -----\tstudent_club",
  "75": "SELECT m.first_name, m.last_name, m.phone\nFROM members m\nJOIN expenses e ON m.member_id = e.member_id\nWHERE e.cost > (SELECT AVG(cost) FROM expenses)\t----- bird -----\tstudent_club",
  "76": "SELECT M.first_name || \" \" || M.last_name AS full_name, SUM(E.cost) AS total_cost\nFROM Members M\nJOIN Expenses E ON M.member_id = E.member_id\nWHERE E.expense_description IN ('Water', 'Veggie tray', 'Supplies')\nGROUP BY M.member_id;\t----- bird -----\tstudent_club",
  "77": "SELECT Students.first_name, Students.last_name, Funds.amount\nFROM Students\nJOIN Funds ON Students.student_id = Funds.student_id\nWHERE Funds.date_received = '2019-09-09'\t----- bird -----\tstudent_club",
  "78": "SELECT \n    (SELECT COUNT(*) FROM PatientRecords WHERE SEX = 'M' AND Admission = '+') AS InPatientCount,\n    (SELECT COUNT(*) FROM PatientRecords WHERE SEX = 'M' AND Admission = '-') AS OutPatientCount,\n    (((SELECT COUNT(*) FROM PatientRecords WHERE SEX = 'M' AND Admission = '+') -\n    (SELECT COUNT(*) FROM PatientRecords WHERE SEX = 'M' AND Admission = '-')) * 100.0 /\n    (SELECT COUNT(*) FROM PatientRecords WHERE SEX = 'M' AND Admission = '-')) AS DeviationPercent\nFROM PatientRecords\nWHERE SEX = 'M'\nLIMIT 1;\t----- bird -----\tthrombosis_prediction",
  "79": "SELECT \n    (COUNT(CASE WHEN strftime('%Y',Birthday) > '1930' AND Sex = 'F' THEN 1 END) * 100.0 / COUNT(CASE WHEN Sex = 'F' THEN 1 END)) AS Percentage\nFROM\n    Patients\t----- bird -----\tthrombosis_prediction",
  "80": "SELECT \n(SELECT COUNT(*) FROM Treatments INNER JOIN Patients ON Treatments.PatientID = Patients.ID WHERE Patients.Diagnosis = 'SLE' AND Treatments.Admission = '-')/\n(SELECT COUNT(*) FROM Treatments INNER JOIN Patients ON Treatments.PatientID = Patients.ID WHERE Patients.Diagnosis = 'SLE' AND Treatments.Admission = '+') AS Ratio\t----- bird -----\tthrombosis_prediction",
  "81": "SELECT Patients.Diagnosis, Laboratory_Tests.Date\nFROM Patients\nINNER JOIN Laboratory_Tests ON Patients.Patient_ID = Laboratory_Tests.Patient_ID\nWHERE Patients.Patient_ID = '30609'\t----- bird -----\tthrombosis_prediction",
  "82": "Database Schema: \nPatients(PatientID, FirstName, LastName, Sex, Birthday)\nLab_Results(PatientID, TestName, ResultValue)\n\nSQL Query:\nSELECT Patients.PatientID, Patients.Sex, Patients.Birthday\nFROM Patients\nJOIN Lab_Results ON Patients.PatientID = Lab_Results.PatientID\nWHERE Lab_Results.TestName = 'LDH' AND Lab_Results.ResultValue > 500\t----- bird -----\tthrombosis_prediction",
  "83": "SELECT Patients.id, (strftime('%Y', 'now') - strftime('%Y', Patients.birthday)) as Age\nFROM Patients\nJOIN Coagulation ON\n  Patients.id = Coagulation.patient_id\nWHERE Coagulation.RVVT = '+';\t----- bird -----\tthrombosis_prediction",
  "84": "SELECT Patients.patient_id, Patients.sex, Diagnosis.disease\nFROM Patients\nINNER JOIN Diagnosis ON Patients.patient_id = Diagnosis.patient_id\nWHERE Diagnosis.thrombosis = 2\t----- bird -----\tthrombosis_prediction",
  "85": "SELECT COUNT(*) \nFROM Patients \nJOIN Visits ON Patients.PatientID = Visits.PatientID \nWHERE Patients.Sex = 'F' \nAND strftime('%Y', Visits.Date) = '1997' \nAND Visits.Admission = '-';\t----- bird -----\tthrombosis_prediction",
  "86": "SELECT COUNT(Patient_ID)\nFROM Patients\nWHERE Thrombosis = '1' AND Examination_Year = 1997 AND Sex = 'F'\t----- bird -----\tthrombosis_prediction",
  "87": "SELECT me.symptoms_observed, d.diagnosis_name\nFROM patients p\nJOIN medical_examinations me ON p.patient_id = me.patient_id\nJOIN diagnoses d ON me.diagnosis_id = d.diagnosis_id\nWHERE p.birthday = (SELECT MIN(birthday) FROM patients)\nAND me.symptoms_observed IS NOT NULL;\t----- bird -----\tthrombosis_prediction",
  "88": "SELECT MedicalRecords.CompletionDate, \n       STRFTIME('%Y', Patients.FirstDate) - STRFTIME('%Y', Patients.Birthday) AS Age \nFROM Patients \nJOIN Diagnoses ON Patients.PatientID = Diagnoses.PatientID\nJOIN MedicalRecords ON Patients.PatientID = MedicalRecords.PatientID\nWHERE Diagnoses.Diagnosis = 'SJS' AND MedicalRecords.Type = 'laboratory work completed'\nORDER BY Patients.FirstDate LIMIT 1;\t----- bird -----\tthrombosis_prediction",
  "89": "SELECT \n    (SELECT COUNT(*) FROM Patients WHERE SEX = 'M' AND UA >= 8.0) / \n    (SELECT COUNT(*) FROM Patients WHERE SEX = 'F' AND UA >= 6.5) AS Ratio\nFROM Patients\nLIMIT 1;\t----- bird -----\tthrombosis_prediction",
  "90": "SELECT COUNT(*) \nFROM Patients \nJOIN Examinations ON Patients.ID = Examinations.Patient_ID \nWHERE (strftime('%Y', '1993-01-01') - strftime('%Y', Patients.Birthday)) < 18\nAND strftime('%Y', Examinations.`Examination Date`) BETWEEN '1990' AND '1993';\t----- bird -----\tthrombosis_prediction",
  "91": "SELECT \n    strftime('%Y', e.`Examination Date`) - strftime('%Y', p.Birthday) AS Age,\n    d.Diagnosis\nFROM \n    Patients p\nINNER JOIN \n    Examinations e\nON \n    p.PatientID = e.PatientID\nINNER JOIN \n    Diagnoses d\nON \n    e.DiagnosisID = d.DiagnosisID\nWHERE \n    e.HGB = (SELECT MAX(HGB) FROM Examinations)\t----- bird -----\tthrombosis_prediction",
  "92": "SELECT Laboratory_Results.TestResult\nFROM Patients \nJOIN Diagnoses ON Patients.PatientID = Diagnoses.PatientID\nJOIN Examinations ON Patients.PatientID = Examinations.PatientID\nJOIN Laboratory_Results ON Patients.PatientID = Laboratory_Results.PatientID\nWHERE Diagnoses.Diagnosis = 'SLE' \nAND Diagnoses.Description = '1994-02-19'\nAND Examinations.ExaminationDate = '1993/11/12'\nAND Laboratory_Results.TestName = 'aCL IgM'\t----- bird -----\tthrombosis_prediction",
  "93": "SELECT \n(SUM(case when Date like '1981-11-%' then `T-CHO` else 0 end) - \nSUM(case when Date like '1981-12-%' then `T-CHO` else 0 end)) / \nSUM(case when Date like '1981-11-%' then `T-CHO` else 0 end)\nAS decrease_rate\nFROM Patients\nJOIN Visits ON Patients.ID = Visits.PatientID\nWHERE Birthday = '1959-02-18'\t----- bird -----\tthrombosis_prediction",
  "94": "SELECT Patients.patient_id\nFROM Patients\nJOIN Examinations ON Patients.patient_id = Examinations.patient_id\nWHERE Examinations.exam_date BETWEEN '1987-07-06' AND '1996-01-31'\nAND Examinations.GPT > 30\nAND Examinations.ALB < 4;\t----- bird -----\tthrombosis_prediction",
  "95": "SELECT COUNT(*) \nFROM Patients\nJOIN TestResults ON Patients.PatientId = TestResults.PatientId\nWHERE Thrombosis = 2 AND ANA = 'S' AND `aCL IgM` > (SELECT AVG(`aCL IgM`)*1.2 FROM TestResults)\t----- bird -----\tthrombosis_prediction",
  "96": "SELECT Patients.PatientID\nFROM Patients\nJOIN LabTests ON Patients.PatientID = LabTests.PatientID\nJOIN ReferenceRanges ON LabTests.TestName = ReferenceRanges.TestName\nWHERE Patients.Admission = '-' \nAND LabTests.Date LIKE '1991-10%' \nAND LabTests.T-BIL >= ReferenceRanges.LowerLimit \nAND LabTests.T-BIL <= ReferenceRanges.UpperLimit\nAND ReferenceRanges.TestName = 'T-BIL';\t----- bird -----\tthrombosis_prediction",
  "97": "SELECT AVG(Blood_test_results.ALB)\nFROM Patients\nJOIN Blood_test_results ON Patients.Patient_ID = Blood_test_results.Patient_ID\nWHERE Patients.SEX = 'F' AND Blood_test_results.PLT > 400 AND Patients.Diagnosis = 'SLE';\t----- bird -----\tthrombosis_prediction",
  "98": "SELECT COUNT(DISTINCT Patients.PatientID)\nFROM Patients\nJOIN Diagnosis ON Patients.PatientID = Diagnosis.PatientID\nWHERE Patients.SEX = 'F' AND Diagnosis.Diagnosis = 'APS'\t----- bird -----\tthrombosis_prediction",
  "99": "SELECT \n    (COUNT(CASE WHEN Patients.SEX = 'F' THEN 1 END) * 100.0 / COUNT(*)) as percentage\nFROM \n    Patients\nJOIN \n    Diagnoses ON Patients.patient_id = Diagnoses.patient_id\nWHERE \n    strftime('%Y', Patients.BIRTHDAY) = '1980' AND Diagnoses.Diagnosis = 'RA'\t----- bird -----\tthrombosis_prediction",
  "100": "SELECT \n  CASE \n    WHEN SEX = 'M' AND UA <= 8.0 THEN 'Yes' \n    WHEN SEX = 'F' AND UA <= 6.5 THEN 'Yes' \n    ELSE 'No' \n  END AS 'IsNormal' \nFROM patient \nWHERE patient_number = 57266;\t----- bird -----\tthrombosis_prediction",
  "101": "SELECT Patients.patient_id\nFROM Patients\nJOIN GPT_levels ON Patients.patient_id = GPT_levels.patient_id\nWHERE Patients.sex = 'M' AND GPT_levels.GPT_level >= 60\t----- bird -----\tthrombosis_prediction",
  "102": "SELECT Patients.diagnosis\nFROM Patients\nJOIN GPT_Levels ON Patients.patient_id = GPT_Levels.patient_id\nWHERE GPT_Levels.GPT_level > 60\nORDER BY Patients.date_of_birth ASC\t----- bird -----\tthrombosis_prediction",
  "103": "SELECT Patients.patient_id, Patients.sex, Patients.birthday\nFROM Patients\nJOIN Lab_results ON Patients.patient_id = Lab_results.patient_id\nWHERE Lab_results.UN = 29\t----- bird -----\tthrombosis_prediction",
  "104": "SELECT sex, GROUP_CONCAT(DISTINCT patient_id) \nFROM patient_info \nJOIN medical_info ON patient_info.patient_id = medical_info.patient_id\nWHERE T_BIL NOT BETWEEN 0.1 AND 1.2\nGROUP BY sex;\t----- bird -----\tthrombosis_prediction",
  "105": "SELECT AVG((strftime('%Y', 'now') - strftime('%Y', birthday))) AS average_age\nFROM patients\nWHERE sex = 'M' AND T-CHO >= 250\t----- bird -----\tthrombosis_prediction",
  "106": "SELECT COUNT(DISTINCT Patients.patient_id) \nFROM Patients \nJOIN Medical_Records \nON Patients.patient_id = Medical_Records.patient_id \nWHERE Medical_Records.triglyceride_level >= 200 \nAND (strftime('%Y', 'now') - strftime('%Y', Patients.birthday)) > 50\t----- bird -----\tthrombosis_prediction",
  "107": "SELECT COUNT(DISTINCT Patients.PatientID)\nFROM Patients\nJOIN Reports ON Patients.PatientID = Reports.PatientID\nWHERE strftime('%Y', Patients.Birthday) BETWEEN '1936' AND '1956'\nAND Patients.Sex = 'M'\nAND Reports.CPK >= 250\t----- bird -----\tthrombosis_prediction",
  "108": "SELECT Patients.ID, Patients.sex, \n       (strftime('%Y', 'now') - strftime('%Y', Patients.birthday)) AS age\nFROM Patients\nJOIN Medical_Records\nON Patients.ID = Medical_Records.patient_id\nWHERE Medical_Records.GLU >= 180 AND Medical_Records.T_CHO >= 0 AND Medical_Records.T_CHO < 250\t----- bird -----\tthrombosis_prediction",
  "109": "SELECT P.PatientID, (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) as Age, D.Diagnosis\nFROM Patients P\nJOIN Diagnosis D ON P.PatientID = D.PatientID\nJOIN BloodTest B ON P.PatientID = B.PatientID\nWHERE B.RBC < 3.5\t----- bird -----\tthrombosis_prediction",
  "110": "SELECT Patients.ID, Patients.sex\nFROM Patients\nINNER JOIN Diagnoses ON Patients.ID = Diagnoses.PatientID\nWHERE Diagnoses.Diagnosis = 'SLE' AND Diagnoses.HGB >= 10 AND Diagnoses.HGB <= 17\nORDER BY Patients.birthday ASC\nLIMIT 1;\t----- bird -----\tthrombosis_prediction",
  "111": "SELECT Patients.ID, (strftime('%Y', 'now') - strftime('%Y', Patients.Birthday)) as Age \nFROM Patients\nJOIN LaboratoryExaminations ON Patients.ID = LaboratoryExaminations.PatientID\nJOIN LabResults ON LaboratoryExaminations.ExaminationID = LabResults.ExaminationID\nWHERE LabResults.HCT >= 52\nGROUP BY Patients.ID\nHAVING COUNT(LaboratoryExaminations.ExaminationID) >= 2;\t----- bird -----\tthrombosis_prediction",
  "112": "SELECT \n  (SELECT COUNT(*) FROM Patients WHERE platelet_level < 100) AS CountLowerThanNormal,\n  (SELECT COUNT(*) FROM Patients WHERE platelet_level > 400) AS CountHigherThanNormal\nFROM Patients WHERE platelet_level < 100 OR platelet_level > 400;\t----- bird -----\tthrombosis_prediction",
  "113": "SELECT Patients.*, Examinations.*\nFROM Patients \nJOIN Examinations ON Patients.PatientID = Examinations.PatientID \nWHERE STRFTIME('%Y', Examinations.Date) = '1984' \nAND (STRFTIME('%Y', 'now') - STRFTIME('%Y', Patients.Birthday)) < 50 \nAND Examinations.PLT BETWEEN 100 AND 400;\t----- bird -----\tthrombosis_prediction",
  "114": "SELECT \n    (CAST(SUM(CASE WHEN PT >= 14 AND SEX = 'F' THEN 1 ELSE 0 END) AS FLOAT) / CAST(SUM(CASE WHEN PT >= 14 THEN 1 ELSE 0 END) AS FLOAT)) * 100 AS Percentage\nFROM patient\nWHERE (strftime('%Y', 'now') - strftime('%Y', Birthday)) > 55\t----- bird -----\tthrombosis_prediction",
  "115": "SELECT COUNT(DISTINCT PatientID) \nFROM Patients \nWHERE Sex = 'M' AND WBC > 3.5 AND WBC < 9.0 AND (FG <= 150 OR FG >= 450)\t----- bird -----\tthrombosis_prediction",
  "116": "SELECT COUNT(DISTINCT Patients.patient_id) \nFROM Patients \nJOIN LabResults ON Patients.patient_id = LabResults.patient_id \nWHERE LabResults.IgG >= 2000\t----- bird -----\tthrombosis_prediction",
  "117": "SELECT COUNT(*) \nFROM Patients \nWHERE IgG > 900 AND IgG < 2000 AND Symptoms IS NOT NULL;\t----- bird -----\tthrombosis_prediction",
  "118": "SELECT COUNT(DISTINCT Patients.PatientID)\nFROM Patients\nJOIN IgA_levels ON Patients.PatientID = IgA_levels.PatientID\nWHERE IgA_levels.IGA > 80 AND IgA_levels.IGA < 500\nAND Patients.`First Date` > '1990-01-01'\t----- bird -----\tthrombosis_prediction",
  "119": "SELECT Diagnosis\nFROM Patients\nJOIN Diagnoses ON Patients.PatientID = Diagnoses.PatientID\nWHERE IgM_level <= 40 OR IgM_level >= 400\nGROUP BY Diagnosis\nORDER BY COUNT(Diagnosis) DESC\nLIMIT 1\t----- bird -----\tthrombosis_prediction",
  "120": "SELECT COUNT(Patient_ID) \nFROM Patients \nWHERE CRP = '+' AND Description IS NULL\t----- bird -----\tthrombosis_prediction",
  "121": "SELECT COUNT(*) \nFROM Patients p\nJOIN Labs l ON p.patient_id = l.patient_id\nWHERE l.CRE >= 1.5\nAND (strftime('%Y', 'now') - strftime('%Y', p.birthday)) < 70;\t----- bird -----\tthrombosis_prediction",
  "122": "SELECT COUNT(DISTINCT PatientID) \nFROM Patients \nWHERE (RNP = '-' OR RNP = '+-') \nAND Admission = '+'\t----- bird -----\tthrombosis_prediction",
  "123": "SELECT COUNT(*) \nFROM Patients \nWHERE Anti_SM IN('-', '+-') AND Thrombosis = 0\t----- bird -----\tthrombosis_prediction",
  "124": "SELECT COUNT(DISTINCT patients.patient_id)\nFROM patients\nLEFT JOIN symptoms ON patients.patient_id = symptoms.patient_id\nWHERE patients.SC170 IN('negative', '0') \n      AND patients.Sex = 'F' \n      AND symptoms.symptom IS NULL\t----- bird -----\tthrombosis_prediction",
  "125": "SELECT COUNT(DISTINCT Patients.PatientID) \nFROM Patients \nJOIN Results r1 ON Patients.PatientID = r1.PatientID \nJOIN Results r2 ON Patients.PatientID = r2.PatientID  \nWHERE (r1.TestName = 'CENTROMEA' AND r1.TestResult IN('-', '+-'))\nAND (r2.TestName = 'SSB' AND r2.TestResult IN('-', '+-'))\nAND Patients.Sex = 'M'\t----- bird -----\tthrombosis_prediction",
  "126": "Given that the plan doesn't mention the schema structure explicitly, following is a general SQL query - Replace 'PatientTable', 'DateOfBirth', 'LabResultsTable', 'GOTResults' and 'PatientID' with the actual table and column names present in your database schema.\n\n```sql\nSELECT PatientTable.DateOfBirth\nFROM PatientTable \nJOIN LabResultsTable ON PatientTable.PatientID = LabResultsTable.PatientID\nWHERE LabResultsTable.GOTResults >= 60\nORDER BY PatientTable.DateOfBirth DESC \nLIMIT 1;\n```\nRemember this query will return the most recent birthdate, which corresponds to the youngest patient.\t----- bird -----\tthrombosis_prediction",
  "127": "SELECT COUNT(DISTINCT Patients.patient_id)\nFROM Patients\nJOIN Lab_Results ON Patients.patient_id = Lab_Results.patient_id\nWHERE Lab_Results.CPK < 250 AND (Lab_Results.KCT = '+' OR Lab_Results.RVVT = '+' OR Lab_Results.LAC = '+')\t----- bird -----\tthrombosis_prediction",
  "128": "SELECT L.name AS league_name\nFROM Matches M\nJOIN Leagues L ON M.league_id = L.id\nWHERE M.season = '2015/2016'\nGROUP BY L.name\nORDER BY SUM(M.home_team_goal + M.away_team_goal) DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
  "129": "SELECT Team.team_long_name AS Away_Team, COUNT(*) AS Total_Wins\nFROM Match\nJOIN League ON League.id = Match.league_id\nJOIN Team ON Match.away_team_api_id = Team.team_api_id\nWHERE Match.season = '2009/2010'\nAND League.name = 'Scotland Premier League'\nAND Match.away_team_goal > Match.home_team_goal\nGROUP BY Match.away_team_api_id\nORDER BY Total_Wins DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
  "130": "SELECT Team.team_long_name, Team_Attributes.buildUpPlaySpeed\nFROM Team \nJOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id\nWHERE Team.team_fifa_api_id IS NOT NULL \nORDER BY Team_Attributes.buildUpPlaySpeed DESC \nLIMIT 4\t----- bird -----\teuropean_football_2",
  "131": "SELECT L.league_name\nFROM matches M\nJOIN leagues L ON M.league_id = L.league_id\nWHERE M.season = '2015/2016' AND M.home_team_goal = M.away_team_goal\nGROUP BY L.league_name\nORDER BY COUNT(*) DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
  "132": "SELECT Players.player_id, (strftime('%Y', 'now') - strftime('%Y', Players.birthday)) as Age\nFROM Players\nJOIN Performance ON Players.player_id = Performance.player_id\nWHERE Performance.sprint_speed >= 97 AND \nstrftime('%Y', Performance.date) >= '2013' AND strftime('%Y', Performance.date) <= '2015';\t----- bird -----\teuropean_football_2",
  "133": "SELECT \n    L.name,\n    COUNT(*) AS match_count\nFROM \n    Matches M\nJOIN \n    Leagues L ON M.league_id=L.id\nGROUP BY \n    L.name \nORDER BY \n    COUNT(*) DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
  "134": "SELECT team_fifa_api_id \nFROM teams \nWHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60\t----- bird -----\teuropean_football_2",
  "135": "SELECT t.team_long_name \nFROM Team t \nJOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id \nWHERE strftime('%Y', ta.date) = '2012' AND ta.buildUpPlayPassing IS NOT NULL \nAND ta.buildUpPlayPassing > (\n    SELECT AVG(buildUpPlayPassing) \n    FROM Team_Attributes \n    WHERE strftime('%Y', date) = '2012' AND buildUpPlayPassing IS NOT NULL\n);\t----- bird -----\teuropean_football_2",
  "136": "SELECT \n  COUNT(DISTINCT CASE WHEN pa.preferred_foot = 'left' AND strftime('%Y', p.birthday) BETWEEN '1987' AND '1992' THEN p.player_api_id END)*100.0/COUNT(DISTINCT p.player_api_id) AS percentage\nFROM \n  player_attributes AS pa\nJOIN\n  player AS p ON p.player_api_id = pa.player_fifa_api_id;\t----- bird -----\teuropean_football_2",
  "137": "SELECT AVG(long_shots) as average_long_shots\nFROM Players_Attributes\nWHERE player_fifa_api_id = (\n    SELECT player_fifa_api_id\n    FROM Players\n    WHERE player_name = 'Ahmed Samir Farag'\n)\t----- bird -----\teuropean_football_2",
  "138": "SELECT Player.player_name, AVG(Player_Attributes.heading_accuracy) as avg_heading_accuracy\nFROM Player \nJOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_fifa_api_id\nWHERE Player.height > 180 \nGROUP BY Player.player_name\nORDER BY avg_heading_accuracy DESC \nLIMIT 10\t----- bird -----\teuropean_football_2",
  "139": "SELECT League.name \nFROM Match \nJOIN League ON Match.league_id = League.id \nWHERE Match.season = '2009/2010' \nGROUP BY League.name \nHAVING AVG(Match.home_team_goal) > AVG(Match.away_team_goal);\t----- bird -----\teuropean_football_2",
  "140": "SELECT * \nFROM players \nWHERE YEAR(birthday) = 1970 AND MONTH(birthday) = 10\t----- bird -----\teuropean_football_2",
  "141": "SELECT player_ratings.overall_rating \nFROM players \nJOIN player_ratings ON players.player_id = player_ratings.player_id \nWHERE players.player_name = 'Gabriel Tamas' AND strftime('%Y', player_ratings.date) = '2011'\t----- bird -----\teuropean_football_2",
  "142": "SELECT AVG(home_team_goal) \nFROM Match \nJOIN Country ON Match.country_id = Country.id \nWHERE Country.name = 'Poland' AND Match.season = '2010/2011';\t----- bird -----\teuropean_football_2",
  "143": "SELECT player_name \nFROM players \nWHERE height BETWEEN (SELECT MIN(height) FROM players) AND (SELECT MAX(height) FROM players) \nGROUP BY player_name \nORDER BY AVG(finishing) DESC \nLIMIT 1;\t----- bird -----\teuropean_football_2",
  "144": "SELECT AVG(t2.overall_rating)\nFROM Players t1\nJOIN Player_Attributes t2 ON t1.id = t2.id\nWHERE t1.height > 170 AND strftime('%Y', t2.date) >= '2010' AND strftime('%Y', t2.date) <= '2015'\t----- bird -----\teuropean_football_2",
  "145": "SELECT \n   (SELECT AVG(ball_control) FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Abdou Diallo')) \n   - \n   (SELECT AVG(ball_control) FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Appindangoye')) \nAS 'Average Ball Control Difference'\t----- bird -----\teuropean_football_2",
  "146": "SELECT name, birth_date \nFROM players \nWHERE name IN ('Aaron Lennon', 'Abdelaziz Barrada') \nORDER BY birth_date DESC \nLIMIT 1;\t----- bird -----\teuropean_football_2",
  "147": "SELECT playerName \nFROM Players\nWHERE height = (SELECT MAX(height) FROM Players);\t----- bird -----\teuropean_football_2",
  "148": "SELECT COUNT(*) \nFROM players \nWHERE preferred_foot = 'left' \nAND attacking_work_rate = 'low';\t----- bird -----\teuropean_football_2",
  "149": "SELECT COUNT(DISTINCT player_id) \nFROM Players \nWHERE strftime('%Y', birthday) < '1986' AND defensive_work_rate = 'high'\t----- bird -----\teuropean_football_2",
  "150": "SELECT player_name \nFROM players \nWHERE volleys > 70 AND dribbling > 70\t----- bird -----\teuropean_football_2",
  "151": "SELECT COUNT(*) \nFROM Matches \nJOIN Leagues ON Matches.league_id = Leagues.id \nWHERE Leagues.name = 'Belgium Jupiler League' \nAND SUBSTR(Matches.date, 1, 7) = '2009-04'\t----- bird -----\teuropean_football_2",
  "152": "SELECT L.league_name\nFROM League L\nJOIN Match M ON L.league_id = M.league_id\nWHERE M.season = '2008/2009'\nGROUP BY L.league_name\nORDER BY COUNT(*) DESC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
  "153": "SELECT ((p1.overall_rating - p2.overall_rating) / p2.overall_rating) * 100\nFROM players AS p1, players AS p2\nWHERE p1.player_name = 'Ariel Borysiuk' AND p2.player_name = 'Paulin Puel'\t----- bird -----\teuropean_football_2",
  "154": "SELECT AVG(T1.overall_rating) \nFROM player_attributes AS T1\nINNER JOIN players AS T2 ON T1.player_api_id = T2.player_api_id \nWHERE T2.player_name = 'Pietro Marino'\t----- bird -----\teuropean_football_2",
  "155": "SELECT MAX(TA.chanceCreationPassing), TA.chanceCreationPassingClass\nFROM Team T\nJOIN Team_Attributes TA ON T.team_api_id = TA.team_api_id\nWHERE T.team_long_name = 'Ajax'\t----- bird -----\teuropean_football_2",
  "156": "SELECT name \nFROM players \nWHERE overall_rating = 77 AND date LIKE '2016-06-23%'\nORDER BY birthday ASC \nLIMIT 1;\t----- bird -----\teuropean_football_2",
  "157": "SELECT player_ratings.rating\nFROM player_ratings\nJOIN player ON player.id = player_ratings.player_id\nWHERE player.name = 'Aaron Mooy' AND date(player_ratings.date) = '2016-02-04'\t----- bird -----\teuropean_football_2",
  "158": "SELECT player_stats.attacking_work_rate\nFROM players\nJOIN player_stats ON players.player_id = player_stats.player_id\nWHERE players.player_name = 'Francesco Migliore' AND player_stats.date LIKE '2015-05-01%'\t----- bird -----\teuropean_football_2",
  "159": "SELECT date_played\nFROM player_crossing_scores\nWHERE player_name = 'Kevin Constant'\nAND crossing = (SELECT MAX(crossing) FROM player_crossing_scores WHERE player_name = 'Kevin Constant')\nORDER BY date_played ASC\nLIMIT 1;\t----- bird -----\teuropean_football_2",
  "160": "SELECT Team_Attributes.buildUpPlayPassingClass\nFROM Team \nJOIN Match ON Team.team_api_id = Match.home_team_api_id OR Team.team_api_id = Match.away_team_api_id \nJOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id\nWHERE Team.team_long_name = 'FC Lorient' AND Match.date LIKE '2010-02-22%'\nAND Team_Attributes.date <= Match.date\nORDER BY Team_Attributes.date DESC\nLIMIT 1\t----- bird -----\teuropean_football_2",
  "161": "SELECT team_attributes.defence_aggression_class\nFROM team\nINNER JOIN team_attributes ON team.team_id = team_attributes.team_id\nWHERE team.team_long_name = 'Hannover 96' AND team_attributes.date = '2015-09-10'\t----- bird -----\teuropean_football_2",
  "162": "SELECT AVG(overall_rating) \nFROM players \nJOIN player_history ON players.player_id = player_history.player_id \nWHERE player_name = 'Marko Arnautovic' AND date(date) BETWEEN '2007-02-22' AND '2016-04-21';\t----- bird -----\teuropean_football_2",
  "163": "SELECT \n    ((ld.overall_rating - jb.overall_rating) / ld.overall_rating) * 100 as percentage_diff\nFROM \n    (SELECT overall_rating \n     FROM players \n     WHERE player_name = 'Landon Donovan' AND date = '2013-07-12') AS ld,\n    (SELECT overall_rating \n     FROM players \n     WHERE player_name = 'Jordan Bowery' AND date = '2013-07-12') AS jb\t----- bird -----\teuropean_football_2",
  "164": "SELECT Players.player_name \nFROM Players \nJOIN Height ON Players.player_id = Height.player_id \nWHERE Height.rank = 1;\t----- bird -----\teuropean_football_2",
  "165": "SELECT player_name \nFROM players \nWHERE overall_rating = (SELECT MAX(overall_rating) FROM players);\t----- bird -----\teuropean_football_2",
  "166": "SELECT player_name \nFROM players \nWHERE attacking_work_rate = 'high';\t----- bird -----\teuropean_football_2",
  "167": "SELECT teams.team_short_name\nFROM teams\nJOIN players ON teams.team_id = players.team_id\nWHERE players.chanceCreationPassingClass = 'Safe'\nGROUP BY teams.team_short_name\t----- bird -----\teuropean_football_2",
  "168": "SELECT COUNT(*) AS num_players\nFROM players\nWHERE player_name LIKE 'Aaron%' AND birthday > '1990-12-31';\t----- bird -----\teuropean_football_2",
  "169": "SELECT \n    (SELECT jumping FROM player_scores WHERE player_id = 6)\n    -\n    (SELECT jumping FROM player_scores WHERE player_id = 23)\nAS jumping_score_difference\t----- bird -----\teuropean_football_2",
  "170": "SELECT player_id \nFROM players \nWHERE preferred_foot = 'right' \nORDER BY potential ASC \nLIMIT 4\t----- bird -----\teuropean_football_2",
  "171": "SELECT COUNT(*) \nFROM Players \nWHERE Preferred_foot = 'left' AND Crossing = (SELECT MAX(Crossing) FROM Players);\t----- bird -----\teuropean_football_2",
  "172": "SELECT T1.team_long_name AS home_team, T2.team_long_name AS away_team, M.home_team_goal, M.away_team_goal\nFROM Match M\nLEFT JOIN Team T1 ON M.home_team_api_id = T1.team_api_id\nLEFT JOIN Team T2 ON M.away_team_api_id = T2.team_api_id\nLEFT JOIN League L ON M.league_id = L.id\nWHERE M.date LIKE '2008-09-24%' AND L.name = 'Belgium Jupiler League';\t----- bird -----\teuropean_football_2",
  "173": "SELECT team_attributes.buildUpPlaySpeedClass\nFROM team_attributes\nINNER JOIN teams ON teams.team_id = team_attributes.team_id\nWHERE teams.team_long_name = 'KSV Cercle Brugge';\t----- bird -----\teuropean_football_2",
  "174": "SELECT PlayerAttributes.finishing, PlayerAttributes.curve\nFROM PlayerAttributes\nJOIN Players ON Players.id = PlayerAttributes.player_id\nWHERE Players.weight = (SELECT MAX(weight) FROM Players)\t----- bird -----\teuropean_football_2",
  "175": "SELECT L.name, COUNT(M.id) AS number_of_games\nFROM Matches M\nINNER JOIN Leagues L ON M.league_id = L.id\nWHERE M.season = '2015/2016'\nGROUP BY L.name\nORDER BY number_of_games DESC\nLIMIT 4\t----- bird -----\teuropean_football_2",
  "176": "SELECT T.team_long_name \nFROM Match M \nJOIN Team T ON M.away_team_api_id = T.team_api_id \nGROUP BY M.away_team_api_id\nORDER BY MAX(M.away_team_goal) DESC \nLIMIT 1\t----- bird -----\teuropean_football_2",
  "177": "SELECT player_name \nFROM players\nWHERE overall_rating = (SELECT MAX(overall_rating) FROM players)\nLIMIT 1;\t----- bird -----\teuropean_football_2",
  "178": "SELECT \n  (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM player)) \nFROM \n  player \nWHERE \n  height < 180 AND overall_strength > 70\t----- bird -----\teuropean_football_2",
  "179": "SELECT drivers.driverRef \nFROM drivers \nJOIN qualifying ON drivers.driverId = qualifying.driverId \nWHERE qualifying.raceId = 20 AND qualifying.q1 IN (SELECT q1 FROM qualifying WHERE raceId = 20 ORDER BY q1 DESC LIMIT 5)\t----- bird -----\tformula_1",
  "180": "SELECT drivers.surname\nFROM qualifying\nJOIN races ON qualifying.raceId = races.raceId\nJOIN drivers ON qualifying.driverId = drivers.driverId\nWHERE races.raceId = 19 AND qualifying.q2 = (SELECT MIN(q2) FROM qualifying WHERE raceId = 19)\t----- bird -----\tformula_1",
  "181": "SELECT races.name \nFROM races \nJOIN circuits ON races.circuit_id = circuits.circuit_id \nJOIN countries ON circuits.country_id = countries.country_id \nWHERE countries.name = 'Germany' \nGROUP BY races.name\t----- bird -----\tformula_1",
  "182": "SELECT circuits.lat, circuits.lng\nFROM circuits\nJOIN races ON circuits.circuitId = races.circuitId\nWHERE races.name = 'Australian Grand Prix'\t----- bird -----\tformula_1",
  "183": "SELECT lat, lng \nFROM races \nWHERE name = 'Abu Dhabi Grand Prix';\t----- bird -----\tformula_1",
  "184": "SELECT results.q1 \nFROM results \nJOIN drivers ON results.driverId = drivers.driverId \nWHERE drivers.forename='Bruno' AND drivers.surname='Senna' AND results.raceId=354\t----- bird -----\tformula_1",
  "185": "SELECT results.driverId \nFROM races \nJOIN results ON races.raceId = results.raceId \nWHERE races.raceId = 903 AND results.q3 LIKE '0:01:54%'\t----- bird -----\tformula_1",
  "186": "SELECT COUNT(*)\nFROM races\nJOIN results ON races.raceId = results.raceId\nWHERE races.name = 'Bahrain Grand Prix' AND races.year = 2007 AND results.time IS NULL\t----- bird -----\tformula_1",
  "187": "SELECT d.driverId, d.forename, d.surname, d.dob\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nWHERE r.raceId = 592 AND r.time IS NOT NULL\nORDER BY d.dob ASC\nLIMIT 1\t----- bird -----\tformula_1",
  "188": "SELECT drivers.driverRef, drivers.url\nFROM drivers\nJOIN results ON drivers.driverId = results.driverId\nJOIN races ON results.raceId = races.raceId\nWHERE results.time LIKE '1:27%' AND races.raceId = 161;\t----- bird -----\tformula_1",
  "189": "SELECT circuits.lat, circuits.lng\nFROM races\nJOIN circuits ON races.circuitId = circuits.circuitId\nWHERE races.name = 'Malaysian Grand Prix'\t----- bird -----\tformula_1",
  "190": "SELECT Constructors.url \nFROM Constructors \nJOIN ConstructorResults ON Constructors.constructorId = ConstructorResults.constructorId \nJOIN Races ON Races.raceId = ConstructorResults.raceId \nJOIN \n    (SELECT raceId, MAX(points) as max_points \n    FROM ConstructorResults \n    GROUP BY raceId) AS MaxPoints\nON MaxPoints.raceId = Races.raceId AND MaxPoints.max_points = ConstructorResults.points\nWHERE Races.raceId = 9\t----- bird -----\tformula_1",
  "191": "SELECT drivers.code\nFROM drivers\nJOIN qualifying ON drivers.driverId = qualifying.driverId\nJOIN races ON races.raceId = qualifying.raceId\nWHERE races.raceId = 45 AND qualifying.q3 = '0:01:33';\t----- bird -----\tformula_1",
  "192": "SELECT Seasons.url\nFROM Races\nJOIN Seasons ON Races.year = Seasons.year\nWHERE Races.raceId = 901\t----- bird -----\tformula_1",
  "193": "SELECT drivers.name, drivers.dob \nFROM drivers \nJOIN finishing_times \nON drivers.driverId = finishing_times.driverId \nJOIN races \nON finishing_times.raceId = races.raceId \nWHERE races.raceId = 872 \nORDER BY drivers.dob ASC \nLIMIT 1\t----- bird -----\tformula_1",
  "194": "SELECT d.nationality \nFROM drivers d \nJOIN lap_times lt ON d.driverId = lt.driverId \nWHERE lt.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM lap_times)\t----- bird -----\tformula_1",
  "195": "SELECT \n    (((MAX(case when raceId = 853 then speed else null end) / \n    MAX(case when raceId = 854 then speed else null end)) - 1) * 100) AS percentage\nFROM \n    lapTimes\nJOIN \n    (SELECT driverId \n    FROM drivers \n    WHERE forename = 'Paul' AND surname = 'di Resta') AS diResta\nON \n    lapTimes.driverId = diResta.driverId\nWHERE \n    raceId IN (853, 854)\t----- bird -----\tformula_1",
  "196": "SELECT \n    (COUNT(DISTINCT CASE WHEN Results.time IS NOT NULL THEN Drivers.driverid END) * 1.0 / COUNT(DISTINCT Drivers.driverid))*100 AS completion_rate\nFROM \n    Drivers \nJOIN \n    Results ON Drivers.driverid = Results.driverid\nJOIN \n    Races ON Races.raceid = Results.raceid\nWHERE \n    Races.date = '1983-07-16'\t----- bird -----\tformula_1",
  "197": "SELECT \n    race_name \nFROM \n    races \nWHERE \n    strftime('%Y-%m', date) = (SELECT strftime('%Y-%m', MIN(date)) FROM races);\t----- bird -----\tformula_1",
  "198": "SELECT drivers.forename, drivers.surname, results.points\nFROM drivers \nJOIN results ON drivers.driverId = results.driverId\nORDER BY results.points DESC \nLIMIT 1;\t----- bird -----\tformula_1",
  "199": "SELECT min(LapTimes.milliseconds), Drivers.forename, Drivers.surname, Races.name \nFROM LapTimes \nJOIN Drivers ON LapTimes.driverId = Drivers.driverId \nJOIN Races ON LapTimes.raceId = Races.raceId \nORDER BY LapTimes.milliseconds ASC \nLIMIT 1\t----- bird -----\tformula_1",
  "200": "SELECT AVG(lap_times.milliseconds) \nFROM results \nJOIN drivers ON results.driverId = drivers.driverId \nJOIN races ON results.raceId = races.raceId \nJOIN lap_times ON results.raceId = lap_times.raceId AND results.driverId = lap_times.driverId \nWHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Malaysian Grand Prix' AND races.year = 2009;\t----- bird -----\tformula_1",
  "201": "SELECT \n    100.0 * COUNT(DISTINCT CASE WHEN r.positionOrder > 1 THEN r.raceId ELSE NULL END) / COUNT(DISTINCT r.raceId) AS Hamilton_Not_First_Percentage\nFROM \n    results r\nJOIN \n    drivers d ON r.driverId = d.driverId\nJOIN \n    races rac ON r.raceId = rac.raceId\nWHERE \n    d.surname = 'Hamilton' \n    AND rac.year >= 2010;\t----- bird -----\tformula_1",
  "202": "SELECT d.forename, d.surname, d.nationality, MAX(r.points) as maximum_points\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nWHERE r.positionOrder = 1\nGROUP BY d.driverId, d.nationality\nORDER BY COUNT(*) DESC\nLIMIT 1;\t----- bird -----\tformula_1",
  "203": "SELECT name, dob FROM drivers \nWHERE nationality = 'Japanese' AND (CAST(strftime('%Y', 'now') AS INTEGER)- CAST(strftime('%Y', dob) AS INTEGER)) = \n(SELECT MIN(CAST(strftime('%Y', 'now') AS INTEGER) - CAST(strftime('%Y', dob) AS INTEGER)) FROM drivers WHERE nationality = 'Japanese');\t----- bird -----\tformula_1",
  "204": "SELECT races.name, circuits.name, circuits.location\nFROM races\nINNER JOIN circuits ON races.circuitId = circuits.circuitId\nWHERE strftime('%m', date) = '09' AND strftime('%Y', date) = '2005'\t----- bird -----\tformula_1",
  "205": "SELECT races.*\nFROM races\nJOIN results ON races.raceId = results.raceId\nJOIN drivers ON results.driverId = drivers.driverId\nWHERE drivers.forename || ' ' || drivers.surname = 'Alex Yoong'\nAND results.position < 20;\t----- bird -----\tformula_1",
  "206": "SELECT races.name AS Race, races.year AS Year \nFROM races \nJOIN results ON races.raceId = results.raceId \nJOIN drivers ON results.driverId = drivers.driverId\nJOIN lap_times ON drivers.driverId = lap_times.driverId\nWHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' \nORDER BY lap_times.milliseconds ASC \nLIMIT 1;\t----- bird -----\tformula_1",
  "207": "SQL Query: SELECT \n    races.name AS first_race_name,\n    results.points AS points_earned\nFROM\n    drivers\nINNER JOIN\n    results ON drivers.driverId = results.driverId\nINNER JOIN\n    races ON results.raceId = races.raceId\nWHERE \n    drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'\nORDER BY \n    races.year ASC \nLIMIT 1;\t----- bird -----\tformula_1",
  "208": "SELECT \n    (COUNT(*) * 100 / \n    (SELECT COUNT(*) FROM races WHERE name = 'European Grand Prix')) AS percentage\nFROM \n    races \nWHERE \n    name = 'European Grand Prix' \n    AND country = 'Germany'\t----- bird -----\tformula_1",
  "209": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'\t----- bird -----\tformula_1",
  "210": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'\t----- bird -----\tformula_1",
  "211": "SELECT country \nFROM drivers \nWHERE dob = (SELECT MIN(dob) FROM drivers);\t----- bird -----\tformula_1",
  "212": "SELECT drivers.driverRef\nFROM results\nJOIN races ON results.raceId = races.raceId \nJOIN drivers ON results.driverId = drivers.driverId\nWHERE races.name = 'Canadian Grand Prix'\nAND races.year = 2007\nAND results.position = 1\t----- bird -----\tformula_1",
  "213": "SELECT races.name, MIN(results.position)\nFROM results\nJOIN drivers ON results.driverId = drivers.driverId\nJOIN races ON results.raceId = races.raceId\nWHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'\nGROUP BY races.name\nORDER BY MIN(results.position) ASC\nLIMIT 1\t----- bird -----\tformula_1",
  "214": "SELECT MAX(lap_times.speed) \nFROM lap_times\nJOIN races ON lap_times.raceId = races.raceId\nWHERE races.year = 2009 AND races.name = 'Spanish Grand Prix';\t----- bird -----\tformula_1",
  "215": "SELECT results.positionOrder \nFROM drivers \nJOIN results ON drivers.driverId = results.driverId \nJOIN races ON races.raceId = results.raceId \nWHERE drivers.forename = 'Lewis' and drivers.surname = 'Hamilton' and races.name = 'Chinese Grand Prix' and races.year = 2008\t----- bird -----\tformula_1",
  "216": "SELECT results.time \nFROM results \nJOIN races ON results.raceId = races.raceId \nWHERE races.name = 'Chinese Grand Prix' AND races.year = 2008 AND results.positionOrder = 2\t----- bird -----\tformula_1",
  "217": "Database schema is not provided. But based on the plan, a likely SQL query might look something like this:\n\n```sql\nSELECT COUNT(DISTINCT d.driverId)\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nJOIN races ra ON r.raceId = ra.raceId\nWHERE ra.year = 2008 AND ra.name = 'Chinese Grand Prix' AND r.time IS NOT NULL;\n```\n\nPlease provide the actual database schema next time.\t----- bird -----\tformula_1",
  "218": "SELECT ((last_time - champ_time) / last_time) * 100 as Faster_Percentage\nFROM\n(SELECT time as champ_time\nFROM results\nWHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND positionOrder = 1) as Champion,\n(SELECT MAX(time) as last_time\nFROM results\nWHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND time IS NOT NULL) as LastDriver\t----- bird -----\tformula_1",
  "219": "SELECT COUNT(*) \nFROM circuits \nWHERE country = 'Australia' AND city = 'Adelaide';\t----- bird -----\tformula_1",
  "220": "Database Schema: \n\nConstructors (constructorId, name, nationality)\nConstructorStandings (constructorStandingsId, raceId, constructorId, points, position)\n\nSQL Query: \n\nSELECT c.name, MAX(cs.points) as max_points\nFROM Constructors c\nJOIN ConstructorStandings cs ON c.constructorId = cs.constructorId\nWHERE c.nationality = 'British'\nGROUP BY c.constructorId;\t----- bird -----\tformula_1",
  "221": "SELECT Constructors.name \nFROM Constructors \nJOIN Results ON Constructors.constructorId = Results.constructorId \nWHERE Results.raceId = 291 AND Results.points = 0\t----- bird -----\tformula_1",
  "222": "SELECT COUNT(DISTINCT constructors.constructorId)\nFROM constructors\nJOIN results ON constructors.constructorId = results.constructorId\nWHERE constructors.nationality = 'Japanese' AND results.points = 0\nGROUP BY constructors.constructorId\nHAVING COUNT(results.raceId) = 2\t----- bird -----\tformula_1",
  "223": "SELECT \n    (CAST(COUNT(case when results.time IS NOT NULL then 1 end) AS FLOAT) / COUNT(results.raceId)) * 100 as completion_percentage\nFROM \n    results\nJOIN \n    races ON results.raceId = races.raceId\nJOIN \n    drivers ON results.driverId = drivers.driverId\nWHERE \n    races.year BETWEEN 2007 AND 2009\nAND \n    drivers.nationality = 'Japanese'\t----- bird -----\tformula_1",
  "224": "SELECT Year, AVG((strftime('%s', FinishTime) - strftime('%s', '00:00')) + (substr(FinishTime, -4, 3)/1000)) as AvgTimeInSeconds\nFROM Champions\nWHERE Year < 1975 AND FinishTime IS NOT NULL\nGROUP BY Year\t----- bird -----\tformula_1",
  "225": "SELECT lap_number \nFROM lap_times \nJOIN driver_standings ON lap_times.driver_id = driver_standings.driver_id \nJOIN races ON lap_times.race_id = races.race_id \nWHERE races.year = 2009 AND driver_standings.position = 1 \nORDER BY lap_times.time ASC \nLIMIT 1;\t----- bird -----\tformula_1",
  "226": "SELECT AVG(results.fastestLapSpeed)\nFROM races\nJOIN results ON races.raceId = results.raceId\nWHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;\t----- bird -----\tformula_1",
  "227": "SELECT \n  (COUNT(DISTINCT d.driverId) * 100.0 /\n  (SELECT COUNT(DISTINCT driverId) FROM drivers WHERE strftime('%Y',dob) BETWEEN '2000' AND '2005')) AS percentage\nFROM \n  drivers d\nJOIN \n  laps l ON d.driverId = l.driverId\nWHERE \n  strftime('%Y', d.dob) < '1985' AND l.lap > 50 AND strftime('%Y', l.date) BETWEEN '2000' AND '2005'\t----- bird -----\tformula_1",
  "228": "SELECT COUNT(*)\nFROM Drivers d\nJOIN Laptimes l ON d.driver_id = l.driver_id\nWHERE d.nationality = 'French' AND l.lap_time < 120\t----- bird -----\tformula_1",
  "229": "Assuming the database schema looks like:\n\nDrivers(DriverID, DriverCode, NationalityID)\nNationality(NationalityID, NationalityName)\n\nThe SQL query would be:\n\n```sql\nSELECT d.DriverCode\nFROM Drivers d\nJOIN Nationality n ON d.NationalityID = n.NationalityID\nWHERE n.NationalityName = 'American';\n```\t----- bird -----\tformula_1",
  "230": "WITH top_three_youngest AS (\n    SELECT state_code, nationality\n    FROM drivers\n    ORDER BY dob DESC\n    LIMIT 3)\n\nSELECT COUNT(*) FROM top_three_youngest\nWHERE nationality = 'Netherlandic' OR nationality = 'Dutch'\t----- bird -----\tformula_1",
  "231": "SELECT driverRef FROM Drivers WHERE dob = (SELECT MIN(dob) FROM Drivers WHERE nationality = 'German')\t----- bird -----\tformula_1",
  "232": "SELECT D.id, D.code\nFROM Drivers D \nINNER JOIN RaceResults RR ON D.id = RR.driverId \nWHERE strftime('%Y', D.dob) = '1971' \nORDER BY RR.fastestLapTime ASC LIMIT 1;\t----- bird -----\tformula_1",
  "233": "SELECT COUNT(*)\nFROM Races JOIN Results ON Races.raceId = Results.raceId\nWHERE Races.raceId > 50 AND Races.raceId < 100 AND Results.statusId = 2 AND Results.time IS NOT NULL\t----- bird -----\tformula_1",
  "234": "SELECT COUNT(races.circuitId) as times_held, circuits.name, circuits.lat, circuits.lng\nFROM races\nJOIN circuits ON races.circuitId = circuits.circuitId\nWHERE circuits.country = 'Austria'\nGROUP BY circuits.circuitId;\t----- bird -----\tformula_1",
  "235": "SELECT drivers.name, MIN(races.date) as 'First Race Date', races.time as 'First Race Time'\nFROM drivers\nJOIN results ON drivers.driverId = results.driverId\nJOIN races ON results.raceId = races.raceId\nGROUP BY drivers.driverId\nORDER BY (strftime('%Y', MIN(races.date)) - strftime('%Y', drivers.dob)) ASC, drivers.driverId ASC\nLIMIT 1;\t----- bird -----\tformula_1",
  "236": "SELECT drivers.forename, drivers.surname, AVG(pit_stops.duration) as avg_duration\nFROM drivers\nJOIN pit_stops ON drivers.driverId = pit_stops.driverId\nWHERE drivers.nationality = 'German' AND STRFTIME('%Y', drivers.dob) BETWEEN '1980' AND '1985'\nGROUP BY drivers.driverId\nORDER BY avg_duration ASC\nLIMIT 3\t----- bird -----\tformula_1",
  "237": "SELECT Races.champion, Results.finish_time\nFROM Races\nINNER JOIN Results ON Races.race_id = Results.race_id\nWHERE Races.race_name = 'Canadian Grand Prix' AND Races.year = 2008;\t----- bird -----\tformula_1",
  "238": "SELECT constructors.constructorRef, circuits.url\nFROM races\nJOIN results ON races.raceId = results.raceId\nJOIN constructors ON results.constructorId = constructors.constructorId\nJOIN circuits ON races.circuitId = circuits.circuitId\nWHERE races.year = 2009 AND races.name = 'Singapore Grand Prix' AND results.positionOrder = 1\t----- bird -----\tformula_1",
  "239": "SELECT powers.power_name\nFROM superheroes\nJOIN superhero_powers ON superheroes.superhero_id = superhero_powers.superhero_id\nJOIN powers ON superhero_powers.power_id = powers.power_id\nWHERE superheroes.superhero_name = '3-D Man'\t----- bird -----\tsuperhero",
  "240": "SELECT \n    SUM(results.points) AS score, \n    constructors.name, \n    constructors.nationality \nFROM \n    results JOIN constructors ON results.constructorId = constructors.constructorId \n    JOIN races ON results.raceId = races.raceId \nWHERE \n    races.name = 'Monaco Grand Prix' AND races.year BETWEEN 1980 AND 2010 \nGROUP BY \n    constructors.constructorId \nORDER BY \n    score DESC \nLIMIT 1;\t----- bird -----\tformula_1",
  "241": "SELECT drivers.forename, drivers.surname \nFROM qualifying JOIN races ON qualifying.raceId = races.raceId \nJOIN drivers ON qualifying.driverId = drivers.driverId \nJOIN circuits ON races.circuitId = circuits.circuitId \nWHERE races.year = 2008 AND circuits.circuitRef = 'marina_bay' AND qualifying.position = 1 AND qualifying.q3 = (SELECT MIN(q3) FROM qualifying)\t----- bird -----\tformula_1",
  "242": "SELECT racers.forename || ' ' || racers.surname as full_name, nationalities.nationality, races.race_name\nFROM racers \nJOIN nationalities ON racers.nationality_id = nationalities.id \nJOIN races ON racers.first_race_id = races.id\nWHERE racers.dob = (SELECT MIN(dob) FROM racers)\t----- bird -----\tformula_1",
  "243": "SELECT MAX(countAccident) \nFROM \n    (SELECT drivers.driverid, COUNT(status.statusid) as countAccident \n    FROM drivers\n    JOIN races ON drivers.driverid = races.driverid \n    JOIN status ON races.statusid = status.statusid\n    WHERE races.name = 'Canadian Grand Prix' AND status.statusid = 3 \n    GROUP BY drivers.driverid)\t----- bird -----\tformula_1",
  "244": "SELECT d.forename, d.surname\nFROM drivers d\nJOIN results r\nON d.driverId = r.driverId\nJOIN races ra\nON ra.raceId = r.raceId\nORDER BY MIN(r.time)\nLIMIT 20\t----- bird -----\tformula_1",
  "245": "SELECT Lap_Records.time \nFROM Lap_Records \nJOIN Circuits ON Lap_Records.circuit_id = Circuits.circuit_id \nWHERE Circuits.country = 'Italy';\t----- bird -----\tformula_1",
  "246": "SELECT COUNT(*) \nFROM Superheroes sh \nJOIN Superpowers sp ON sh.superhero_id = sp.power_id \nWHERE sp.power_name = 'Super Strength' AND sh.height_cm > 200;\t----- bird -----\tsuperhero",
  "247": "SELECT COUNT(DISTINCT superheroes.id)\nFROM superheroes\nJOIN eye_colors ON superheroes.eye_colour_id = eye_colors.id\nJOIN superhero_superpowers ON superheroes.id = superhero_superpowers.superhero_id\nJOIN superpowers ON superpowers.id = superhero_superpowers.superpower_id\nWHERE eye_colors.colour = 'Blue' AND superpowers.power_name = 'Agility'\t----- bird -----\tsuperhero",
  "248": "SELECT superheroes.name\nFROM superheroes\nJOIN colors AS eye_colors ON superheroes.eye_color_id = eye_colors.id\nJOIN colors AS hair_colors ON superheroes.hair_color_id = hair_colors.id\nWHERE eye_colors.color = 'Blue' AND hair_colors.color = 'Blond'\t----- bird -----\tsuperhero",
  "249": "SELECT superhero_name, height_cm\nFROM superhero\nJOIN publisher ON publisher_id = publisher.publisher_id\nWHERE publisher.publisher_name = 'Marvel Comics'\nORDER BY height_cm DESC;\t----- bird -----\tsuperhero",
  "250": "SELECT eye_color, COUNT(id) AS popularity\nFROM superheroes\nWHERE publisher_name = 'Marvel Comics'\nGROUP BY eye_color\nORDER BY popularity DESC\t----- bird -----\tsuperhero",
  "251": "SELECT superheroes.superhero_name \nFROM superheroes \nJOIN superpowers ON superheroes.superhero_id = superpowers.superhero_id \nJOIN publishers ON superheroes.publisher_id = publishers.publisher_id \nWHERE publishers.publisher_name = 'Marvel Comics' \nAND superpowers.power_name = 'Super Strength';\t----- bird -----\tsuperhero",
  "252": "SELECT p.publisher_name \nFROM superheroes s\nJOIN publishers p ON s.superhero_id = p.superhero_id\nJOIN attributes a ON s.superhero_id = a.superhero_id\nWHERE a.attribute_name = 'Speed'\nORDER BY a.attribute_value ASC \nLIMIT 1;\t----- bird -----\tsuperhero",
  "253": "SELECT COUNT(*)\nFROM superheroes\nJOIN colors ON superheroes.eye_color_id = colors.id\nWHERE colors.color = 'Gold' AND superheroes.publisher_id = (SELECT id FROM publishers WHERE name = 'Marvel Comics')\t----- bird -----\tsuperhero",
  "254": "SELECT Superheroes.name \nFROM Superheroes \nJOIN Attributes ON Superheroes.id = Attributes.superhero_id \nWHERE Attributes.attribute_name = 'Intelligence' \nORDER BY Attributes.attribute_value ASC \nLIMIT 1;\t----- bird -----\tsuperhero",
  "255": "SELECT Superheroes.race \nFROM Superheroes \nWHERE Superheroes.superhero_name = 'Copycat'\t----- bird -----\tsuperhero",
  "256": "Database Schema: \n\nSuperheroes(superhero_id, superhero_name)\nSuperhero_Attributes(superhero_id, attribute_name, attribute_value)\n\nSQL Query:\n\nSELECT Superheroes.superhero_name\nFROM Superheroes\nINNER JOIN Superhero_Attributes ON Superheroes.superhero_id = Superhero_Attributes.superhero_id\nWHERE Superhero_Attributes.attribute_name = 'Durability' AND Superhero_Attributes.attribute_value < 50;\t----- bird -----\tsuperhero",
  "257": "SELECT superheroes.superhero_name \nFROM superheroes \nJOIN powers \nON superheroes.power_id = powers.power_id \nWHERE powers.power_name = 'Death Touch';\t----- bird -----\tsuperhero",
  "258": "SELECT COUNT(*)\nFROM heroes\nJOIN hero_attributes ON heroes.hero_id = hero_attributes.hero_id\nWHERE heroes.gender = 'Female' \nAND hero_attributes.attribute_name = 'Strength' \nAND hero_attributes.attribute_value = 100;\t----- bird -----\tsuperhero",
  "259": "SELECT \n    (SELECT COUNT(*) FROM superheroes WHERE alignment = 'Bad') * 100.0 / COUNT(*) as percentage,\n    (SELECT COUNT(*) FROM superheroes \n     INNER JOIN publishers ON superheroes.publisher_id = publishers.publisher_id \n     WHERE alignment = 'Bad' AND publisher_name = 'Marvel Comics') as Marvel_Comics_Count\nFROM \n    superheroes\t----- bird -----\tsuperhero",
  "260": "SELECT \n  ABS(SUM(publisher_name = 'Marvel Comics') - SUM(publisher_name = 'DC Comics')) as difference\nFROM superheroes;\t----- bird -----\tsuperhero",
  "261": "SELECT publishers.publisher_id\nFROM publishers\nINNER JOIN books ON publishers.publisher_id = books.publisher_id\nWHERE publishers.publisher_name = 'Star Trek';\t----- bird -----\tsuperhero",
  "262": "SELECT COUNT(*) AS total_superheroes_without_full_name\nFROM superheroes\nWHERE full_name IS NULL;\t----- bird -----\tsuperhero",
  "263": "SELECT AVG(weight_kg) \nFROM superheroes \nWHERE gender = 'Female'\t----- bird -----\tsuperhero",
  "264": "SELECT superpowers.power_name \nFROM superheroes \nINNER JOIN superpowers ON superheroes.superhero_id = superpowers.superhero_id \nWHERE superheroes.gender = 'Male' \nLIMIT 5\t----- bird -----\tsuperhero",
  "265": "SELECT name \nFROM superheroes \nWHERE height_cm BETWEEN 170 AND 190 \nAND eye_color = 'No Colour'\t----- bird -----\tsuperhero",
  "266": "SELECT colours.colour\nFROM superheroes\nJOIN colours ON superheroes.hair_colour_id = colours.id\nWHERE superheroes.height_cm = 185 AND superheroes.race = 'human'\t----- bird -----\tsuperhero",
  "267": "SELECT \n    (COUNT(CASE WHEN publishers.publisher_name = 'Marvel Comics' THEN 1 END) * 100.0  / COUNT(superheroes.id)) \nFROM \n    superheroes \nJOIN \n    publishers ON superheroes.publisher_id = publishers.id \nWHERE \n    superheroes.height_cm BETWEEN 150 AND 180\t----- bird -----\tsuperhero",
  "268": "SELECT superhero_name \nFROM superheroes \nWHERE gender = 'Male' \nAND weight_kg > (SELECT AVG(weight_kg)*0.79 FROM superheroes)\t----- bird -----\tsuperhero",
  "269": "SELECT superpowers.power_name\nFROM heroes\nJOIN hero_superpower ON heroes.hero_id = hero_superpower.hero_id\nJOIN superpowers ON superpowers.power_id = hero_superpower.power_id\nWHERE heroes.hero_id = 1\t----- bird -----\tsuperhero",
  "270": "SELECT COUNT(DISTINCT hero_id) \nFROM hero_powers hp \nJOIN powers p \nON hp.power_id=p.power_id \nWHERE p.power_name='Stealth';\t----- bird -----\tsuperhero",
  "271": "SELECT Heroes.full_name \nFROM Heroes \nJOIN Hero_Attributes ON Heroes.hero_id = Hero_Attributes.hero_id \nWHERE Hero_Attributes.attribute_name = 'strength' \nORDER BY Hero_Attributes.attribute_value DESC \nLIMIT 1\t----- bird -----\tsuperhero",
  "272": "SELECT superheroes.superhero_name\nFROM superheroes\nJOIN superhero_attributes ON superheroes.superhero_id = superhero_attributes.superhero_id\nJOIN publishers ON superheroes.publisher_id = publishers.publisher_id\nWHERE superhero_attributes.attribute_name = 'durability' AND publishers.publisher_name = 'Dark Horse Comics'\nORDER BY superhero_attributes.attribute_value DESC\nLIMIT 1;\t----- bird -----\tsuperhero",
  "273": "SELECT sh.eye_colour_id, sh.hair_colour_id, sh.skin_colour_id\nFROM superheroes sh\nJOIN publishers p ON sh.publisher_id = p.publisher_id\nWHERE sh.gender = 'Female' AND p.publisher_name = 'Dark Horse Comics'\t----- bird -----\tsuperhero",
  "274": "SELECT s.superhero_name, p.publisher_name\nFROM Superheroes s\nJOIN Characteristics c ON s.superhero_id = c.superhero_id\nJOIN Colors h ON c.hair_colour_id = h.colour_id\nJOIN Colors e ON c.eye_colour_id = e.colour_id\nJOIN Colors sk ON c.skin_colour_id = sk.colour_id\nJOIN Publishers p ON s.publisher_id = p.publisher_id\nWHERE h.colour_id = e.colour_id AND h.colour_id = sk.colour_id;\t----- bird -----\tsuperhero",
  "275": "SELECT \n  (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Superheroes WHERE gender = 'Female')) AS Percentage \nFROM \n  Superheroes \nJOIN \n  Colors \nON \n  Superheroes.skin_colour_id = Colors.id \nJOIN \n  Genders \nON \n  Superheroes.gender_id = Genders.id \nWHERE \n  Colors.color = 'Blue' \n  AND Genders.gender = 'Female'\t----- bird -----\tsuperhero",
  "276": "Database Schema: \nSuperheroes(superhero_id, superhero_name)\nSuperheroPowers(superhero_id, power_id)\nPowers(power_id, power_name)\n\nSQL Query: \nSELECT COUNT(power_id) \nFROM SuperheroPowers \nWHERE superhero_id = \n    (SELECT superhero_id \n     FROM Superheroes \n     WHERE superhero_name = 'Amazo');\t----- bird -----\tsuperhero",
  "277": "SELECT heroes.height_cm \nFROM heroes \nJOIN hero_eye_color ON heroes.hero_id = hero_eye_color.hero_id \nJOIN colour ON hero_eye_color.eye_colour_id = colour.id \nWHERE colour.colour = 'Amber';\t----- bird -----\tsuperhero",
  "278": "SELECT superhero_name\nFROM superheroes\nJOIN colours AS eye_colours ON superheroes.eye_colour_id = eye_colours.colour_id\nJOIN colours AS hair_colours ON superheroes.hair_colour_id = hair_colours.colour_id\nWHERE eye_colours.colour = 'Black' AND hair_colours.colour = 'Black'\t----- bird -----\tsuperhero",
  "279": "SELECT superhero_name \nFROM superheroes \nWHERE alignment = 'Neutral';\t----- bird -----\tsuperhero",
  "280": "Schema:\nheroes(hero_id, hero_name)\nhero_attributes(hero_id, attribute_name, attribute_value)\n\nSQL Query:\n\nSELECT COUNT(*) \nFROM heroes h \nJOIN hero_attributes ha ON h.hero_id = ha.hero_id \nWHERE ha.attribute_name = 'Strength' AND ha.attribute_value = \n    (SELECT MAX(attribute_value) \n     FROM hero_attributes \n     WHERE attribute_name = 'Strength');\t----- bird -----\tsuperhero",
  "281": "SELECT \n    (COUNT(*) * 100.0 / \n        (SELECT COUNT(*) FROM Heroes h2\n        JOIN Publishers p2 ON h2.publisher_id = p2.publisher_id\n        WHERE p2.publisher_name = 'Marvel Comics')\n    ) AS percentage\nFROM Heroes h1\nJOIN Publishers p1 ON h1.publisher_id = p1.publisher_id\nWHERE h1.gender = 'Female' AND p1.publisher_name = 'Marvel Comics'\t----- bird -----\tsuperhero",
  "282": "SELECT \n    (SELECT weight_kg FROM superhero WHERE full_name = 'Emil Blonsky') -\n    (SELECT weight_kg FROM superhero WHERE full_name = 'Charles Chandler') \nAS weight_difference;\t----- bird -----\tsuperhero",
  "283": "SELECT AVG(height_cm) AS average_height FROM superheroes WHERE height_cm > 0;\t----- bird -----\tsuperhero",
  "284": "SELECT powers.power_name\nFROM superheroes\nJOIN powers ON superheroes.superhero_id = powers.power_id\nWHERE superheroes.superhero_name = 'Abomination'\t----- bird -----\tsuperhero",
  "285": "SELECT superhero_name \nFROM Superheroes \nWHERE attribute_name = 'Speed' \nORDER BY attribute_value DESC \nLIMIT 1\t----- bird -----\tsuperhero",
  "286": "SELECT attribute_name, attribute_value \nFROM superheroes \nJOIN superhero_attributes \n    ON superheroes.superhero_id = superhero_attributes.superhero_id \nWHERE superheroes.superhero_name = '3-D Man'\t----- bird -----\tsuperhero",
  "287": "SELECT S.superhero_name \nFROM superheroes S \nJOIN colors C1 ON S.eye_colour_id = C1.color_id \nJOIN colors C2 ON S.hair_colour_id = C2.color_id\nWHERE C1.color = 'Blue' AND C2.color = 'Brown';\t----- bird -----\tsuperhero",
  "288": "SELECT p.publisher_name \nFROM superheroes s \nJOIN publishers p ON s.publisher_id = p.publisher_id \nWHERE s.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')\t----- bird -----\tsuperhero",
  "289": "SELECT \n    (COUNT(DISTINCT s.superhero_name) * 1.0 / (SELECT COUNT(*) FROM superheroes) * 100) \nAS percentage\nFROM superheroes AS s \nINNER JOIN eye_colors AS e ON s.eye_colour_id = e.id\nWHERE e.color = 'Blue';\t----- bird -----\tsuperhero",
  "290": "SELECT \n  (SELECT COUNT(*) FROM Superheroes WHERE gender = 'Male') / \n  (SELECT COUNT(*) FROM Superheroes WHERE gender = 'Female') AS ratio;\t----- bird -----\tsuperhero",
  "291": "SELECT colour.colour \nFROM superhero \nJOIN colour ON eye_colour_id = colour.id \nWHERE fullName = 'Karen Beecher-Duncan'\t----- bird -----\tsuperhero",
  "292": "SELECT \n    (SELECT COUNT(*) \n     FROM superheroes AS T1 \n     JOIN colours ON T1.eye_colour_id = colours.id \n     WHERE (T1.weight_kg = 0 OR T1.weight_kg IS NULL) AND colours.id = 7) \n    -\n    (SELECT COUNT(*) \n     FROM superheroes AS T2 \n     JOIN colours ON T2.eye_colour_id = colours.id \n     WHERE (T2.weight_kg = 0 OR T2.weight_kg IS NULL) AND colours.id = 1)\nFROM superheroes \nLIMIT 1;\t----- bird -----\tsuperhero",
  "293": "SELECT COUNT(*) \nFROM superheroes \nJOIN colours ON superheroes.skin_colour_id = colours.id\nWHERE alignment = 'Bad' AND colour = 'Green';\t----- bird -----\tsuperhero",
  "294": "SELECT superheroes.superhero_name \nFROM superheroes \nJOIN powers ON superheroes.superhero_id = powers.superhero_id \nWHERE powers.power_name = 'Wind Control' \nORDER BY superheroes.superhero_name ASC;\t----- bird -----\tsuperhero",
  "295": "SELECT Superheroes.gender\nFROM Superheroes\nJOIN Powers ON Superheroes.superhero_id = Powers.superhero_id\nWHERE Powers.power_name = 'Phoenix Force';\t----- bird -----\tsuperhero",
  "296": "SELECT \n    ABS(SUM(CASE WHEN publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - \n    SUM(CASE WHEN publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END)) AS Difference\nFROM superheroes\t----- bird -----\tsuperhero",
  "297": "SELECT DisplayName, MAX(Reputation) AS Max_Reputation\nFROM users\nWHERE DisplayName IN ('Harlan', 'Jarrod Dixon')\nGROUP BY DisplayName;\t----- bird -----\tcodebase_community",
  "298": "SELECT DisplayName \nFROM Users \nWHERE strftime('%Y', CreationDate) = '2011'\t----- bird -----\tcodebase_community",
  "299": "SELECT COUNT(DISTINCT UserID) \nFROM UserAccess \nWHERE LastAccessDate > '2014-09-01'\t----- bird -----\tcodebase_community",
  "300": "SELECT Users.DisplayName \nFROM Posts \nJOIN Users ON Posts.OwnerUserId = Users.Id \nWHERE Posts.Title = 'Eliciting priors from experts'\t----- bird -----\tcodebase_community",
  "301": "SELECT COUNT(*) \nFROM Posts \nINNER JOIN Users \nON Posts.OwnerUserId = Users.UserId \nWHERE Users.DisplayName = 'csgillespie';\t----- bird -----\tcodebase_community",
  "302": "SELECT Users.DisplayName \nFROM Posts \nJOIN Users ON Posts.LastEditorUserId = Users.UserId \nWHERE Posts.Title = \"Examples for teaching: Correlation does not mean causation\";\t----- bird -----\tcodebase_community",
  "303": "SELECT COUNT(*) \nFROM Users \nJOIN Posts ON Users.UserId = Posts.UserId \nWHERE Users.Age > 65 AND Posts.Score >= 20\t----- bird -----\tcodebase_community",
  "304": "SELECT Posts.Body\nFROM Posts\nINNER JOIN Tags\nON Posts.Id = Tags.ExcerptPostId\nWHERE Tags.TagName = 'bayesian'\t----- bird -----\tcodebase_community",
  "305": "SELECT AVG(Posts.Score)\nFROM Users\nJOIN Posts ON Users.Id = Posts.OwnerUserId\nWHERE Users.DisplayName = 'csgillespie';\t----- bird -----\tcodebase_community",
  "306": "SELECT \n    (COUNT(CASE WHEN Users.Age > 65 THEN 1 END) / CAST(COUNT(*) AS FLOAT)) * 100 \nFROM \n    Posts \nINNER JOIN \n    Users ON Posts.UserId = Users.Id\nWHERE \n    Posts.Score > 5\t----- bird -----\tcodebase_community",
  "307": "SELECT Posts.FavoriteCount\nFROM Posts\nINNER JOIN Comments ON Posts.Id = Comments.PostId\nINNER JOIN Users ON Comments.UserId = Users.Id\nWHERE Users.Id = 3025 AND Comments.CreationDate = '2014-04-23 20:29:39'\t----- bird -----\tcodebase_community",
  "308": "SELECT \n  CASE \n    WHEN P.ClosedDate IS NULL THEN 'No'\n    ELSE 'Yes'\n  END as 'Well-Finished'\nFROM \n  Users as U\nJOIN\n  Comments as C\nON\n  U.Id = C.UserId\nJOIN\n  Posts as P\nON\n  C.PostId = P.Id\nWHERE\n  U.Id = 23853 AND C.CreationDate = '2013-07-12 09:08:18'\t----- bird -----\tcodebase_community",
  "309": "SELECT COUNT(Posts.Id)\nFROM Posts \nJOIN Users ON Users.Id = Posts.OwnerUserId\nWHERE Users.DisplayName = 'Tiago Pasqualini';\t----- bird -----\tcodebase_community",
  "310": "Database Schema: \nVotes(Id, PostId, VoteTypeId, UserId)\nUsers(Id, DisplayName, Age, Location)\n\nSQL Query:\nSELECT Users.DisplayName\nFROM Votes \nJOIN Users ON Votes.UserId = Users.Id \nWHERE Votes.Id = 6347;\t----- bird -----\tcodebase_community"
}